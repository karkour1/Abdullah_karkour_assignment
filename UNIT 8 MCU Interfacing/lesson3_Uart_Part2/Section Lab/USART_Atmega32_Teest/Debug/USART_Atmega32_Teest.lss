
USART_Atmega32_Teest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00002d5e  00002df2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000083  0080018c  0080018c  00002f1e  2**0
                  ALLOC
  3 .stab         00001e3c  00000000  00000000  00002f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001095  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00006144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00008153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  000092c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a464  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a725  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_13>
      38:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_14>
      3c:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 12 	call	0x2570	; 0x2570 <main>
      8a:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e7 57       	subi	r30, 0x77	; 119
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <USART_ReadUCSRC>:
/*The read access is controlled by a timed sequence. Reading the I/O location once returns the UBRRH Register contents.
 * If the register location was read in previous system clock cycle,
 *  reading the register in the current clock cycle will return the UCSRCcontents */

uint8_t USART_ReadUCSRC( void )
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucsrc;
	/* Read UCSRC */
	ucsrc = UBRRH;
     ce0:	e0 e4       	ldi	r30, 0x40	; 64
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	89 83       	std	Y+1, r24	; 0x01
	ucsrc = UCSRC;
     ce8:	e0 e4       	ldi	r30, 0x40	; 64
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	89 83       	std	Y+1, r24	; 0x01
	return ucsrc;
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <Send_Data>:
void Send_Data(uint16_t* data)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <Send_Data+0x6>
     d00:	00 d0       	rcall	.+0      	; 0xd02 <Send_Data+0x8>
     d02:	0f 92       	push	r0
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01
	if(G_usart_cnfg->data_bits == USART_DataBit_9bits)
     d0c:	e0 91 8d 01 	lds	r30, 0x018D
     d10:	f0 91 8e 01 	lds	r31, 0x018E
     d14:	81 85       	ldd	r24, Z+9	; 0x09
     d16:	87 30       	cpi	r24, 0x07	; 7
     d18:	61 f5       	brne	.+88     	; 0xd72 <Send_Data+0x78>
	{
		/* Copy 9th bit to TXB8 */
		UCSRB &= ~(1<<TXB8);
     d1a:	aa e2       	ldi	r26, 0x2A	; 42
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ea e2       	ldi	r30, 0x2A	; 42
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	8c 93       	st	X, r24
		UCSRB = ( *data & 0x0100 )? UCSRB|(1<<TXB8): UCSRB&(~(1<<TXB8));
     d28:	8a e2       	ldi	r24, 0x2A	; 42
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9d 83       	std	Y+5, r25	; 0x05
     d2e:	8c 83       	std	Y+4, r24	; 0x04
     d30:	e9 81       	ldd	r30, Y+1	; 0x01
     d32:	fa 81       	ldd	r31, Y+2	; 0x02
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	80 70       	andi	r24, 0x00	; 0
     d3a:	91 70       	andi	r25, 0x01	; 1
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	39 f0       	breq	.+14     	; 0xd4e <Send_Data+0x54>
     d40:	ea e2       	ldi	r30, 0x2A	; 42
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	98 2f       	mov	r25, r24
     d48:	91 60       	ori	r25, 0x01	; 1
     d4a:	9b 83       	std	Y+3, r25	; 0x03
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <Send_Data+0x60>
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	e8 2f       	mov	r30, r24
     d56:	ee 7f       	andi	r30, 0xFE	; 254
     d58:	eb 83       	std	Y+3, r30	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	ec 81       	ldd	r30, Y+4	; 0x04
     d5e:	fd 81       	ldd	r31, Y+5	; 0x05
     d60:	80 83       	st	Z, r24

		/* Put data into buffer, sends the data */
		UDR = *data;
     d62:	ac e2       	ldi	r26, 0x2C	; 44
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e9 81       	ldd	r30, Y+1	; 0x01
     d68:	fa 81       	ldd	r31, Y+2	; 0x02
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	8c 93       	st	X, r24
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <Send_Data+0x86>
	}
	else
	{
		/* Put data into buffer, sends the data */
		UDR = *data;
     d72:	ac e2       	ldi	r26, 0x2C	; 44
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e9 81       	ldd	r30, Y+1	; 0x01
     d78:	fa 81       	ldd	r31, Y+2	; 0x02
     d7a:	80 81       	ld	r24, Z
     d7c:	91 81       	ldd	r25, Z+1	; 0x01
     d7e:	8c 93       	st	X, r24
	}
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <RXC_CallBack>:

void RXC_CallBack(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	static uint8_t i = 0 ;

	// Receive Data
	MCAL_USART_Resive(&ch , disable);
     d98:	8b ec       	ldi	r24, 0xCB	; 203
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	0e 94 97 08 	call	0x112e	; 0x112e <MCAL_USART_Resive>

	if (ch != '\r')
     da2:	80 91 cb 01 	lds	r24, 0x01CB
     da6:	90 91 cc 01 	lds	r25, 0x01CC
     daa:	8d 30       	cpi	r24, 0x0D	; 13
     dac:	91 05       	cpc	r25, r1
     dae:	91 f0       	breq	.+36     	; 0xdd4 <RXC_CallBack+0x44>
	{
		G_RData_Buf[i]= ch ;
     db0:	80 91 8c 01 	lds	r24, 0x018C
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	80 91 cb 01 	lds	r24, 0x01CB
     dbc:	90 91 cc 01 	lds	r25, 0x01CC
     dc0:	f9 01       	movw	r30, r18
     dc2:	e7 56       	subi	r30, 0x67	; 103
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	80 83       	st	Z, r24
		i++;
     dc8:	80 91 8c 01 	lds	r24, 0x018C
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 8c 01 	sts	0x018C, r24
     dd2:	13 c0       	rjmp	.+38     	; 0xdfa <RXC_CallBack+0x6a>
	}
	else
	{
		G_RData_Buf[i]= '\0' ;
     dd4:	80 91 8c 01 	lds	r24, 0x018C
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	fc 01       	movw	r30, r24
     dde:	e7 56       	subi	r30, 0x67	; 103
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	10 82       	st	Z, r1
		i=0;
     de4:	10 92 8c 01 	sts	0x018C, r1

		R_Str_C_Flag = 0 ;
     de8:	10 92 8a 01 	sts	0x018A, r1

		// Disable RXC interrupt
		UCSRB &= ~(USART_IRQ_Enable_RXC);
     dec:	aa e2       	ldi	r26, 0x2A	; 42
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ea e2       	ldi	r30, 0x2A	; 42
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8f 77       	andi	r24, 0x7F	; 127
     df8:	8c 93       	st	X, r24
	}

}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <TXC_CallBack>:
void TXC_CallBack(void)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	static uint8_t i =1 ;

	if (G_SData_Buf[i] != '\0')
     e08:	20 91 95 01 	lds	r18, 0x0195
     e0c:	30 91 96 01 	lds	r19, 0x0196
     e10:	80 91 8b 01 	lds	r24, 0x018B
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	e8 0f       	add	r30, r24
     e1c:	f9 1f       	adc	r31, r25
     e1e:	80 81       	ld	r24, Z
     e20:	88 23       	and	r24, r24
     e22:	99 f0       	breq	.+38     	; 0xe4a <TXC_CallBack+0x4a>
	{
		Send_Data(&G_SData_Buf[i]);
     e24:	80 91 95 01 	lds	r24, 0x0195
     e28:	90 91 96 01 	lds	r25, 0x0196
     e2c:	9c 01       	movw	r18, r24
     e2e:	80 91 8b 01 	lds	r24, 0x018B
     e32:	88 2f       	mov	r24, r24
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Send_Data>
		i++;
     e3e:	80 91 8b 01 	lds	r24, 0x018B
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 8b 01 	sts	0x018B, r24
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <TXC_CallBack+0x64>

	}
	else
	{
		SendStrFlag = 1 ;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 89 01 	sts	0x0189, r24
		i=1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 8b 01 	sts	0x018B, r24

		// Disable TXC interrupt
		UCSRB &= ~(USART_IRQ_Enable_TXC);
     e56:	aa e2       	ldi	r26, 0x2A	; 42
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ea e2       	ldi	r30, 0x2A	; 42
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7b       	andi	r24, 0xBF	; 191
     e62:	8c 93       	st	X, r24
	}

}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <UDRIE_CallBack>:
void UDRIE_CallBack(void)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	/* Disable  Interrupt */
	UCSRB &= ~(USART_IRQ_Enable_UDRIE);
     e72:	aa e2       	ldi	r26, 0x2A	; 42
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ea e2       	ldi	r30, 0x2A	; 42
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 7d       	andi	r24, 0xDF	; 223
     e7e:	8c 93       	st	X, r24
	Send_Data(&Data);
     e80:	87 e9       	ldi	r24, 0x97	; 151
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Send_Data>

}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <MCAL_USART_Init>:

/* APIS */
void MCAL_USART_Init(USART_Config_t* usart_cnfg)
{
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	2a 97       	sbiw	r28, 0x0a	; 10
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03
	G_usart_cnfg = usart_cnfg;
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	90 93 8e 01 	sts	0x018E, r25
     eb6:	80 93 8d 01 	sts	0x018D, r24
	/* Set baud rate */
	uint16_t baud =0 ;
     eba:	1a 82       	std	Y+2, r1	; 0x02
     ebc:	19 82       	std	Y+1, r1	; 0x01
	if(usart_cnfg->Mode == USART_Normal_Mode)
     ebe:	eb 81       	ldd	r30, Y+3	; 0x03
     ec0:	fc 81       	ldd	r31, Y+4	; 0x04
     ec2:	80 85       	ldd	r24, Z+8	; 0x08
     ec4:	88 23       	and	r24, r24
     ec6:	79 f5       	brne	.+94     	; 0xf26 <MCAL_USART_Init+0x98>
	{
		UCSRA &= ~(1<<U2X);
     ec8:	ab e2       	ldi	r26, 0x2B	; 43
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e2       	ldi	r30, 0x2B	; 43
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8d 7f       	andi	r24, 0xFD	; 253
     ed4:	8c 93       	st	X, r24
		baud = (usart_cnfg->Fosc /(16*usart_cnfg->BaudRate))-1;
     ed6:	eb 81       	ldd	r30, Y+3	; 0x03
     ed8:	fc 81       	ldd	r31, Y+4	; 0x04
     eda:	e0 80       	ld	r14, Z
     edc:	f1 80       	ldd	r15, Z+1	; 0x01
     ede:	02 81       	ldd	r16, Z+2	; 0x02
     ee0:	13 81       	ldd	r17, Z+3	; 0x03
     ee2:	eb 81       	ldd	r30, Y+3	; 0x03
     ee4:	fc 81       	ldd	r31, Y+4	; 0x04
     ee6:	84 81       	ldd	r24, Z+4	; 0x04
     ee8:	95 81       	ldd	r25, Z+5	; 0x05
     eea:	a6 81       	ldd	r26, Z+6	; 0x06
     eec:	b7 81       	ldd	r27, Z+7	; 0x07
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	aa 1f       	adc	r26, r26
     ef4:	bb 1f       	adc	r27, r27
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	aa 1f       	adc	r26, r26
     efc:	bb 1f       	adc	r27, r27
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	aa 1f       	adc	r26, r26
     f04:	bb 1f       	adc	r27, r27
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	aa 1f       	adc	r26, r26
     f0c:	bb 1f       	adc	r27, r27
     f0e:	9c 01       	movw	r18, r24
     f10:	ad 01       	movw	r20, r26
     f12:	c8 01       	movw	r24, r16
     f14:	b7 01       	movw	r22, r14
     f16:	0e 94 b3 13 	call	0x2766	; 0x2766 <__udivmodsi4>
     f1a:	da 01       	movw	r26, r20
     f1c:	c9 01       	movw	r24, r18
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	2f c0       	rjmp	.+94     	; 0xf84 <MCAL_USART_Init+0xf6>
	}
	else if (usart_cnfg->Mode == USART_Double_Speed_Mode)
     f26:	eb 81       	ldd	r30, Y+3	; 0x03
     f28:	fc 81       	ldd	r31, Y+4	; 0x04
     f2a:	80 85       	ldd	r24, Z+8	; 0x08
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	51 f5       	brne	.+84     	; 0xf84 <MCAL_USART_Init+0xf6>
	{
		UCSRA |= (1<<U2X);
     f30:	ab e2       	ldi	r26, 0x2B	; 43
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	eb e2       	ldi	r30, 0x2B	; 43
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	82 60       	ori	r24, 0x02	; 2
     f3c:	8c 93       	st	X, r24
		baud = (usart_cnfg->Fosc /(8*usart_cnfg->BaudRate))-1;
     f3e:	eb 81       	ldd	r30, Y+3	; 0x03
     f40:	fc 81       	ldd	r31, Y+4	; 0x04
     f42:	e0 80       	ld	r14, Z
     f44:	f1 80       	ldd	r15, Z+1	; 0x01
     f46:	02 81       	ldd	r16, Z+2	; 0x02
     f48:	13 81       	ldd	r17, Z+3	; 0x03
     f4a:	eb 81       	ldd	r30, Y+3	; 0x03
     f4c:	fc 81       	ldd	r31, Y+4	; 0x04
     f4e:	84 81       	ldd	r24, Z+4	; 0x04
     f50:	95 81       	ldd	r25, Z+5	; 0x05
     f52:	a6 81       	ldd	r26, Z+6	; 0x06
     f54:	b7 81       	ldd	r27, Z+7	; 0x07
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	aa 1f       	adc	r26, r26
     f5c:	bb 1f       	adc	r27, r27
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	aa 1f       	adc	r26, r26
     f64:	bb 1f       	adc	r27, r27
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	aa 1f       	adc	r26, r26
     f6c:	bb 1f       	adc	r27, r27
     f6e:	9c 01       	movw	r18, r24
     f70:	ad 01       	movw	r20, r26
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	0e 94 b3 13 	call	0x2766	; 0x2766 <__udivmodsi4>
     f7a:	da 01       	movw	r26, r20
     f7c:	c9 01       	movw	r24, r18
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
	}
	UCSRC= USART_ReadUCSRC()&(~(1<<URSEL));
     f84:	00 e4       	ldi	r16, 0x40	; 64
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     f8c:	8f 77       	andi	r24, 0x7F	; 127
     f8e:	f8 01       	movw	r30, r16
     f90:	80 83       	st	Z, r24
	UBRRH = (uint8_t)(baud>>8);
     f92:	e0 e4       	ldi	r30, 0x40	; 64
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	89 2f       	mov	r24, r25
     f9c:	99 27       	eor	r25, r25
     f9e:	80 83       	st	Z, r24
	UBRRL = (uint8_t)baud;
     fa0:	e9 e2       	ldi	r30, 0x29	; 41
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	80 83       	st	Z, r24

	/* Set frame format: Bits of data, Number of stop bit , Parity Mode */
	UCSRC= USART_ReadUCSRC()|(1<<URSEL);
     fa8:	00 e4       	ldi	r16, 0x40	; 64
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	f8 01       	movw	r30, r16
     fb4:	80 83       	st	Z, r24

	UCSRC = USART_ReadUCSRC()|((usart_cnfg->data_bits & 0x03)<<UCSZ0);
     fb6:	00 e4       	ldi	r16, 0x40	; 64
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     fbe:	28 2f       	mov	r18, r24
     fc0:	eb 81       	ldd	r30, Y+3	; 0x03
     fc2:	fc 81       	ldd	r31, Y+4	; 0x04
     fc4:	81 85       	ldd	r24, Z+9	; 0x09
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	83 70       	andi	r24, 0x03	; 3
     fcc:	90 70       	andi	r25, 0x00	; 0
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	82 2b       	or	r24, r18
     fd4:	f8 01       	movw	r30, r16
     fd6:	80 83       	st	Z, r24
	UCSRB = (usart_cnfg->data_bits>>2)? (UCSRB|(1<<UCSZ2)): (UCSRB& (~(1<<UCSZ2)));
     fd8:	8a e2       	ldi	r24, 0x2A	; 42
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9a 87       	std	Y+10, r25	; 0x0a
     fde:	89 87       	std	Y+9, r24	; 0x09
     fe0:	eb 81       	ldd	r30, Y+3	; 0x03
     fe2:	fc 81       	ldd	r31, Y+4	; 0x04
     fe4:	81 85       	ldd	r24, Z+9	; 0x09
     fe6:	86 95       	lsr	r24
     fe8:	86 95       	lsr	r24
     fea:	88 23       	and	r24, r24
     fec:	39 f0       	breq	.+14     	; 0xffc <MCAL_USART_Init+0x16e>
     fee:	ea e2       	ldi	r30, 0x2A	; 42
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	98 2f       	mov	r25, r24
     ff6:	94 60       	ori	r25, 0x04	; 4
     ff8:	98 87       	std	Y+8, r25	; 0x08
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <MCAL_USART_Init+0x17a>
     ffc:	ea e2       	ldi	r30, 0x2A	; 42
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	e8 2f       	mov	r30, r24
    1004:	eb 7f       	andi	r30, 0xFB	; 251
    1006:	e8 87       	std	Y+8, r30	; 0x08
    1008:	88 85       	ldd	r24, Y+8	; 0x08
    100a:	e9 85       	ldd	r30, Y+9	; 0x09
    100c:	fa 85       	ldd	r31, Y+10	; 0x0a
    100e:	80 83       	st	Z, r24

	UCSRC = (usart_cnfg->Stop_bits)? (USART_ReadUCSRC()|(1<<USBS)) : (USART_ReadUCSRC()& (~(1<<USBS)));
    1010:	e0 e4       	ldi	r30, 0x40	; 64
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	ff 83       	std	Y+7, r31	; 0x07
    1016:	ee 83       	std	Y+6, r30	; 0x06
    1018:	eb 81       	ldd	r30, Y+3	; 0x03
    101a:	fc 81       	ldd	r31, Y+4	; 0x04
    101c:	82 85       	ldd	r24, Z+10	; 0x0a
    101e:	88 23       	and	r24, r24
    1020:	31 f0       	breq	.+12     	; 0x102e <MCAL_USART_Init+0x1a0>
    1022:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
    1026:	f8 2f       	mov	r31, r24
    1028:	f8 60       	ori	r31, 0x08	; 8
    102a:	fd 83       	std	Y+5, r31	; 0x05
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <MCAL_USART_Init+0x1aa>
    102e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
    1032:	98 2f       	mov	r25, r24
    1034:	97 7f       	andi	r25, 0xF7	; 247
    1036:	9d 83       	std	Y+5, r25	; 0x05
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	ee 81       	ldd	r30, Y+6	; 0x06
    103c:	ff 81       	ldd	r31, Y+7	; 0x07
    103e:	80 83       	st	Z, r24

	UCSRC = USART_ReadUCSRC()|((usart_cnfg->Parity_status)<<UPM0);
    1040:	00 e4       	ldi	r16, 0x40	; 64
    1042:	10 e0       	ldi	r17, 0x00	; 0
    1044:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
    1048:	28 2f       	mov	r18, r24
    104a:	eb 81       	ldd	r30, Y+3	; 0x03
    104c:	fc 81       	ldd	r31, Y+4	; 0x04
    104e:	83 85       	ldd	r24, Z+11	; 0x0b
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	82 95       	swap	r24
    1056:	92 95       	swap	r25
    1058:	90 7f       	andi	r25, 0xF0	; 240
    105a:	98 27       	eor	r25, r24
    105c:	80 7f       	andi	r24, 0xF0	; 240
    105e:	98 27       	eor	r25, r24
    1060:	82 2b       	or	r24, r18
    1062:	f8 01       	movw	r30, r16
    1064:	80 83       	st	Z, r24


	/* Declare the callback */
	P_IRQ_CallBack[0] = RXC_CallBack ;
    1066:	88 ec       	ldi	r24, 0xC8	; 200
    1068:	96 e0       	ldi	r25, 0x06	; 6
    106a:	90 93 90 01 	sts	0x0190, r25
    106e:	80 93 8f 01 	sts	0x018F, r24
	P_IRQ_CallBack[1] = UDRIE_CallBack ;
    1072:	85 e3       	ldi	r24, 0x35	; 53
    1074:	97 e0       	ldi	r25, 0x07	; 7
    1076:	90 93 92 01 	sts	0x0192, r25
    107a:	80 93 91 01 	sts	0x0191, r24
	P_IRQ_CallBack[2] = TXC_CallBack ;
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	97 e0       	ldi	r25, 0x07	; 7
    1082:	90 93 94 01 	sts	0x0194, r25
    1086:	80 93 93 01 	sts	0x0193, r24

	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN)|(1<<TXEN);
    108a:	aa e2       	ldi	r26, 0x2A	; 42
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e2       	ldi	r30, 0x2A	; 42
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	88 61       	ori	r24, 0x18	; 24
    1096:	8c 93       	st	X, r24


}
    1098:	2a 96       	adiw	r28, 0x0a	; 10
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	08 95       	ret

000010b2 <MCAL_USART_Send>:
void MCAL_USART_Send(uint16_t* data, enum Polling_mechism P_E)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <MCAL_USART_Send+0x6>
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait  transmit to Complete */
	while(( UCSRA & (1<<TXC)));
    10c4:	eb e2       	ldi	r30, 0x2B	; 43
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	80 74       	andi	r24, 0x40	; 64
    10d0:	90 70       	andi	r25, 0x00	; 0
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	b9 f7       	brne	.-18     	; 0x10c4 <MCAL_USART_Send+0x12>
	if (P_E == enable)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 23       	and	r24, r24
    10da:	71 f4       	brne	.+28     	; 0x10f8 <MCAL_USART_Send+0x46>
	{
		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)));
    10dc:	eb e2       	ldi	r30, 0x2B	; 43
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	80 72       	andi	r24, 0x20	; 32
    10e8:	90 70       	andi	r25, 0x00	; 0
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	b9 f3       	breq	.-18     	; 0x10dc <MCAL_USART_Send+0x2a>
		Send_Data(data);
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Send_Data>
    10f6:	15 c0       	rjmp	.+42     	; 0x1122 <MCAL_USART_Send+0x70>
	}
	else
	{
		Data = *data ;
    10f8:	e9 81       	ldd	r30, Y+1	; 0x01
    10fa:	fa 81       	ldd	r31, Y+2	; 0x02
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	90 93 98 01 	sts	0x0198, r25
    1104:	80 93 97 01 	sts	0x0197, r24
		P_IRQ_CallBack[1] = UDRIE_CallBack ;
    1108:	85 e3       	ldi	r24, 0x35	; 53
    110a:	97 e0       	ldi	r25, 0x07	; 7
    110c:	90 93 92 01 	sts	0x0192, r25
    1110:	80 93 91 01 	sts	0x0191, r24
		/* Enable  Interrupt */
		UCSRB |= USART_IRQ_Enable_UDRIE;
    1114:	aa e2       	ldi	r26, 0x2A	; 42
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ea e2       	ldi	r30, 0x2A	; 42
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	8c 93       	st	X, r24
	}

}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <MCAL_USART_Resive>:
void MCAL_USART_Resive(uint16_t* data , enum Polling_mechism P_E)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <MCAL_USART_Resive+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <MCAL_USART_Resive+0x8>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	6b 83       	std	Y+3, r22	; 0x03
	if (P_E == enable)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	88 23       	and	r24, r24
    1146:	29 f4       	brne	.+10     	; 0x1152 <MCAL_USART_Resive+0x24>
		/* Wait for receive Data in receive buffer */
				while ( !( UCSRA & (1<<RXC)));
    1148:	eb e2       	ldi	r30, 0x2B	; 43
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 23       	and	r24, r24
    1150:	dc f7       	brge	.-10     	; 0x1148 <MCAL_USART_Resive+0x1a>

	if(G_usart_cnfg->data_bits  == USART_DataBit_9bits)
    1152:	e0 91 8d 01 	lds	r30, 0x018D
    1156:	f0 91 8e 01 	lds	r31, 0x018E
    115a:	81 85       	ldd	r24, Z+9	; 0x09
    115c:	87 30       	cpi	r24, 0x07	; 7
    115e:	81 f5       	brne	.+96     	; 0x11c0 <MCAL_USART_Resive+0x92>
	{
		/* Copy 9th bit From RXB8 */
		*data = ( UCSRB &(1<<RXB8))? *data|(1<<8): *data&(~(1<<8));
    1160:	ea e2       	ldi	r30, 0x2A	; 42
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	82 70       	andi	r24, 0x02	; 2
    116c:	90 70       	andi	r25, 0x00	; 0
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	49 f0       	breq	.+18     	; 0x1184 <MCAL_USART_Resive+0x56>
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	9c 01       	movw	r18, r24
    117c:	31 60       	ori	r19, 0x01	; 1
    117e:	3d 83       	std	Y+5, r19	; 0x05
    1180:	2c 83       	std	Y+4, r18	; 0x04
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <MCAL_USART_Resive+0x66>
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	9c 01       	movw	r18, r24
    118e:	3e 7f       	andi	r19, 0xFE	; 254
    1190:	3d 83       	std	Y+5, r19	; 0x05
    1192:	2c 83       	std	Y+4, r18	; 0x04
    1194:	e9 81       	ldd	r30, Y+1	; 0x01
    1196:	fa 81       	ldd	r31, Y+2	; 0x02
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24

		/* Read data From buffer */
		*data |= UDR ;
    11a0:	e9 81       	ldd	r30, Y+1	; 0x01
    11a2:	fa 81       	ldd	r31, Y+2	; 0x02
    11a4:	20 81       	ld	r18, Z
    11a6:	31 81       	ldd	r19, Z+1	; 0x01
    11a8:	ec e2       	ldi	r30, 0x2C	; 44
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	82 2b       	or	r24, r18
    11b4:	93 2b       	or	r25, r19
    11b6:	e9 81       	ldd	r30, Y+1	; 0x01
    11b8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ba:	91 83       	std	Z+1, r25	; 0x01
    11bc:	80 83       	st	Z, r24
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <MCAL_USART_Resive+0xa4>
	}
	else
	{
		/* Read data From buffer */
		*data = UDR ;
    11c0:	ec e2       	ldi	r30, 0x2C	; 44
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	e9 81       	ldd	r30, Y+1	; 0x01
    11cc:	fa 81       	ldd	r31, Y+2	; 0x02
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	80 83       	st	Z, r24
	}
}
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <MCAL_USART_SendString>:

// Send String without Block the main function
void MCAL_USART_SendString(uint8_t* data)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <MCAL_USART_SendString+0x6>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
	if (SendStrFlag == 1)
    11f0:	80 91 89 01 	lds	r24, 0x0189
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	a9 f4       	brne	.+42     	; 0x1222 <MCAL_USART_SendString+0x40>
	{
		// Assign in global buffer
		G_SData_Buf = data ;
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	90 93 96 01 	sts	0x0196, r25
    1200:	80 93 95 01 	sts	0x0195, r24

		// Enable TXC interrupt
		UCSRB |= USART_IRQ_Enable_TXC;
    1204:	aa e2       	ldi	r26, 0x2A	; 42
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ea e2       	ldi	r30, 0x2A	; 42
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 64       	ori	r24, 0x40	; 64
    1210:	8c 93       	st	X, r24

		// Send the first Data
		MCAL_USART_Send(&data[0],disable);
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MCAL_USART_Send>

		SendStrFlag = 0 ;
    121c:	10 92 89 01 	sts	0x0189, r1
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <MCAL_USART_SendString+0x50>
	}
	else
	{
		while(SendStrFlag == 0);
    1222:	80 91 89 01 	lds	r24, 0x0189
    1226:	88 23       	and	r24, r24
    1228:	e1 f3       	breq	.-8      	; 0x1222 <MCAL_USART_SendString+0x40>
		MCAL_USART_SendString(data);
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <MCAL_USART_SendString>
	}


}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <MCAL_USART_ResiveString>:

// Receive String without Block the main function
void MCAL_USART_ResiveString(uint8_t* data)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <MCAL_USART_ResiveString+0x6>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	9b 83       	std	Y+3, r25	; 0x03
    124a:	8a 83       	std	Y+2, r24	; 0x02
	// Enable RXC interrupt
	UCSRB |= USART_IRQ_Enable_RXC;
    124c:	aa e2       	ldi	r26, 0x2A	; 42
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ea e2       	ldi	r30, 0x2A	; 42
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	8c 93       	st	X, r24

	if (R_Str_C_Flag == 0)
    125a:	80 91 8a 01 	lds	r24, 0x018A
    125e:	88 23       	and	r24, r24
    1260:	09 f5       	brne	.+66     	; 0x12a4 <MCAL_USART_ResiveString+0x68>
	{
		uint8_t x ;
		for (x=0 ; G_RData_Buf[x] != '\0' ; x++)
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	13 c0       	rjmp	.+38     	; 0x128c <MCAL_USART_ResiveString+0x50>
		{
			data[x]= G_RData_Buf[x];
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	9b 81       	ldd	r25, Y+3	; 0x03
    1270:	dc 01       	movw	r26, r24
    1272:	a2 0f       	add	r26, r18
    1274:	b3 1f       	adc	r27, r19
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	fc 01       	movw	r30, r24
    127e:	e7 56       	subi	r30, 0x67	; 103
    1280:	fe 4f       	sbci	r31, 0xFE	; 254
    1282:	80 81       	ld	r24, Z
    1284:	8c 93       	st	X, r24
	UCSRB |= USART_IRQ_Enable_RXC;

	if (R_Str_C_Flag == 0)
	{
		uint8_t x ;
		for (x=0 ; G_RData_Buf[x] != '\0' ; x++)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	fc 01       	movw	r30, r24
    1294:	e7 56       	subi	r30, 0x67	; 103
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	80 81       	ld	r24, Z
    129a:	88 23       	and	r24, r24
    129c:	21 f7       	brne	.-56     	; 0x1266 <MCAL_USART_ResiveString+0x2a>
		{
			data[x]= G_RData_Buf[x];
		}
		R_Str_C_Flag = 1 ;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	80 93 8a 01 	sts	0x018A, r24
	}

}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <__vector_13>:
// ISR FUNCTION PROTOTYPE FOR USART, RX Complete

void __vector_13 (void) __attribute__ (( signal ));

void __vector_13(void)
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	P_IRQ_CallBack[0]();
    12da:	e0 91 8f 01 	lds	r30, 0x018F
    12de:	f0 91 90 01 	lds	r31, 0x0190
    12e2:	09 95       	icall
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <__vector_14>:
// ISR FUNCTION PROTOTYPE FOR USART, USART Data Register Empty

void __vector_14 (void) __attribute__ (( signal ));

void __vector_14(void)
{
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	2f 93       	push	r18
    1316:	3f 93       	push	r19
    1318:	4f 93       	push	r20
    131a:	5f 93       	push	r21
    131c:	6f 93       	push	r22
    131e:	7f 93       	push	r23
    1320:	8f 93       	push	r24
    1322:	9f 93       	push	r25
    1324:	af 93       	push	r26
    1326:	bf 93       	push	r27
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
	P_IRQ_CallBack[1]();
    1334:	e0 91 91 01 	lds	r30, 0x0191
    1338:	f0 91 92 01 	lds	r31, 0x0192
    133c:	09 95       	icall
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_15>:
// ISR FUNCTION PROTOTYPE FOR USART, TX Complete

void __vector_15 (void) __attribute__ (( signal ));

void __vector_15(void)
{
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	4f 93       	push	r20
    1374:	5f 93       	push	r21
    1376:	6f 93       	push	r22
    1378:	7f 93       	push	r23
    137a:	8f 93       	push	r24
    137c:	9f 93       	push	r25
    137e:	af 93       	push	r26
    1380:	bf 93       	push	r27
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	P_IRQ_CallBack[2]();
    138e:	e0 91 93 01 	lds	r30, 0x0193
    1392:	f0 91 94 01 	lds	r31, 0x0194
    1396:	09 95       	icall
}
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <DIO_SetPinDirection>:

                                 /*****            APIS            *****/

  /* PIN APIS */
void DIO_SetPinDirection (U8 PortId , U8 PinId , U8 PinDirection)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <DIO_SetPinDirection+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <DIO_SetPinDirection+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	6a 83       	std	Y+2, r22	; 0x02
    13d0:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) && ((PinDirection == DIO_PIN_OUTPUT) || (PinDirection == DIO_PIN_INPUT)))
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	08 f0       	brcs	.+2      	; 0x13da <DIO_SetPinDirection+0x1c>
    13d8:	dc c0       	rjmp	.+440    	; 0x1592 <DIO_SetPinDirection+0x1d4>
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	88 30       	cpi	r24, 0x08	; 8
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <DIO_SetPinDirection+0x24>
    13e0:	d8 c0       	rjmp	.+432    	; 0x1592 <DIO_SetPinDirection+0x1d4>
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	21 f0       	breq	.+8      	; 0x13f0 <DIO_SetPinDirection+0x32>
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	88 23       	and	r24, r24
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <DIO_SetPinDirection+0x32>
    13ee:	d1 c0       	rjmp	.+418    	; 0x1592 <DIO_SetPinDirection+0x1d4>
	{
		 switch(PortId)
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	3d 83       	std	Y+5, r19	; 0x05
    13f8:	2c 83       	std	Y+4, r18	; 0x04
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	91 05       	cpc	r25, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <DIO_SetPinDirection+0x48>
    1404:	43 c0       	rjmp	.+134    	; 0x148c <DIO_SetPinDirection+0xce>
    1406:	2c 81       	ldd	r18, Y+4	; 0x04
    1408:	3d 81       	ldd	r19, Y+5	; 0x05
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	2c f4       	brge	.+10     	; 0x141a <DIO_SetPinDirection+0x5c>
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	71 f0       	breq	.+28     	; 0x1434 <DIO_SetPinDirection+0x76>
    1418:	bc c0       	rjmp	.+376    	; 0x1592 <DIO_SetPinDirection+0x1d4>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	09 f4       	brne	.+2      	; 0x1426 <DIO_SetPinDirection+0x68>
    1424:	5f c0       	rjmp	.+190    	; 0x14e4 <DIO_SetPinDirection+0x126>
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <DIO_SetPinDirection+0x74>
    1430:	85 c0       	rjmp	.+266    	; 0x153c <DIO_SetPinDirection+0x17e>
    1432:	af c0       	rjmp	.+350    	; 0x1592 <DIO_SetPinDirection+0x1d4>
		 {

		 case 0 :
			 if(PinDirection == DIO_PIN_OUTPUT)
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	a1 f4       	brne	.+40     	; 0x1462 <DIO_SetPinDirection+0xa4>
			 {
			     SET_BIT(DDRA, PinId);
    143a:	aa e3       	ldi	r26, 0x3A	; 58
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ea e3       	ldi	r30, 0x3A	; 58
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_SetPinDirection+0x9a>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_SetPinDirection+0x96>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	98 c0       	rjmp	.+304    	; 0x1592 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRA , PinId);
    1462:	aa e3       	ldi	r26, 0x3A	; 58
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ea e3       	ldi	r30, 0x3A	; 58
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_SetPinDirection+0xc2>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_SetPinDirection+0xbe>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	83 c0       	rjmp	.+262    	; 0x1592 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 1 :
			 if(PinDirection == DIO_PIN_OUTPUT)
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	a1 f4       	brne	.+40     	; 0x14ba <DIO_SetPinDirection+0xfc>
			 {
			     SET_BIT(DDRB, PinId);
    1492:	a7 e3       	ldi	r26, 0x37	; 55
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e7 e3       	ldi	r30, 0x37	; 55
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_SetPinDirection+0xf2>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_SetPinDirection+0xee>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	6c c0       	rjmp	.+216    	; 0x1592 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRB , PinId);
    14ba:	a7 e3       	ldi	r26, 0x37	; 55
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e7 e3       	ldi	r30, 0x37	; 55
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_SetPinDirection+0x11a>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_SetPinDirection+0x116>
    14dc:	80 95       	com	r24
    14de:	84 23       	and	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	57 c0       	rjmp	.+174    	; 0x1592 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 2 :
			 if(PinDirection == DIO_PIN_OUTPUT)
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	a1 f4       	brne	.+40     	; 0x1512 <DIO_SetPinDirection+0x154>
			 {
			     SET_BIT(DDRC, PinId);
    14ea:	a4 e3       	ldi	r26, 0x34	; 52
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e4 e3       	ldi	r30, 0x34	; 52
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_SetPinDirection+0x14a>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_SetPinDirection+0x146>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	40 c0       	rjmp	.+128    	; 0x1592 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRC , PinId);
    1512:	a4 e3       	ldi	r26, 0x34	; 52
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e4 e3       	ldi	r30, 0x34	; 52
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_SetPinDirection+0x172>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_SetPinDirection+0x16e>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	2b c0       	rjmp	.+86     	; 0x1592 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 3 :
			 if(PinDirection == DIO_PIN_OUTPUT)
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	a1 f4       	brne	.+40     	; 0x156a <DIO_SetPinDirection+0x1ac>
			 {
			     SET_BIT(DDRD, PinId);
    1542:	a1 e3       	ldi	r26, 0x31	; 49
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e1 e3       	ldi	r30, 0x31	; 49
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_SetPinDirection+0x1a2>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_SetPinDirection+0x19e>
    1564:	84 2b       	or	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	14 c0       	rjmp	.+40     	; 0x1592 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRD , PinId);
    156a:	a1 e3       	ldi	r26, 0x31	; 49
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e1 e3       	ldi	r30, 0x31	; 49
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_SetPinDirection+0x1ca>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_SetPinDirection+0x1c6>
    158c:	80 95       	com	r24
    158e:	84 23       	and	r24, r20
    1590:	8c 93       	st	X, r24
			 }
			 break;
		 }
	}

}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <DIO_SetPinValue>:
void DIO_SetPinValue     (U8 PortId , U8 PinId , U8 PinValue)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_SetPinValue+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <DIO_SetPinValue+0x8>
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	6a 83       	std	Y+2, r22	; 0x02
    15b4:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) && ((PinValue == 1) || (PinValue == 0)))
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	08 f0       	brcs	.+2      	; 0x15be <DIO_SetPinValue+0x1c>
    15bc:	dc c0       	rjmp	.+440    	; 0x1776 <DIO_SetPinValue+0x1d4>
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <DIO_SetPinValue+0x24>
    15c4:	d8 c0       	rjmp	.+432    	; 0x1776 <DIO_SetPinValue+0x1d4>
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	21 f0       	breq	.+8      	; 0x15d4 <DIO_SetPinValue+0x32>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	88 23       	and	r24, r24
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <DIO_SetPinValue+0x32>
    15d2:	d1 c0       	rjmp	.+418    	; 0x1776 <DIO_SetPinValue+0x1d4>
		{
			 switch(PortId)
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3d 83       	std	Y+5, r19	; 0x05
    15dc:	2c 83       	std	Y+4, r18	; 0x04
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	91 05       	cpc	r25, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <DIO_SetPinValue+0x48>
    15e8:	43 c0       	rjmp	.+134    	; 0x1670 <DIO_SetPinValue+0xce>
    15ea:	2c 81       	ldd	r18, Y+4	; 0x04
    15ec:	3d 81       	ldd	r19, Y+5	; 0x05
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	2c f4       	brge	.+10     	; 0x15fe <DIO_SetPinValue+0x5c>
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	71 f0       	breq	.+28     	; 0x1618 <DIO_SetPinValue+0x76>
    15fc:	bc c0       	rjmp	.+376    	; 0x1776 <DIO_SetPinValue+0x1d4>
    15fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1600:	3d 81       	ldd	r19, Y+5	; 0x05
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	09 f4       	brne	.+2      	; 0x160a <DIO_SetPinValue+0x68>
    1608:	5f c0       	rjmp	.+190    	; 0x16c8 <DIO_SetPinValue+0x126>
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	9d 81       	ldd	r25, Y+5	; 0x05
    160e:	83 30       	cpi	r24, 0x03	; 3
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <DIO_SetPinValue+0x74>
    1614:	85 c0       	rjmp	.+266    	; 0x1720 <DIO_SetPinValue+0x17e>
    1616:	af c0       	rjmp	.+350    	; 0x1776 <DIO_SetPinValue+0x1d4>
			 {

			 case 0 :
				 if(PinValue == DIO_PIN_HIGH)
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	a1 f4       	brne	.+40     	; 0x1646 <DIO_SetPinValue+0xa4>
				 {
				     SET_BIT(PORTA, PinId);
    161e:	ab e3       	ldi	r26, 0x3B	; 59
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	eb e3       	ldi	r30, 0x3B	; 59
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_SetPinValue+0x9a>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_SetPinValue+0x96>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	98 c0       	rjmp	.+304    	; 0x1776 <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(DDRA , PinId);
    1646:	aa e3       	ldi	r26, 0x3A	; 58
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ea e3       	ldi	r30, 0x3A	; 58
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_SetPinValue+0xc2>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_SetPinValue+0xbe>
    1668:	80 95       	com	r24
    166a:	84 23       	and	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	83 c0       	rjmp	.+262    	; 0x1776 <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 1 :
				 if(PinValue == DIO_PIN_HIGH)
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	a1 f4       	brne	.+40     	; 0x169e <DIO_SetPinValue+0xfc>
				 {
				     SET_BIT(PORTB, PinId);
    1676:	a8 e3       	ldi	r26, 0x38	; 56
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e8 e3       	ldi	r30, 0x38	; 56
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_SetPinValue+0xf2>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_SetPinValue+0xee>
    1698:	84 2b       	or	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	6c c0       	rjmp	.+216    	; 0x1776 <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTB , PinId);
    169e:	a8 e3       	ldi	r26, 0x38	; 56
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e8 e3       	ldi	r30, 0x38	; 56
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_SetPinValue+0x11a>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_SetPinValue+0x116>
    16c0:	80 95       	com	r24
    16c2:	84 23       	and	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	57 c0       	rjmp	.+174    	; 0x1776 <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 2 :
				 if(PinValue == DIO_PIN_HIGH)
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	a1 f4       	brne	.+40     	; 0x16f6 <DIO_SetPinValue+0x154>
				 {
				     SET_BIT(PORTC, PinId);
    16ce:	a5 e3       	ldi	r26, 0x35	; 53
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e5 e3       	ldi	r30, 0x35	; 53
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_SetPinValue+0x14a>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_SetPinValue+0x146>
    16f0:	84 2b       	or	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	40 c0       	rjmp	.+128    	; 0x1776 <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTC , PinId);
    16f6:	a5 e3       	ldi	r26, 0x35	; 53
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e3       	ldi	r30, 0x35	; 53
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_SetPinValue+0x172>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_SetPinValue+0x16e>
    1718:	80 95       	com	r24
    171a:	84 23       	and	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	2b c0       	rjmp	.+86     	; 0x1776 <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 3 :
				 if(PinValue == DIO_PIN_HIGH)
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	a1 f4       	brne	.+40     	; 0x174e <DIO_SetPinValue+0x1ac>
				 {
				     SET_BIT(PORTD, PinId);
    1726:	a2 e3       	ldi	r26, 0x32	; 50
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e2 e3       	ldi	r30, 0x32	; 50
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_SetPinValue+0x1a2>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_SetPinValue+0x19e>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTD , PinId);
    174e:	a2 e3       	ldi	r26, 0x32	; 50
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e2 e3       	ldi	r30, 0x32	; 50
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_SetPinValue+0x1ca>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_SetPinValue+0x1c6>
    1770:	80 95       	com	r24
    1772:	84 23       	and	r24, r20
    1774:	8c 93       	st	X, r24
				 }
				 break;
			 }
		}

}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <DIO_GetPinValue>:
void DIO_GetPinValue     (U8 PortId , U8 PinId , U8* PinValue)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <DIO_GetPinValue+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <DIO_GetPinValue+0x8>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <DIO_GetPinValue+0xa>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	6a 83       	std	Y+2, r22	; 0x02
    1798:	5c 83       	std	Y+4, r21	; 0x04
    179a:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) )
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	84 30       	cpi	r24, 0x04	; 4
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <DIO_GetPinValue+0x1e>
    17a2:	95 c0       	rjmp	.+298    	; 0x18ce <DIO_GetPinValue+0x148>
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	88 30       	cpi	r24, 0x08	; 8
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <DIO_GetPinValue+0x26>
    17aa:	91 c0       	rjmp	.+290    	; 0x18ce <DIO_GetPinValue+0x148>
		{
			 switch(PortId)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3e 83       	std	Y+6, r19	; 0x06
    17b4:	2d 83       	std	Y+5, r18	; 0x05
    17b6:	4d 81       	ldd	r20, Y+5	; 0x05
    17b8:	5e 81       	ldd	r21, Y+6	; 0x06
    17ba:	41 30       	cpi	r20, 0x01	; 1
    17bc:	51 05       	cpc	r21, r1
    17be:	a1 f1       	breq	.+104    	; 0x1828 <DIO_GetPinValue+0xa2>
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	91 05       	cpc	r25, r1
    17c8:	34 f4       	brge	.+12     	; 0x17d6 <DIO_GetPinValue+0x50>
    17ca:	2d 81       	ldd	r18, Y+5	; 0x05
    17cc:	3e 81       	ldd	r19, Y+6	; 0x06
    17ce:	21 15       	cp	r18, r1
    17d0:	31 05       	cpc	r19, r1
    17d2:	71 f0       	breq	.+28     	; 0x17f0 <DIO_GetPinValue+0x6a>
    17d4:	7c c0       	rjmp	.+248    	; 0x18ce <DIO_GetPinValue+0x148>
    17d6:	4d 81       	ldd	r20, Y+5	; 0x05
    17d8:	5e 81       	ldd	r21, Y+6	; 0x06
    17da:	42 30       	cpi	r20, 0x02	; 2
    17dc:	51 05       	cpc	r21, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <DIO_GetPinValue+0x5c>
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <DIO_GetPinValue+0xda>
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <DIO_GetPinValue+0x68>
    17ec:	55 c0       	rjmp	.+170    	; 0x1898 <DIO_GetPinValue+0x112>
    17ee:	6f c0       	rjmp	.+222    	; 0x18ce <DIO_GetPinValue+0x148>
			 {

			 case 0 :
				 if(GET_BIT(PINA , PinId) == DIO_PIN_HIGH)
    17f0:	e9 e3       	ldi	r30, 0x39	; 57
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a9 01       	movw	r20, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_GetPinValue+0x82>
    1804:	55 95       	asr	r21
    1806:	47 95       	ror	r20
    1808:	8a 95       	dec	r24
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_GetPinValue+0x7e>
    180c:	ca 01       	movw	r24, r20
    180e:	81 70       	andi	r24, 0x01	; 1
    1810:	90 70       	andi	r25, 0x00	; 0
    1812:	88 23       	and	r24, r24
    1814:	29 f0       	breq	.+10     	; 0x1820 <DIO_GetPinValue+0x9a>
				 {
				     *PinValue = DIO_PIN_HIGH;
    1816:	eb 81       	ldd	r30, Y+3	; 0x03
    1818:	fc 81       	ldd	r31, Y+4	; 0x04
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	80 83       	st	Z, r24
    181e:	57 c0       	rjmp	.+174    	; 0x18ce <DIO_GetPinValue+0x148>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
    1820:	eb 81       	ldd	r30, Y+3	; 0x03
    1822:	fc 81       	ldd	r31, Y+4	; 0x04
    1824:	10 82       	st	Z, r1
    1826:	53 c0       	rjmp	.+166    	; 0x18ce <DIO_GetPinValue+0x148>
				 }
				 break;
			 case 1 :
				 if(GET_BIT(PINB , PinId) == DIO_PIN_HIGH)
    1828:	e6 e3       	ldi	r30, 0x36	; 54
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a9 01       	movw	r20, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_GetPinValue+0xba>
    183c:	55 95       	asr	r21
    183e:	47 95       	ror	r20
    1840:	8a 95       	dec	r24
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_GetPinValue+0xb6>
    1844:	ca 01       	movw	r24, r20
    1846:	81 70       	andi	r24, 0x01	; 1
    1848:	90 70       	andi	r25, 0x00	; 0
    184a:	88 23       	and	r24, r24
    184c:	29 f0       	breq	.+10     	; 0x1858 <DIO_GetPinValue+0xd2>
				 {
				     *PinValue = DIO_PIN_HIGH;
    184e:	eb 81       	ldd	r30, Y+3	; 0x03
    1850:	fc 81       	ldd	r31, Y+4	; 0x04
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	80 83       	st	Z, r24
    1856:	3b c0       	rjmp	.+118    	; 0x18ce <DIO_GetPinValue+0x148>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
    1858:	eb 81       	ldd	r30, Y+3	; 0x03
    185a:	fc 81       	ldd	r31, Y+4	; 0x04
    185c:	10 82       	st	Z, r1
    185e:	37 c0       	rjmp	.+110    	; 0x18ce <DIO_GetPinValue+0x148>
				 }
				 break;
			 case 2 :
				 if(GET_BIT(PINC , PinId) == DIO_PIN_HIGH)
    1860:	e3 e3       	ldi	r30, 0x33	; 51
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a9 01       	movw	r20, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <DIO_GetPinValue+0xf2>
    1874:	55 95       	asr	r21
    1876:	47 95       	ror	r20
    1878:	8a 95       	dec	r24
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <DIO_GetPinValue+0xee>
    187c:	ca 01       	movw	r24, r20
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	90 70       	andi	r25, 0x00	; 0
    1882:	88 23       	and	r24, r24
    1884:	29 f0       	breq	.+10     	; 0x1890 <DIO_GetPinValue+0x10a>
				 {
				     *PinValue = DIO_PIN_HIGH;
    1886:	eb 81       	ldd	r30, Y+3	; 0x03
    1888:	fc 81       	ldd	r31, Y+4	; 0x04
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	80 83       	st	Z, r24
    188e:	1f c0       	rjmp	.+62     	; 0x18ce <DIO_GetPinValue+0x148>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
    1890:	eb 81       	ldd	r30, Y+3	; 0x03
    1892:	fc 81       	ldd	r31, Y+4	; 0x04
    1894:	10 82       	st	Z, r1
    1896:	1b c0       	rjmp	.+54     	; 0x18ce <DIO_GetPinValue+0x148>
				 }
				 break;
			 case 3 :
				 if(GET_BIT(PIND , PinId) == DIO_PIN_HIGH)
    1898:	e0 e3       	ldi	r30, 0x30	; 48
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_GetPinValue+0x12a>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_GetPinValue+0x126>
    18b4:	ca 01       	movw	r24, r20
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	90 70       	andi	r25, 0x00	; 0
    18ba:	88 23       	and	r24, r24
    18bc:	29 f0       	breq	.+10     	; 0x18c8 <DIO_GetPinValue+0x142>
				 {
				     *PinValue = DIO_PIN_HIGH;
    18be:	eb 81       	ldd	r30, Y+3	; 0x03
    18c0:	fc 81       	ldd	r31, Y+4	; 0x04
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	80 83       	st	Z, r24
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <DIO_GetPinValue+0x148>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
    18c8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ca:	fc 81       	ldd	r31, Y+4	; 0x04
    18cc:	10 82       	st	Z, r1
				 }
				 break;
			 }
		}

}
    18ce:	26 96       	adiw	r28, 0x06	; 6
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <DIO_TogglePinValue>:
void DIO_TogglePinValue  (U8 PortId , U8 PinId)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <DIO_TogglePinValue+0x6>
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <DIO_TogglePinValue+0x8>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && (PinId <= 7) )
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <DIO_TogglePinValue+0x18>
    18f6:	72 c0       	rjmp	.+228    	; 0x19dc <DIO_TogglePinValue+0xfc>
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	88 30       	cpi	r24, 0x08	; 8
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <DIO_TogglePinValue+0x20>
    18fe:	6e c0       	rjmp	.+220    	; 0x19dc <DIO_TogglePinValue+0xfc>
		{
			 switch(PortId)
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	3c 83       	std	Y+4, r19	; 0x04
    1908:	2b 83       	std	Y+3, r18	; 0x03
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	91 05       	cpc	r25, r1
    1912:	49 f1       	breq	.+82     	; 0x1966 <DIO_TogglePinValue+0x86>
    1914:	2b 81       	ldd	r18, Y+3	; 0x03
    1916:	3c 81       	ldd	r19, Y+4	; 0x04
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	31 05       	cpc	r19, r1
    191c:	2c f4       	brge	.+10     	; 0x1928 <DIO_TogglePinValue+0x48>
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	61 f0       	breq	.+24     	; 0x193e <DIO_TogglePinValue+0x5e>
    1926:	5a c0       	rjmp	.+180    	; 0x19dc <DIO_TogglePinValue+0xfc>
    1928:	2b 81       	ldd	r18, Y+3	; 0x03
    192a:	3c 81       	ldd	r19, Y+4	; 0x04
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	71 f1       	breq	.+92     	; 0x198e <DIO_TogglePinValue+0xae>
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	91 05       	cpc	r25, r1
    193a:	e9 f1       	breq	.+122    	; 0x19b6 <DIO_TogglePinValue+0xd6>
    193c:	4f c0       	rjmp	.+158    	; 0x19dc <DIO_TogglePinValue+0xfc>
			 {

			 case 0 :
				 TOG_BIT(PORTA , PinId);
    193e:	ab e3       	ldi	r26, 0x3B	; 59
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	eb e3       	ldi	r30, 0x3B	; 59
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_TogglePinValue+0x7c>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_TogglePinValue+0x78>
    1960:	84 27       	eor	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	3b c0       	rjmp	.+118    	; 0x19dc <DIO_TogglePinValue+0xfc>
				 break;
			 case 1 :
				 TOG_BIT(PORTB , PinId);
    1966:	a8 e3       	ldi	r26, 0x38	; 56
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e3       	ldi	r30, 0x38	; 56
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_TogglePinValue+0xa4>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_TogglePinValue+0xa0>
    1988:	84 27       	eor	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	27 c0       	rjmp	.+78     	; 0x19dc <DIO_TogglePinValue+0xfc>
				 break;
			 case 2 :
				 TOG_BIT(PORTC , PinId);
    198e:	a5 e3       	ldi	r26, 0x35	; 53
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e5 e3       	ldi	r30, 0x35	; 53
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <DIO_TogglePinValue+0xcc>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <DIO_TogglePinValue+0xc8>
    19b0:	84 27       	eor	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	13 c0       	rjmp	.+38     	; 0x19dc <DIO_TogglePinValue+0xfc>
				 break;
			 case 3 :
				 TOG_BIT(PORTD , PinId);
    19b6:	a2 e3       	ldi	r26, 0x32	; 50
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e2 e3       	ldi	r30, 0x32	; 50
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 2e       	mov	r0, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <DIO_TogglePinValue+0xf4>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <DIO_TogglePinValue+0xf0>
    19d8:	84 27       	eor	r24, r20
    19da:	8c 93       	st	X, r24
			 }
		}



}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <DIO_SetInputPinResistance>:
void DIO_SetInputPinResistance(U8 PortId , U8 PinId)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <DIO_SetInputPinResistance+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <DIO_SetInputPinResistance+0x8>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && (PinId <= 7) )
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <DIO_SetInputPinResistance+0x18>
    1a00:	72 c0       	rjmp	.+228    	; 0x1ae6 <DIO_SetInputPinResistance+0xfc>
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	88 30       	cpi	r24, 0x08	; 8
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <DIO_SetInputPinResistance+0x20>
    1a08:	6e c0       	rjmp	.+220    	; 0x1ae6 <DIO_SetInputPinResistance+0xfc>
			{
				 switch(PortId)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3c 83       	std	Y+4, r19	; 0x04
    1a12:	2b 83       	std	Y+3, r18	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	49 f1       	breq	.+82     	; 0x1a70 <DIO_SetInputPinResistance+0x86>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <DIO_SetInputPinResistance+0x48>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	61 f0       	breq	.+24     	; 0x1a48 <DIO_SetInputPinResistance+0x5e>
    1a30:	5a c0       	rjmp	.+180    	; 0x1ae6 <DIO_SetInputPinResistance+0xfc>
    1a32:	2b 81       	ldd	r18, Y+3	; 0x03
    1a34:	3c 81       	ldd	r19, Y+4	; 0x04
    1a36:	22 30       	cpi	r18, 0x02	; 2
    1a38:	31 05       	cpc	r19, r1
    1a3a:	71 f1       	breq	.+92     	; 0x1a98 <DIO_SetInputPinResistance+0xae>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	91 05       	cpc	r25, r1
    1a44:	e9 f1       	breq	.+122    	; 0x1ac0 <DIO_SetInputPinResistance+0xd6>
    1a46:	4f c0       	rjmp	.+158    	; 0x1ae6 <DIO_SetInputPinResistance+0xfc>
				 {

				 case 0 :
					 SET_BIT(PORTA , PinId);
    1a48:	ab e3       	ldi	r26, 0x3B	; 59
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	eb e3       	ldi	r30, 0x3B	; 59
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_SetInputPinResistance+0x7c>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_SetInputPinResistance+0x78>
    1a6a:	84 2b       	or	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	3b c0       	rjmp	.+118    	; 0x1ae6 <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 1 :
					 SET_BIT(PORTB , PinId);
    1a70:	a8 e3       	ldi	r26, 0x38	; 56
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e8 e3       	ldi	r30, 0x38	; 56
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_SetInputPinResistance+0xa4>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_SetInputPinResistance+0xa0>
    1a92:	84 2b       	or	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	27 c0       	rjmp	.+78     	; 0x1ae6 <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 2 :
					 SET_BIT(PORTC , PinId);
    1a98:	a5 e3       	ldi	r26, 0x35	; 53
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e5 e3       	ldi	r30, 0x35	; 53
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_SetInputPinResistance+0xcc>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_SetInputPinResistance+0xc8>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	13 c0       	rjmp	.+38     	; 0x1ae6 <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 3 :
					 SET_BIT(PORTD , PinId);
    1ac0:	a2 e3       	ldi	r26, 0x32	; 50
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e2 e3       	ldi	r30, 0x32	; 50
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_SetInputPinResistance+0xf4>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_SetInputPinResistance+0xf0>
    1ae2:	84 2b       	or	r24, r20
    1ae4:	8c 93       	st	X, r24
					 break;
				 }
			}
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <DIO_SetPortDirection>:
  /* PORT APIS */

void DIO_SetPortDirection (U8 PortId ,  U8 PortDirection)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <DIO_SetPortDirection+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <DIO_SetPortDirection+0x8>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && ((PortDirection == DIO_Port_OUTPUT)|| (PortDirection == DIO_Port_INPUT)))
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	84 30       	cpi	r24, 0x04	; 4
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <DIO_SetPortDirection+0x18>
    1b0a:	55 c0       	rjmp	.+170    	; 0x1bb6 <DIO_SetPortDirection+0xc2>
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b10:	21 f0       	breq	.+8      	; 0x1b1a <DIO_SetPortDirection+0x26>
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	88 23       	and	r24, r24
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <DIO_SetPortDirection+0x26>
    1b18:	4e c0       	rjmp	.+156    	; 0x1bb6 <DIO_SetPortDirection+0xc2>
	{
		switch(PortId)
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3c 83       	std	Y+4, r19	; 0x04
    1b22:	2b 83       	std	Y+3, r18	; 0x03
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	09 f1       	breq	.+66     	; 0x1b70 <DIO_SetPortDirection+0x7c>
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <DIO_SetPortDirection+0x4e>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <DIO_SetPortDirection+0x64>
    1b40:	3a c0       	rjmp	.+116    	; 0x1bb6 <DIO_SetPortDirection+0xc2>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	f1 f0       	breq	.+60     	; 0x1b88 <DIO_SetPortDirection+0x94>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	29 f1       	breq	.+74     	; 0x1ba0 <DIO_SetPortDirection+0xac>
    1b56:	2f c0       	rjmp	.+94     	; 0x1bb6 <DIO_SetPortDirection+0xc2>
	 {
		case 0 :
			if (PortDirection == DIO_Port_OUTPUT)
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <DIO_SetPortDirection+0x74>
			{
				DDRA = 0xff ;
    1b5e:	ea e3       	ldi	r30, 0x3A	; 58
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	80 83       	st	Z, r24
    1b66:	27 c0       	rjmp	.+78     	; 0x1bb6 <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRA = 0x00 ;
    1b68:	ea e3       	ldi	r30, 0x3A	; 58
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	10 82       	st	Z, r1
    1b6e:	23 c0       	rjmp	.+70     	; 0x1bb6 <DIO_SetPortDirection+0xc2>
			}

			break;
		case 1 :
			if (PortDirection == DIO_Port_OUTPUT)
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	8f 3f       	cpi	r24, 0xFF	; 255
    1b74:	29 f4       	brne	.+10     	; 0x1b80 <DIO_SetPortDirection+0x8c>
			{
				DDRB = 0xff ;
    1b76:	e7 e3       	ldi	r30, 0x37	; 55
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	8f ef       	ldi	r24, 0xFF	; 255
    1b7c:	80 83       	st	Z, r24
    1b7e:	1b c0       	rjmp	.+54     	; 0x1bb6 <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRB = 0x00 ;
    1b80:	e7 e3       	ldi	r30, 0x37	; 55
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	10 82       	st	Z, r1
    1b86:	17 c0       	rjmp	.+46     	; 0x1bb6 <DIO_SetPortDirection+0xc2>
			}

			break;
		case 2 :
			if (PortDirection == DIO_Port_OUTPUT)
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8c:	29 f4       	brne	.+10     	; 0x1b98 <DIO_SetPortDirection+0xa4>
			{
				DDRC = 0xff ;
    1b8e:	e4 e3       	ldi	r30, 0x34	; 52
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	80 83       	st	Z, r24
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRC = 0x00 ;
    1b98:	e4 e3       	ldi	r30, 0x34	; 52
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	10 82       	st	Z, r1
    1b9e:	0b c0       	rjmp	.+22     	; 0x1bb6 <DIO_SetPortDirection+0xc2>
			}

			break;
		case 3 :
			if (PortDirection == DIO_Port_OUTPUT)
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <DIO_SetPortDirection+0xbc>
			{
				DDRD = 0xff ;
    1ba6:	e1 e3       	ldi	r30, 0x31	; 49
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8f ef       	ldi	r24, 0xFF	; 255
    1bac:	80 83       	st	Z, r24
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRD = 0x00 ;
    1bb0:	e1 e3       	ldi	r30, 0x31	; 49
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	10 82       	st	Z, r1
			}

			break;
	 }
	}
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <DIO_SetPortValue>:
void DIO_SetPortValue     (U8 PortId ,  U8 PortValue)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <DIO_SetPortValue+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <DIO_SetPortValue+0x8>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3))
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	84 30       	cpi	r24, 0x04	; 4
    1bd8:	90 f5       	brcc	.+100    	; 0x1c3e <DIO_SetPortValue+0x7a>
		{
			switch(PortId)
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	3c 83       	std	Y+4, r19	; 0x04
    1be2:	2b 83       	std	Y+3, r18	; 0x03
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	91 05       	cpc	r25, r1
    1bec:	d1 f0       	breq	.+52     	; 0x1c22 <DIO_SetPortValue+0x5e>
    1bee:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <DIO_SetPortValue+0x3e>
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	61 f0       	breq	.+24     	; 0x1c18 <DIO_SetPortValue+0x54>
    1c00:	1e c0       	rjmp	.+60     	; 0x1c3e <DIO_SetPortValue+0x7a>
    1c02:	2b 81       	ldd	r18, Y+3	; 0x03
    1c04:	3c 81       	ldd	r19, Y+4	; 0x04
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	81 f0       	breq	.+32     	; 0x1c2c <DIO_SetPortValue+0x68>
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	83 30       	cpi	r24, 0x03	; 3
    1c12:	91 05       	cpc	r25, r1
    1c14:	81 f0       	breq	.+32     	; 0x1c36 <DIO_SetPortValue+0x72>
    1c16:	13 c0       	rjmp	.+38     	; 0x1c3e <DIO_SetPortValue+0x7a>
		 {
			case 0 :
				PORTA = PortValue ;
    1c18:	eb e3       	ldi	r30, 0x3B	; 59
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	80 83       	st	Z, r24
    1c20:	0e c0       	rjmp	.+28     	; 0x1c3e <DIO_SetPortValue+0x7a>
				break;
			case 1 :
				PORTB = PortValue ;
    1c22:	e8 e3       	ldi	r30, 0x38	; 56
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	80 83       	st	Z, r24
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <DIO_SetPortValue+0x7a>
				break;
			case 2 :
				PORTC = PortValue ;
    1c2c:	e5 e3       	ldi	r30, 0x35	; 53
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	80 83       	st	Z, r24
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <DIO_SetPortValue+0x7a>
				break;
			case 3 :
				PORTB = PortValue ;
    1c36:	e8 e3       	ldi	r30, 0x38	; 56
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	80 83       	st	Z, r24
				break;
		 }
		}
}
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <DIO_GetPortValue>:
void DIO_GetPortValue     (U8 PortId , U8* PortValue)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DIO_GetPortValue+0x6>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <DIO_GetPortValue+0x8>
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	7b 83       	std	Y+3, r23	; 0x03
    1c5e:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) )
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	84 30       	cpi	r24, 0x04	; 4
    1c64:	d0 f5       	brcc	.+116    	; 0x1cda <DIO_GetPortValue+0x8e>
			{
				switch(PortId)
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3d 83       	std	Y+5, r19	; 0x05
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	e1 f0       	breq	.+56     	; 0x1cb2 <DIO_GetPortValue+0x66>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <DIO_GetPortValue+0x42>
    1c84:	8c 81       	ldd	r24, Y+4	; 0x04
    1c86:	9d 81       	ldd	r25, Y+5	; 0x05
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <DIO_GetPortValue+0x58>
    1c8c:	26 c0       	rjmp	.+76     	; 0x1cda <DIO_GetPortValue+0x8e>
    1c8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c90:	3d 81       	ldd	r19, Y+5	; 0x05
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	a1 f0       	breq	.+40     	; 0x1cc0 <DIO_GetPortValue+0x74>
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	b1 f0       	breq	.+44     	; 0x1cce <DIO_GetPortValue+0x82>
    1ca2:	1b c0       	rjmp	.+54     	; 0x1cda <DIO_GetPortValue+0x8e>
			 {
				case 0 :
					*PortValue = PINA ;
    1ca4:	e9 e3       	ldi	r30, 0x39	; 57
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	ea 81       	ldd	r30, Y+2	; 0x02
    1cac:	fb 81       	ldd	r31, Y+3	; 0x03
    1cae:	80 83       	st	Z, r24
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <DIO_GetPortValue+0x8e>
					break;
				case 1 :
					*PortValue = PINB ;
    1cb2:	e6 e3       	ldi	r30, 0x36	; 54
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1cba:	fb 81       	ldd	r31, Y+3	; 0x03
    1cbc:	80 83       	st	Z, r24
    1cbe:	0d c0       	rjmp	.+26     	; 0x1cda <DIO_GetPortValue+0x8e>
					break;
				case 2 :
					*PortValue = PINC ;
    1cc0:	e3 e3       	ldi	r30, 0x33	; 51
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cca:	80 83       	st	Z, r24
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <DIO_GetPortValue+0x8e>
					break;
				case 3 :
					*PortValue = PIND ;
    1cce:	e0 e3       	ldi	r30, 0x30	; 48
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd8:	80 83       	st	Z, r24
					break;
			 }
			}
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <DIO_TogglePortValue>:
void DIO_TogglePortValue  (U8 PortId )
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <DIO_TogglePortValue+0x6>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	if ((PortId <= 3) )
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	08 f0       	brcs	.+2      	; 0x1d00 <DIO_TogglePortValue+0x16>
    1cfe:	3e c0       	rjmp	.+124    	; 0x1d7c <DIO_TogglePortValue+0x92>
				{
					switch(PortId)
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	3b 83       	std	Y+3, r19	; 0x03
    1d08:	2a 83       	std	Y+2, r18	; 0x02
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	91 05       	cpc	r25, r1
    1d12:	e9 f0       	breq	.+58     	; 0x1d4e <DIO_TogglePortValue+0x64>
    1d14:	2a 81       	ldd	r18, Y+2	; 0x02
    1d16:	3b 81       	ldd	r19, Y+3	; 0x03
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <DIO_TogglePortValue+0x3e>
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	9b 81       	ldd	r25, Y+3	; 0x03
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	61 f0       	breq	.+24     	; 0x1d3e <DIO_TogglePortValue+0x54>
    1d26:	2a c0       	rjmp	.+84     	; 0x1d7c <DIO_TogglePortValue+0x92>
    1d28:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	b1 f0       	breq	.+44     	; 0x1d5e <DIO_TogglePortValue+0x74>
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	9b 81       	ldd	r25, Y+3	; 0x03
    1d36:	83 30       	cpi	r24, 0x03	; 3
    1d38:	91 05       	cpc	r25, r1
    1d3a:	c9 f0       	breq	.+50     	; 0x1d6e <DIO_TogglePortValue+0x84>
    1d3c:	1f c0       	rjmp	.+62     	; 0x1d7c <DIO_TogglePortValue+0x92>
				 {
					case 0 :
						PORTA = ~PORTA ;
    1d3e:	ab e3       	ldi	r26, 0x3B	; 59
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	eb e3       	ldi	r30, 0x3B	; 59
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	80 95       	com	r24
    1d4a:	8c 93       	st	X, r24
    1d4c:	17 c0       	rjmp	.+46     	; 0x1d7c <DIO_TogglePortValue+0x92>
						break;
					case 1 :
						PORTB = ~PORTB ;
    1d4e:	a8 e3       	ldi	r26, 0x38	; 56
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e8 e3       	ldi	r30, 0x38	; 56
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	80 95       	com	r24
    1d5a:	8c 93       	st	X, r24
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <DIO_TogglePortValue+0x92>
						break;
					case 2 :
						PORTC = ~PORTC ;
    1d5e:	a5 e3       	ldi	r26, 0x35	; 53
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 e3       	ldi	r30, 0x35	; 53
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 95       	com	r24
    1d6a:	8c 93       	st	X, r24
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <DIO_TogglePortValue+0x92>
						break;
					case 3 :
						PORTD = ~PORTD ;
    1d6e:	a2 e3       	ldi	r26, 0x32	; 50
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e2 e3       	ldi	r30, 0x32	; 50
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 95       	com	r24
    1d7a:	8c 93       	st	X, r24
						break;
				 }
				}
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <DIO_SetInputPortResistance>:
void DIO_SetInputPortResistance(U8 PortId )
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <DIO_SetInputPortResistance+0x6>
    1d8e:	0f 92       	push	r0
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	89 83       	std	Y+1, r24	; 0x01
	if ((PortId <= 3) )
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	84 30       	cpi	r24, 0x04	; 4
    1d9a:	90 f5       	brcc	.+100    	; 0x1e00 <DIO_SetInputPortResistance+0x78>
				{
					switch(PortId)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3b 83       	std	Y+3, r19	; 0x03
    1da4:	2a 83       	std	Y+2, r18	; 0x02
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	9b 81       	ldd	r25, Y+3	; 0x03
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	d1 f0       	breq	.+52     	; 0x1de4 <DIO_SetInputPortResistance+0x5c>
    1db0:	2a 81       	ldd	r18, Y+2	; 0x02
    1db2:	3b 81       	ldd	r19, Y+3	; 0x03
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <DIO_SetInputPortResistance+0x3c>
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	61 f0       	breq	.+24     	; 0x1dda <DIO_SetInputPortResistance+0x52>
    1dc2:	1e c0       	rjmp	.+60     	; 0x1e00 <DIO_SetInputPortResistance+0x78>
    1dc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc6:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	81 f0       	breq	.+32     	; 0x1dee <DIO_SetInputPortResistance+0x66>
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	83 30       	cpi	r24, 0x03	; 3
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	81 f0       	breq	.+32     	; 0x1df8 <DIO_SetInputPortResistance+0x70>
    1dd8:	13 c0       	rjmp	.+38     	; 0x1e00 <DIO_SetInputPortResistance+0x78>
				 {
					case 0 :
						PORTA = 0xff ;
    1dda:	eb e3       	ldi	r30, 0x3B	; 59
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	80 83       	st	Z, r24
    1de2:	0e c0       	rjmp	.+28     	; 0x1e00 <DIO_SetInputPortResistance+0x78>
						break;
					case 1 :
						PORTB = 0xff ;
    1de4:	e8 e3       	ldi	r30, 0x38	; 56
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	80 83       	st	Z, r24
    1dec:	09 c0       	rjmp	.+18     	; 0x1e00 <DIO_SetInputPortResistance+0x78>
						break;
					case 2 :
						PORTC = 0xff ;
    1dee:	e5 e3       	ldi	r30, 0x35	; 53
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	80 83       	st	Z, r24
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <DIO_SetInputPortResistance+0x78>
						break;
					case 3 :
						PORTD = 0xff ;
    1df8:	e2 e3       	ldi	r30, 0x32	; 50
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8f ef       	ldi	r24, 0xFF	; 255
    1dfe:	80 83       	st	Z, r24
						break;
				 }
				}
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <LCD_EN_Pluse>:



/* LCD APIS */
void LCD_EN_Pluse(void)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	2e 97       	sbiw	r28, 0x0e	; 14
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
	LCD_EN_PORT &= ~(1<<LCD_EN_PIN);
    1e20:	a8 e3       	ldi	r26, 0x38	; 56
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e8 e3       	ldi	r30, 0x38	; 56
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	87 7f       	andi	r24, 0xF7	; 247
    1e2c:	8c 93       	st	X, r24
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a8 e4       	ldi	r26, 0x48	; 72
    1e34:	b2 e4       	ldi	r27, 0x42	; 66
    1e36:	8b 87       	std	Y+11, r24	; 0x0b
    1e38:	9c 87       	std	Y+12, r25	; 0x0c
    1e3a:	ad 87       	std	Y+13, r26	; 0x0d
    1e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a e7       	ldi	r20, 0x7A	; 122
    1e4c:	53 e4       	ldi	r21, 0x43	; 67
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8f 83       	std	Y+7, r24	; 0x07
    1e58:	98 87       	std	Y+8, r25	; 0x08
    1e5a:	a9 87       	std	Y+9, r26	; 0x09
    1e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <LCD_EN_Pluse+0x74>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <LCD_EN_Pluse+0xf2>
	else if (__tmp > 65535)
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <LCD_EN_Pluse+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <LCD_EN_Pluse+0xd4>
    1ec2:	89 e1       	ldi	r24, 0x19	; 25
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_EN_Pluse+0xc2>
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <LCD_EN_Pluse+0xb6>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <LCD_EN_Pluse+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_EN_Pluse+0xfe>
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_EN_PORT |= (1<<LCD_EN_PIN);
    1f12:	a8 e3       	ldi	r26, 0x38	; 56
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e8 e3       	ldi	r30, 0x38	; 56
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 60       	ori	r24, 0x08	; 8
    1f1e:	8c 93       	st	X, r24
}
    1f20:	2e 96       	adiw	r28, 0x0e	; 14
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <LCD_init>:
void LCD_init(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	6c 97       	sbiw	r28, 0x1c	; 28
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 ea       	ldi	r26, 0xA0	; 160
    1f4c:	b1 e4       	ldi	r27, 0x41	; 65
    1f4e:	89 8f       	std	Y+25, r24	; 0x19
    1f50:	9a 8f       	std	Y+26, r25	; 0x1a
    1f52:	ab 8f       	std	Y+27, r26	; 0x1b
    1f54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f56:	69 8d       	ldd	r22, Y+25	; 0x19
    1f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	4a e7       	ldi	r20, 0x7A	; 122
    1f64:	53 e4       	ldi	r21, 0x43	; 67
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	8d 8b       	std	Y+21, r24	; 0x15
    1f70:	9e 8b       	std	Y+22, r25	; 0x16
    1f72:	af 8b       	std	Y+23, r26	; 0x17
    1f74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f76:	6d 89       	ldd	r22, Y+21	; 0x15
    1f78:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f e3       	ldi	r21, 0x3F	; 63
    1f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8a:	88 23       	and	r24, r24
    1f8c:	2c f4       	brge	.+10     	; 0x1f98 <LCD_init+0x66>
		__ticks = 1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9c 8b       	std	Y+20, r25	; 0x14
    1f94:	8b 8b       	std	Y+19, r24	; 0x13
    1f96:	3f c0       	rjmp	.+126    	; 0x2016 <LCD_init+0xe4>
	else if (__tmp > 65535)
    1f98:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	3f ef       	ldi	r19, 0xFF	; 255
    1fa4:	4f e7       	ldi	r20, 0x7F	; 127
    1fa6:	57 e4       	ldi	r21, 0x47	; 71
    1fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fac:	18 16       	cp	r1, r24
    1fae:	4c f5       	brge	.+82     	; 0x2002 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e2       	ldi	r20, 0x20	; 32
    1fbe:	51 e4       	ldi	r21, 0x41	; 65
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <LCD_init+0xc6>
    1fda:	89 e1       	ldi	r24, 0x19	; 25
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9a 8b       	std	Y+18, r25	; 0x12
    1fe0:	89 8b       	std	Y+17, r24	; 0x11
    1fe2:	89 89       	ldd	r24, Y+17	; 0x11
    1fe4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <LCD_init+0xb4>
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	9c 8b       	std	Y+20, r25	; 0x14
    1ff6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	69 f7       	brne	.-38     	; 0x1fda <LCD_init+0xa8>
    2000:	14 c0       	rjmp	.+40     	; 0x202a <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2002:	6d 89       	ldd	r22, Y+21	; 0x15
    2004:	7e 89       	ldd	r23, Y+22	; 0x16
    2006:	8f 89       	ldd	r24, Y+23	; 0x17
    2008:	98 8d       	ldd	r25, Y+24	; 0x18
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	98 8b       	std	Y+16, r25	; 0x10
    201c:	8f 87       	std	Y+15, r24	; 0x0f
    201e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2020:	98 89       	ldd	r25, Y+16	; 0x10
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <LCD_init+0xf0>
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	// Set LCD Data Port output
	LCD_DATA_DIR_PORT = 0xff ;
    202a:	ea e3       	ldi	r30, 0x3A	; 58
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	80 83       	st	Z, r24
	// SET control pins output
	LCD_RS_DIR_PORT |=(1<<LCD_RS_PIN);
    2032:	a7 e3       	ldi	r26, 0x37	; 55
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e7 e3       	ldi	r30, 0x37	; 55
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	82 60       	ori	r24, 0x02	; 2
    203e:	8c 93       	st	X, r24
	LCD_RW_DIR_PORT |=(1<<LCD_RW_PIN);
    2040:	a7 e3       	ldi	r26, 0x37	; 55
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e7 e3       	ldi	r30, 0x37	; 55
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	84 60       	ori	r24, 0x04	; 4
    204c:	8c 93       	st	X, r24
	LCD_EN_DIR_PORT |=(1<<LCD_EN_PIN);
    204e:	a7 e3       	ldi	r26, 0x37	; 55
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e7 e3       	ldi	r30, 0x37	; 55
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	88 60       	ori	r24, 0x08	; 8
    205a:	8c 93       	st	X, r24

	//put the LCD in command mode (RS off)
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    205c:	a8 e3       	ldi	r26, 0x38	; 56
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e8 e3       	ldi	r30, 0x38	; 56
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8d 7f       	andi	r24, 0xFD	; 253
    2068:	8c 93       	st	X, r24

	// put the LCD in write mode (RW off)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
    206a:	a8 e3       	ldi	r26, 0x38	; 56
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e8 e3       	ldi	r30, 0x38	; 56
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8b 7f       	andi	r24, 0xFB	; 251
    2076:	8c 93       	st	X, r24

	// EN off
	LCD_EN_PORT &= ~(1<<LCD_EN_PIN);
    2078:	a8 e3       	ldi	r26, 0x38	; 56
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e8 e3       	ldi	r30, 0x38	; 56
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	87 7f       	andi	r24, 0xF7	; 247
    2084:	8c 93       	st	X, r24
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a0 e7       	ldi	r26, 0x70	; 112
    208c:	b1 e4       	ldi	r27, 0x41	; 65
    208e:	8b 87       	std	Y+11, r24	; 0x0b
    2090:	9c 87       	std	Y+12, r25	; 0x0c
    2092:	ad 87       	std	Y+13, r26	; 0x0d
    2094:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2096:	6b 85       	ldd	r22, Y+11	; 0x0b
    2098:	7c 85       	ldd	r23, Y+12	; 0x0c
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	4a e7       	ldi	r20, 0x7A	; 122
    20a4:	53 e4       	ldi	r21, 0x43	; 67
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8f 83       	std	Y+7, r24	; 0x07
    20b0:	98 87       	std	Y+8, r25	; 0x08
    20b2:	a9 87       	std	Y+9, r26	; 0x09
    20b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b6:	6f 81       	ldd	r22, Y+7	; 0x07
    20b8:	78 85       	ldd	r23, Y+8	; 0x08
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ca:	88 23       	and	r24, r24
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <LCD_init+0x1a6>
		__ticks = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
    20d6:	3f c0       	rjmp	.+126    	; 0x2156 <LCD_init+0x224>
	else if (__tmp > 65535)
    20d8:	6f 81       	ldd	r22, Y+7	; 0x07
    20da:	78 85       	ldd	r23, Y+8	; 0x08
    20dc:	89 85       	ldd	r24, Y+9	; 0x09
    20de:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	4c f5       	brge	.+82     	; 0x2142 <LCD_init+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
    2118:	0f c0       	rjmp	.+30     	; 0x2138 <LCD_init+0x206>
    211a:	89 e1       	ldi	r24, 0x19	; 25
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9c 83       	std	Y+4, r25	; 0x04
    2120:	8b 83       	std	Y+3, r24	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_init+0x1f4>
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f7       	brne	.-38     	; 0x211a <LCD_init+0x1e8>
    2140:	14 c0       	rjmp	.+40     	; 0x216a <LCD_init+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <LCD_init+0x230>
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(15);
	LCD_Clear_Screen();
    216a:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_Clear_Screen>
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINE);

	/*4_BIT_MODE_INIT*/
#elif LCD_MODE == LCD_4_BIT_MODE

	LCD_Send_Command(0x02);
    216e:	82 e0       	ldi	r24, 0x02	; 2
    2170:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINE);
    2174:	88 e2       	ldi	r24, 0x28	; 40
    2176:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_Send_Command>

#endif


	LCD_Send_Command(LCD_ENTRY_MODE);
    217a:	86 e0       	ldi	r24, 0x06	; 6
    217c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
    2180:	80 e8       	ldi	r24, 0x80	; 128
    2182:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
    2186:	8f e0       	ldi	r24, 0x0F	; 15
    2188:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_Send_Command>

}
    218c:	6c 96       	adiw	r28, 0x1c	; 28
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <LCD_Is_Busy>:
void LCD_Is_Busy(void)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
	// set pin connected to D7 to receive data (Data direction as input).
	LCD_DATA_DIR_PORT &= ~(1<<LCD_D7_PIN);
    21a6:	aa e3       	ldi	r26, 0x3A	; 58
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	ea e3       	ldi	r30, 0x3A	; 58
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	8f 77       	andi	r24, 0x7F	; 127
    21b2:	8c 93       	st	X, r24

	// put the LCD in read mode (RW on)
	LCD_RW_PORT |= (1<<LCD_RW_PIN);
    21b4:	a8 e3       	ldi	r26, 0x38	; 56
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e8 e3       	ldi	r30, 0x38	; 56
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	84 60       	ori	r24, 0x04	; 4
    21c0:	8c 93       	st	X, r24

	//put the LCD in command mode (RS off)
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    21c2:	a8 e3       	ldi	r26, 0x38	; 56
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e8 e3       	ldi	r30, 0x38	; 56
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	8d 7f       	andi	r24, 0xFD	; 253
    21ce:	8c 93       	st	X, r24

	while (((LCD_DATA_INP_PORT>>LCD_D7_PIN)&1));
    21d0:	ea e3       	ldi	r30, 0x3A	; 58
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 23       	and	r24, r24
    21d8:	dc f3       	brlt	.-10     	; 0x21d0 <LCD_Is_Busy+0x32>

	// set  D7 to receive data (Data direction as output).
	LCD_DATA_DIR_PORT |= (1<<LCD_D7_PIN);
    21da:	aa e3       	ldi	r26, 0x3A	; 58
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	ea e3       	ldi	r30, 0x3A	; 58
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	80 68       	ori	r24, 0x80	; 128
    21e6:	8c 93       	st	X, r24

	// put the LCD in write mode (RW off)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
    21e8:	a8 e3       	ldi	r26, 0x38	; 56
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e8 e3       	ldi	r30, 0x38	; 56
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8b 7f       	andi	r24, 0xFB	; 251
    21f4:	8c 93       	st	X, r24

}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <LCD_Send_Command>:
void LCD_Send_Command(uint8 command)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	89 83       	std	Y+1, r24	; 0x01
	// Check if LCD is busy
	LCD_Is_Busy();
    2208:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_Is_Busy>

	//put the LCD in command mode (RS off)
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    220c:	a8 e3       	ldi	r26, 0x38	; 56
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e8 e3       	ldi	r30, 0x38	; 56
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	8d 7f       	andi	r24, 0xFD	; 253
    2218:	8c 93       	st	X, r24

	// put the LCD in write mode (RW off)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
    221a:	a8 e3       	ldi	r26, 0x38	; 56
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e8 e3       	ldi	r30, 0x38	; 56
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	8b 7f       	andi	r24, 0xFB	; 251
    2226:	8c 93       	st	X, r24
	LCD_EN_Pluse();

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of command on Data Pins
	LCD_DATA_OUT_PORT = (LCD_DATA_OUT_PORT & 0x0f)|(command & 0xf0);
    2228:	ab e3       	ldi	r26, 0x3B	; 59
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	eb e3       	ldi	r30, 0x3B	; 59
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	98 2f       	mov	r25, r24
    2234:	9f 70       	andi	r25, 0x0F	; 15
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	80 7f       	andi	r24, 0xF0	; 240
    223a:	89 2b       	or	r24, r25
    223c:	8c 93       	st	X, r24
	LCD_EN_Pluse();
    223e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_EN_Pluse>

	// Write The Least 4 bits Of command on Data Pins
	LCD_DATA_OUT_PORT = (LCD_DATA_OUT_PORT & 0x0f)|(command <<4);
    2242:	ab e3       	ldi	r26, 0x3B	; 59
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	eb e3       	ldi	r30, 0x3B	; 59
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	28 2f       	mov	r18, r24
    224e:	2f 70       	andi	r18, 0x0F	; 15
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	82 95       	swap	r24
    2258:	92 95       	swap	r25
    225a:	90 7f       	andi	r25, 0xF0	; 240
    225c:	98 27       	eor	r25, r24
    225e:	80 7f       	andi	r24, 0xF0	; 240
    2260:	98 27       	eor	r25, r24
    2262:	82 2b       	or	r24, r18
    2264:	8c 93       	st	X, r24
	LCD_EN_Pluse();
    2266:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_EN_Pluse>

#endif


}
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <LCD_Send_Character>:
void LCD_Send_Character(uint8 character)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	0f 92       	push	r0
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	89 83       	std	Y+1, r24	; 0x01
	//put the LCD in Data mode (RS on)
	LCD_RS_PORT |= (1<<LCD_RS_PIN);
    227e:	a8 e3       	ldi	r26, 0x38	; 56
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e8 e3       	ldi	r30, 0x38	; 56
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	82 60       	ori	r24, 0x02	; 2
    228a:	8c 93       	st	X, r24

	// put the LCD in write mode (RW off)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
    228c:	a8 e3       	ldi	r26, 0x38	; 56
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e8 e3       	ldi	r30, 0x38	; 56
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	8b 7f       	andi	r24, 0xFB	; 251
    2298:	8c 93       	st	X, r24
	LCD_EN_Pluse();

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of data on Data Pins
	LCD_DATA_OUT_PORT = (LCD_DATA_OUT_PORT & 0x0f)|(character & 0xf0);
    229a:	ab e3       	ldi	r26, 0x3B	; 59
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	eb e3       	ldi	r30, 0x3B	; 59
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	98 2f       	mov	r25, r24
    22a6:	9f 70       	andi	r25, 0x0F	; 15
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	80 7f       	andi	r24, 0xF0	; 240
    22ac:	89 2b       	or	r24, r25
    22ae:	8c 93       	st	X, r24
	LCD_EN_Pluse();
    22b0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_EN_Pluse>

	// Write The Least 4 bits Of data on Data Pins
	LCD_DATA_OUT_PORT = (LCD_DATA_OUT_PORT & 0x0f)|(character <<4);
    22b4:	ab e3       	ldi	r26, 0x3B	; 59
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	eb e3       	ldi	r30, 0x3B	; 59
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	28 2f       	mov	r18, r24
    22c0:	2f 70       	andi	r18, 0x0F	; 15
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	82 95       	swap	r24
    22ca:	92 95       	swap	r25
    22cc:	90 7f       	andi	r25, 0xF0	; 240
    22ce:	98 27       	eor	r25, r24
    22d0:	80 7f       	andi	r24, 0xF0	; 240
    22d2:	98 27       	eor	r25, r24
    22d4:	82 2b       	or	r24, r18
    22d6:	8c 93       	st	X, r24
	LCD_EN_Pluse();
    22d8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_EN_Pluse>

#endif

}
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <LCD_Send_string>:
void LCD_Send_string(uint8* string)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <LCD_Send_string+0x6>
    22ea:	0f 92       	push	r0
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9b 83       	std	Y+3, r25	; 0x03
    22f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = 0;
    22f4:	19 82       	std	Y+1, r1	; 0x01
    22f6:	1f c0       	rjmp	.+62     	; 0x2336 <LCD_Send_string+0x52>
	while( *string >0)
	{
		counter++;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	8f 5f       	subi	r24, 0xFF	; 255
    22fc:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_Character(*string);
    22fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2300:	fb 81       	ldd	r31, Y+3	; 0x03
    2302:	80 81       	ld	r24, Z
    2304:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_Send_Character>
		string++;
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	9b 83       	std	Y+3, r25	; 0x03
    2310:	8a 83       	std	Y+2, r24	; 0x02

		if(counter == 16)
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	80 31       	cpi	r24, 0x10	; 16
    2316:	29 f4       	brne	.+10     	; 0x2322 <LCD_Send_string+0x3e>
		{
			LCD_SET_Cursor(2, 0);
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_SET_Cursor>
    2320:	0a c0       	rjmp	.+20     	; 0x2336 <LCD_Send_string+0x52>
		}
		else if(counter == 32)
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	80 32       	cpi	r24, 0x20	; 32
    2326:	39 f4       	brne	.+14     	; 0x2336 <LCD_Send_string+0x52>
		{
			LCD_Clear_Screen();
    2328:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_Clear_Screen>
			LCD_SET_Cursor(1, 0);
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_SET_Cursor>
			counter =0 ;
    2334:	19 82       	std	Y+1, r1	; 0x01

}
void LCD_Send_string(uint8* string)
{
	uint8 counter = 0;
	while( *string >0)
    2336:	ea 81       	ldd	r30, Y+2	; 0x02
    2338:	fb 81       	ldd	r31, Y+3	; 0x03
    233a:	80 81       	ld	r24, Z
    233c:	88 23       	and	r24, r24
    233e:	e1 f6       	brne	.-72     	; 0x22f8 <LCD_Send_string+0x14>
			LCD_Clear_Screen();
			LCD_SET_Cursor(1, 0);
			counter =0 ;
		}
	}
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <LCD_Clear_Screen>:
void LCD_Clear_Screen(void)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Command(LCD_CLEAR_SCREEN);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_Send_Command>
}
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <LCD_SET_Cursor>:
void LCD_SET_Cursor(uint8 line , uint8 position )
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <LCD_SET_Cursor+0x6>
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	81 30       	cpi	r24, 0x01	; 1
    2372:	41 f4       	brne	.+16     	; 0x2384 <LCD_SET_Cursor+0x24>
	{
		if(position<16)
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	80 31       	cpi	r24, 0x10	; 16
    2378:	78 f4       	brcc	.+30     	; 0x2398 <LCD_SET_Cursor+0x38>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW + position);
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	80 58       	subi	r24, 0x80	; 128
    237e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_Send_Command>
    2382:	0a c0       	rjmp	.+20     	; 0x2398 <LCD_SET_Cursor+0x38>
	}
	else if (line == 2)
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	82 30       	cpi	r24, 0x02	; 2
    2388:	39 f4       	brne	.+14     	; 0x2398 <LCD_SET_Cursor+0x38>
	{
		if(position<16)
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	80 31       	cpi	r24, 0x10	; 16
    238e:	20 f4       	brcc	.+8      	; 0x2398 <LCD_SET_Cursor+0x38>
		LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW + position);
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	80 54       	subi	r24, 0x40	; 64
    2394:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_Send_Command>
	}
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <LCD_Display_Number>:
void LCD_Display_Number(uint32 number)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	29 97       	sbiw	r28, 0x09	; 9
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	99 87       	std	Y+9, r25	; 0x09
    23b8:	88 87       	std	Y+8, r24	; 0x08
	uint8 str[7];
	sprintf(str,"%d",number);
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <LCD_Display_Number+0x1a>
    23bc:	00 d0       	rcall	.+0      	; 0x23be <LCD_Display_Number+0x1c>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <LCD_Display_Number+0x1e>
    23c0:	ed b7       	in	r30, 0x3d	; 61
    23c2:	fe b7       	in	r31, 0x3e	; 62
    23c4:	31 96       	adiw	r30, 0x01	; 1
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
    23ce:	80 e6       	ldi	r24, 0x60	; 96
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	93 83       	std	Z+3, r25	; 0x03
    23d4:	82 83       	std	Z+2, r24	; 0x02
    23d6:	88 85       	ldd	r24, Y+8	; 0x08
    23d8:	99 85       	ldd	r25, Y+9	; 0x09
    23da:	95 83       	std	Z+5, r25	; 0x05
    23dc:	84 83       	std	Z+4, r24	; 0x04
    23de:	0e 94 0c 14 	call	0x2818	; 0x2818 <sprintf>
    23e2:	8d b7       	in	r24, 0x3d	; 61
    23e4:	9e b7       	in	r25, 0x3e	; 62
    23e6:	06 96       	adiw	r24, 0x06	; 6
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	9e bf       	out	0x3e, r25	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	8d bf       	out	0x3d, r24	; 61
	LCD_Send_string(str);
    23f2:	ce 01       	movw	r24, r28
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_Send_string>
}
    23fa:	29 96       	adiw	r28, 0x09	; 9
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <LCD_Display_Real_Number>:
void LCD_Display_Real_Number(double number)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	a2 97       	sbiw	r28, 0x22	; 34
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	6a 8f       	std	Y+26, r22	; 0x1a
    2422:	7b 8f       	std	Y+27, r23	; 0x1b
    2424:	8c 8f       	std	Y+28, r24	; 0x1c
    2426:	9d 8f       	std	Y+29, r25	; 0x1d
	uint8 str[16];

	uint8 sign = (number<0)? "-":"";
    2428:	6a 8d       	ldd	r22, Y+26	; 0x1a
    242a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    242c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    242e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	24 f4       	brge	.+8      	; 0x2448 <LCD_Display_Real_Number+0x3c>
    2440:	83 e6       	ldi	r24, 0x63	; 99
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	8a a3       	std	Y+34, r24	; 0x22
    2446:	03 c0       	rjmp	.+6      	; 0x244e <LCD_Display_Real_Number+0x42>
    2448:	85 e6       	ldi	r24, 0x65	; 101
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	8a a3       	std	Y+34, r24	; 0x22
    244e:	2a a1       	ldd	r18, Y+34	; 0x22
    2450:	29 87       	std	Y+9, r18	; 0x09
	float Temp = (number<0)? -number:number;
    2452:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2454:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2456:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2458:	9d 8d       	ldd	r25, Y+29	; 0x1d
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2466:	88 23       	and	r24, r24
    2468:	64 f4       	brge	.+24     	; 0x2482 <LCD_Display_Real_Number+0x76>
    246a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    246c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    246e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2470:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2472:	9c 01       	movw	r18, r24
    2474:	ad 01       	movw	r20, r26
    2476:	50 58       	subi	r21, 0x80	; 128
    2478:	2e 8f       	std	Y+30, r18	; 0x1e
    247a:	3f 8f       	std	Y+31, r19	; 0x1f
    247c:	48 a3       	std	Y+32, r20	; 0x20
    247e:	59 a3       	std	Y+33, r21	; 0x21
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <LCD_Display_Real_Number+0x86>
    2482:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2484:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2486:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2488:	bd 8d       	ldd	r27, Y+29	; 0x1d
    248a:	8e 8f       	std	Y+30, r24	; 0x1e
    248c:	9f 8f       	std	Y+31, r25	; 0x1f
    248e:	a8 a3       	std	Y+32, r26	; 0x20
    2490:	b9 a3       	std	Y+33, r27	; 0x21
    2492:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2494:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2496:	48 a1       	ldd	r20, Y+32	; 0x20
    2498:	59 a1       	ldd	r21, Y+33	; 0x21
    249a:	2d 83       	std	Y+5, r18	; 0x05
    249c:	3e 83       	std	Y+6, r19	; 0x06
    249e:	4f 83       	std	Y+7, r20	; 0x07
    24a0:	58 87       	std	Y+8, r21	; 0x08

	uint32 temp1 = Temp;
    24a2:	6d 81       	ldd	r22, Y+5	; 0x05
    24a4:	7e 81       	ldd	r23, Y+6	; 0x06
    24a6:	8f 81       	ldd	r24, Y+7	; 0x07
    24a8:	98 85       	ldd	r25, Y+8	; 0x08
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9c 83       	std	Y+4, r25	; 0x04
    24b4:	8b 83       	std	Y+3, r24	; 0x03
	uint32 temp2 = (Temp - temp1) *10000 ;
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	cc 01       	movw	r24, r24
    24bc:	a0 e0       	ldi	r26, 0x00	; 0
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    24c8:	9b 01       	movw	r18, r22
    24ca:	ac 01       	movw	r20, r24
    24cc:	6d 81       	ldd	r22, Y+5	; 0x05
    24ce:	7e 81       	ldd	r23, Y+6	; 0x06
    24d0:	8f 81       	ldd	r24, Y+7	; 0x07
    24d2:	98 85       	ldd	r25, Y+8	; 0x08
    24d4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e4       	ldi	r19, 0x40	; 64
    24e4:	4c e1       	ldi	r20, 0x1C	; 28
    24e6:	56 e4       	ldi	r21, 0x46	; 70
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
	sprintf(str,"%s%d.%04d",sign , temp1, temp2);
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4d b7       	in	r20, 0x3d	; 61
    2508:	5e b7       	in	r21, 0x3e	; 62
    250a:	4a 50       	subi	r20, 0x0A	; 10
    250c:	50 40       	sbci	r21, 0x00	; 0
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	5e bf       	out	0x3e, r21	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	4d bf       	out	0x3d, r20	; 61
    2518:	ed b7       	in	r30, 0x3d	; 61
    251a:	fe b7       	in	r31, 0x3e	; 62
    251c:	31 96       	adiw	r30, 0x01	; 1
    251e:	ce 01       	movw	r24, r28
    2520:	0a 96       	adiw	r24, 0x0a	; 10
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	80 83       	st	Z, r24
    2526:	86 e6       	ldi	r24, 0x66	; 102
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	93 83       	std	Z+3, r25	; 0x03
    252c:	82 83       	std	Z+2, r24	; 0x02
    252e:	35 83       	std	Z+5, r19	; 0x05
    2530:	24 83       	std	Z+4, r18	; 0x04
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	97 83       	std	Z+7, r25	; 0x07
    2538:	86 83       	std	Z+6, r24	; 0x06
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	91 87       	std	Z+9, r25	; 0x09
    2540:	80 87       	std	Z+8, r24	; 0x08
    2542:	0e 94 0c 14 	call	0x2818	; 0x2818 <sprintf>
    2546:	8d b7       	in	r24, 0x3d	; 61
    2548:	9e b7       	in	r25, 0x3e	; 62
    254a:	0a 96       	adiw	r24, 0x0a	; 10
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	9e bf       	out	0x3e, r25	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	8d bf       	out	0x3d, r24	; 61
	LCD_Send_string(str);
    2556:	ce 01       	movw	r24, r28
    2558:	0a 96       	adiw	r24, 0x0a	; 10
    255a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_Send_string>
}
    255e:	a2 96       	adiw	r28, 0x22	; 34
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <main>:
USART_Config_t usart_cfg ;
uint16_t a , x ;
uint8_t d[50];

int main(void)
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	62 97       	sbiw	r28, 0x12	; 18
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(DIO_PORTD , DIO_PIN0 , DIO_PIN_INPUT);
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD , DIO_PIN1 , DIO_PIN_OUTPUT);
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_SetPinDirection>

	usart_cfg.BaudRate = USART_BaudRate_9600;
    2598:	80 e8       	ldi	r24, 0x80	; 128
    259a:	95 e2       	ldi	r25, 0x25	; 37
    259c:	a0 e0       	ldi	r26, 0x00	; 0
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	80 93 05 02 	sts	0x0205, r24
    25a4:	90 93 06 02 	sts	0x0206, r25
    25a8:	a0 93 07 02 	sts	0x0207, r26
    25ac:	b0 93 08 02 	sts	0x0208, r27
	usart_cfg.Fosc = 8000000;
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	92 e1       	ldi	r25, 0x12	; 18
    25b4:	aa e7       	ldi	r26, 0x7A	; 122
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	80 93 01 02 	sts	0x0201, r24
    25bc:	90 93 02 02 	sts	0x0202, r25
    25c0:	a0 93 03 02 	sts	0x0203, r26
    25c4:	b0 93 04 02 	sts	0x0204, r27
	usart_cfg.Mode = USART_Normal_Mode;
    25c8:	10 92 09 02 	sts	0x0209, r1
	usart_cfg.Parity_status = USART_Parity_Disable;
    25cc:	10 92 0c 02 	sts	0x020C, r1
	usart_cfg.Stop_bits = USART_StopBit_1bit;
    25d0:	10 92 0b 02 	sts	0x020B, r1
	usart_cfg.data_bits = USART_DataBit_8bits;
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	80 93 0a 02 	sts	0x020A, r24
	MCAL_USART_Init(&usart_cfg);
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	92 e0       	ldi	r25, 0x02	; 2
    25de:	0e 94 47 07 	call	0xe8e	; 0xe8e <MCAL_USART_Init>
	LCD_init();
    25e2:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_init>
	GI_Enable;
    25e6:	af e5       	ldi	r26, 0x5F	; 95
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	ef e5       	ldi	r30, 0x5F	; 95
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	80 68       	ori	r24, 0x80	; 128
    25f2:	8c 93       	st	X, r24
//    MCAL_USART_Send(&a , disable);
//    a = 'I';
//    MCAL_USART_Send(&a , disable);
//    a = 'K';
//    MCAL_USART_Send(&a , disable);
    MCAL_USART_SendString("Abdullah");
    25f4:	80 e7       	ldi	r24, 0x70	; 112
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <MCAL_USART_SendString>
    MCAL_USART_SendString("karkour");
    25fc:	89 e7       	ldi	r24, 0x79	; 121
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <MCAL_USART_SendString>
	LCD_SET_Cursor(2,0);
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_SET_Cursor>
	uint32_t x = 0 ;
    2610:	1f 86       	std	Y+15, r1	; 0x0f
    2612:	18 8a       	std	Y+16, r1	; 0x10
    2614:	19 8a       	std	Y+17, r1	; 0x11
    2616:	1a 8a       	std	Y+18, r1	; 0x12
	while(1)
	{
		MCAL_USART_ResiveString(d);
    2618:	8f ec       	ldi	r24, 0xCF	; 207
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	0e 94 1e 09 	call	0x123c	; 0x123c <MCAL_USART_ResiveString>
		LCD_SET_Cursor(2,0);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_SET_Cursor>
		LCD_Send_string(d);
    262c:	8f ec       	ldi	r24, 0xCF	; 207
    262e:	91 e0       	ldi	r25, 0x01	; 1
    2630:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_Send_string>




		  if(x==9)	x = 0;
    2634:	8f 85       	ldd	r24, Y+15	; 0x0f
    2636:	98 89       	ldd	r25, Y+16	; 0x10
    2638:	a9 89       	ldd	r26, Y+17	; 0x11
    263a:	ba 89       	ldd	r27, Y+18	; 0x12
    263c:	89 30       	cpi	r24, 0x09	; 9
    263e:	91 05       	cpc	r25, r1
    2640:	a1 05       	cpc	r26, r1
    2642:	b1 05       	cpc	r27, r1
    2644:	21 f4       	brne	.+8      	; 0x264e <main+0xde>
    2646:	1f 86       	std	Y+15, r1	; 0x0f
    2648:	18 8a       	std	Y+16, r1	; 0x10
    264a:	19 8a       	std	Y+17, r1	; 0x11
    264c:	1a 8a       	std	Y+18, r1	; 0x12
		  x++;
    264e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2650:	98 89       	ldd	r25, Y+16	; 0x10
    2652:	a9 89       	ldd	r26, Y+17	; 0x11
    2654:	ba 89       	ldd	r27, Y+18	; 0x12
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	a1 1d       	adc	r26, r1
    265a:	b1 1d       	adc	r27, r1
    265c:	8f 87       	std	Y+15, r24	; 0x0f
    265e:	98 8b       	std	Y+16, r25	; 0x10
    2660:	a9 8b       	std	Y+17, r26	; 0x11
    2662:	ba 8b       	std	Y+18, r27	; 0x12
		  LCD_SET_Cursor(1,0);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_SET_Cursor>
		  LCD_Display_Number(x);
    2670:	8f 85       	ldd	r24, Y+15	; 0x0f
    2672:	98 89       	ldd	r25, Y+16	; 0x10
    2674:	a9 89       	ldd	r26, Y+17	; 0x11
    2676:	ba 89       	ldd	r27, Y+18	; 0x12
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_Display_Number>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	aa ef       	ldi	r26, 0xFA	; 250
    2686:	b4 e4       	ldi	r27, 0x44	; 68
    2688:	8b 87       	std	Y+11, r24	; 0x0b
    268a:	9c 87       	std	Y+12, r25	; 0x0c
    268c:	ad 87       	std	Y+13, r26	; 0x0d
    268e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	6b 85       	ldd	r22, Y+11	; 0x0b
    2692:	7c 85       	ldd	r23, Y+12	; 0x0c
    2694:	8d 85       	ldd	r24, Y+13	; 0x0d
    2696:	9e 85       	ldd	r25, Y+14	; 0x0e
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a e7       	ldi	r20, 0x7A	; 122
    269e:	53 e4       	ldi	r21, 0x43	; 67
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8f 83       	std	Y+7, r24	; 0x07
    26aa:	98 87       	std	Y+8, r25	; 0x08
    26ac:	a9 87       	std	Y+9, r26	; 0x09
    26ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f e3       	ldi	r21, 0x3F	; 63
    26c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	2c f4       	brge	.+10     	; 0x26d2 <main+0x162>
		__ticks = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9e 83       	std	Y+6, r25	; 0x06
    26ce:	8d 83       	std	Y+5, r24	; 0x05
    26d0:	3f c0       	rjmp	.+126    	; 0x2750 <main+0x1e0>
	else if (__tmp > 65535)
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	78 85       	ldd	r23, Y+8	; 0x08
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	57 e4       	ldi	r21, 0x47	; 71
    26e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	4c f5       	brge	.+82     	; 0x273c <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e2       	ldi	r20, 0x20	; 32
    26f8:	51 e4       	ldi	r21, 0x41	; 65
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <main+0x1c2>
    2714:	89 e1       	ldi	r24, 0x19	; 25
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9c 83       	std	Y+4, r25	; 0x04
    271a:	8b 83       	std	Y+3, r24	; 0x03
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <main+0x1b0>
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	8d 81       	ldd	r24, Y+5	; 0x05
    272a:	9e 81       	ldd	r25, Y+6	; 0x06
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	9e 81       	ldd	r25, Y+6	; 0x06
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	69 f7       	brne	.-38     	; 0x2714 <main+0x1a4>
    273a:	6e cf       	rjmp	.-292    	; 0x2618 <main+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	9e 81       	ldd	r25, Y+6	; 0x06
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <main+0x1ec>
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	59 cf       	rjmp	.-334    	; 0x2618 <main+0xa8>

00002766 <__udivmodsi4>:
    2766:	a1 e2       	ldi	r26, 0x21	; 33
    2768:	1a 2e       	mov	r1, r26
    276a:	aa 1b       	sub	r26, r26
    276c:	bb 1b       	sub	r27, r27
    276e:	fd 01       	movw	r30, r26
    2770:	0d c0       	rjmp	.+26     	; 0x278c <__udivmodsi4_ep>

00002772 <__udivmodsi4_loop>:
    2772:	aa 1f       	adc	r26, r26
    2774:	bb 1f       	adc	r27, r27
    2776:	ee 1f       	adc	r30, r30
    2778:	ff 1f       	adc	r31, r31
    277a:	a2 17       	cp	r26, r18
    277c:	b3 07       	cpc	r27, r19
    277e:	e4 07       	cpc	r30, r20
    2780:	f5 07       	cpc	r31, r21
    2782:	20 f0       	brcs	.+8      	; 0x278c <__udivmodsi4_ep>
    2784:	a2 1b       	sub	r26, r18
    2786:	b3 0b       	sbc	r27, r19
    2788:	e4 0b       	sbc	r30, r20
    278a:	f5 0b       	sbc	r31, r21

0000278c <__udivmodsi4_ep>:
    278c:	66 1f       	adc	r22, r22
    278e:	77 1f       	adc	r23, r23
    2790:	88 1f       	adc	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	1a 94       	dec	r1
    2796:	69 f7       	brne	.-38     	; 0x2772 <__udivmodsi4_loop>
    2798:	60 95       	com	r22
    279a:	70 95       	com	r23
    279c:	80 95       	com	r24
    279e:	90 95       	com	r25
    27a0:	9b 01       	movw	r18, r22
    27a2:	ac 01       	movw	r20, r24
    27a4:	bd 01       	movw	r22, r26
    27a6:	cf 01       	movw	r24, r30
    27a8:	08 95       	ret

000027aa <__prologue_saves__>:
    27aa:	2f 92       	push	r2
    27ac:	3f 92       	push	r3
    27ae:	4f 92       	push	r4
    27b0:	5f 92       	push	r5
    27b2:	6f 92       	push	r6
    27b4:	7f 92       	push	r7
    27b6:	8f 92       	push	r8
    27b8:	9f 92       	push	r9
    27ba:	af 92       	push	r10
    27bc:	bf 92       	push	r11
    27be:	cf 92       	push	r12
    27c0:	df 92       	push	r13
    27c2:	ef 92       	push	r14
    27c4:	ff 92       	push	r15
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	ca 1b       	sub	r28, r26
    27d4:	db 0b       	sbc	r29, r27
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	09 94       	ijmp

000027e2 <__epilogue_restores__>:
    27e2:	2a 88       	ldd	r2, Y+18	; 0x12
    27e4:	39 88       	ldd	r3, Y+17	; 0x11
    27e6:	48 88       	ldd	r4, Y+16	; 0x10
    27e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f4:	b9 84       	ldd	r11, Y+9	; 0x09
    27f6:	c8 84       	ldd	r12, Y+8	; 0x08
    27f8:	df 80       	ldd	r13, Y+7	; 0x07
    27fa:	ee 80       	ldd	r14, Y+6	; 0x06
    27fc:	fd 80       	ldd	r15, Y+5	; 0x05
    27fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2800:	1b 81       	ldd	r17, Y+3	; 0x03
    2802:	aa 81       	ldd	r26, Y+2	; 0x02
    2804:	b9 81       	ldd	r27, Y+1	; 0x01
    2806:	ce 0f       	add	r28, r30
    2808:	d1 1d       	adc	r29, r1
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	ed 01       	movw	r28, r26
    2816:	08 95       	ret

00002818 <sprintf>:
    2818:	ae e0       	ldi	r26, 0x0E	; 14
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e2 e1       	ldi	r30, 0x12	; 18
    281e:	f4 e1       	ldi	r31, 0x14	; 20
    2820:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x1c>
    2824:	0d 89       	ldd	r16, Y+21	; 0x15
    2826:	1e 89       	ldd	r17, Y+22	; 0x16
    2828:	86 e0       	ldi	r24, 0x06	; 6
    282a:	8c 83       	std	Y+4, r24	; 0x04
    282c:	1a 83       	std	Y+2, r17	; 0x02
    282e:	09 83       	std	Y+1, r16	; 0x01
    2830:	8f ef       	ldi	r24, 0xFF	; 255
    2832:	9f e7       	ldi	r25, 0x7F	; 127
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	9e 01       	movw	r18, r28
    283a:	27 5e       	subi	r18, 0xE7	; 231
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	ce 01       	movw	r24, r28
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	6f 89       	ldd	r22, Y+23	; 0x17
    2844:	78 8d       	ldd	r23, Y+24	; 0x18
    2846:	a9 01       	movw	r20, r18
    2848:	0e 94 30 14 	call	0x2860	; 0x2860 <vfprintf>
    284c:	2f 81       	ldd	r18, Y+7	; 0x07
    284e:	38 85       	ldd	r19, Y+8	; 0x08
    2850:	02 0f       	add	r16, r18
    2852:	13 1f       	adc	r17, r19
    2854:	f8 01       	movw	r30, r16
    2856:	10 82       	st	Z, r1
    2858:	2e 96       	adiw	r28, 0x0e	; 14
    285a:	e4 e0       	ldi	r30, 0x04	; 4
    285c:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x1c>

00002860 <vfprintf>:
    2860:	ab e0       	ldi	r26, 0x0B	; 11
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e6 e3       	ldi	r30, 0x36	; 54
    2866:	f4 e1       	ldi	r31, 0x14	; 20
    2868:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__prologue_saves__>
    286c:	3c 01       	movw	r6, r24
    286e:	2b 01       	movw	r4, r22
    2870:	5a 01       	movw	r10, r20
    2872:	fc 01       	movw	r30, r24
    2874:	17 82       	std	Z+7, r1	; 0x07
    2876:	16 82       	std	Z+6, r1	; 0x06
    2878:	83 81       	ldd	r24, Z+3	; 0x03
    287a:	81 fd       	sbrc	r24, 1
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <vfprintf+0x24>
    287e:	6f ef       	ldi	r22, 0xFF	; 255
    2880:	7f ef       	ldi	r23, 0xFF	; 255
    2882:	c6 c1       	rjmp	.+908    	; 0x2c10 <vfprintf+0x3b0>
    2884:	9a e0       	ldi	r25, 0x0A	; 10
    2886:	89 2e       	mov	r8, r25
    2888:	1e 01       	movw	r2, r28
    288a:	08 94       	sec
    288c:	21 1c       	adc	r2, r1
    288e:	31 1c       	adc	r3, r1
    2890:	f3 01       	movw	r30, r6
    2892:	23 81       	ldd	r18, Z+3	; 0x03
    2894:	f2 01       	movw	r30, r4
    2896:	23 fd       	sbrc	r18, 3
    2898:	85 91       	lpm	r24, Z+
    289a:	23 ff       	sbrs	r18, 3
    289c:	81 91       	ld	r24, Z+
    289e:	2f 01       	movw	r4, r30
    28a0:	88 23       	and	r24, r24
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <vfprintf+0x46>
    28a4:	b2 c1       	rjmp	.+868    	; 0x2c0a <vfprintf+0x3aa>
    28a6:	85 32       	cpi	r24, 0x25	; 37
    28a8:	39 f4       	brne	.+14     	; 0x28b8 <vfprintf+0x58>
    28aa:	23 fd       	sbrc	r18, 3
    28ac:	85 91       	lpm	r24, Z+
    28ae:	23 ff       	sbrs	r18, 3
    28b0:	81 91       	ld	r24, Z+
    28b2:	2f 01       	movw	r4, r30
    28b4:	85 32       	cpi	r24, 0x25	; 37
    28b6:	29 f4       	brne	.+10     	; 0x28c2 <vfprintf+0x62>
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	b3 01       	movw	r22, r6
    28bc:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    28c0:	e7 cf       	rjmp	.-50     	; 0x2890 <vfprintf+0x30>
    28c2:	98 2f       	mov	r25, r24
    28c4:	ff 24       	eor	r15, r15
    28c6:	ee 24       	eor	r14, r14
    28c8:	99 24       	eor	r9, r9
    28ca:	ff e1       	ldi	r31, 0x1F	; 31
    28cc:	ff 15       	cp	r31, r15
    28ce:	d0 f0       	brcs	.+52     	; 0x2904 <vfprintf+0xa4>
    28d0:	9b 32       	cpi	r25, 0x2B	; 43
    28d2:	69 f0       	breq	.+26     	; 0x28ee <vfprintf+0x8e>
    28d4:	9c 32       	cpi	r25, 0x2C	; 44
    28d6:	28 f4       	brcc	.+10     	; 0x28e2 <vfprintf+0x82>
    28d8:	90 32       	cpi	r25, 0x20	; 32
    28da:	59 f0       	breq	.+22     	; 0x28f2 <vfprintf+0x92>
    28dc:	93 32       	cpi	r25, 0x23	; 35
    28de:	91 f4       	brne	.+36     	; 0x2904 <vfprintf+0xa4>
    28e0:	0e c0       	rjmp	.+28     	; 0x28fe <vfprintf+0x9e>
    28e2:	9d 32       	cpi	r25, 0x2D	; 45
    28e4:	49 f0       	breq	.+18     	; 0x28f8 <vfprintf+0x98>
    28e6:	90 33       	cpi	r25, 0x30	; 48
    28e8:	69 f4       	brne	.+26     	; 0x2904 <vfprintf+0xa4>
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	24 c0       	rjmp	.+72     	; 0x2936 <vfprintf+0xd6>
    28ee:	52 e0       	ldi	r21, 0x02	; 2
    28f0:	f5 2a       	or	r15, r21
    28f2:	84 e0       	ldi	r24, 0x04	; 4
    28f4:	f8 2a       	or	r15, r24
    28f6:	28 c0       	rjmp	.+80     	; 0x2948 <vfprintf+0xe8>
    28f8:	98 e0       	ldi	r25, 0x08	; 8
    28fa:	f9 2a       	or	r15, r25
    28fc:	25 c0       	rjmp	.+74     	; 0x2948 <vfprintf+0xe8>
    28fe:	e0 e1       	ldi	r30, 0x10	; 16
    2900:	fe 2a       	or	r15, r30
    2902:	22 c0       	rjmp	.+68     	; 0x2948 <vfprintf+0xe8>
    2904:	f7 fc       	sbrc	r15, 7
    2906:	29 c0       	rjmp	.+82     	; 0x295a <vfprintf+0xfa>
    2908:	89 2f       	mov	r24, r25
    290a:	80 53       	subi	r24, 0x30	; 48
    290c:	8a 30       	cpi	r24, 0x0A	; 10
    290e:	70 f4       	brcc	.+28     	; 0x292c <vfprintf+0xcc>
    2910:	f6 fe       	sbrs	r15, 6
    2912:	05 c0       	rjmp	.+10     	; 0x291e <vfprintf+0xbe>
    2914:	98 9c       	mul	r9, r8
    2916:	90 2c       	mov	r9, r0
    2918:	11 24       	eor	r1, r1
    291a:	98 0e       	add	r9, r24
    291c:	15 c0       	rjmp	.+42     	; 0x2948 <vfprintf+0xe8>
    291e:	e8 9c       	mul	r14, r8
    2920:	e0 2c       	mov	r14, r0
    2922:	11 24       	eor	r1, r1
    2924:	e8 0e       	add	r14, r24
    2926:	f0 e2       	ldi	r31, 0x20	; 32
    2928:	ff 2a       	or	r15, r31
    292a:	0e c0       	rjmp	.+28     	; 0x2948 <vfprintf+0xe8>
    292c:	9e 32       	cpi	r25, 0x2E	; 46
    292e:	29 f4       	brne	.+10     	; 0x293a <vfprintf+0xda>
    2930:	f6 fc       	sbrc	r15, 6
    2932:	6b c1       	rjmp	.+726    	; 0x2c0a <vfprintf+0x3aa>
    2934:	40 e4       	ldi	r20, 0x40	; 64
    2936:	f4 2a       	or	r15, r20
    2938:	07 c0       	rjmp	.+14     	; 0x2948 <vfprintf+0xe8>
    293a:	9c 36       	cpi	r25, 0x6C	; 108
    293c:	19 f4       	brne	.+6      	; 0x2944 <vfprintf+0xe4>
    293e:	50 e8       	ldi	r21, 0x80	; 128
    2940:	f5 2a       	or	r15, r21
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <vfprintf+0xe8>
    2944:	98 36       	cpi	r25, 0x68	; 104
    2946:	49 f4       	brne	.+18     	; 0x295a <vfprintf+0xfa>
    2948:	f2 01       	movw	r30, r4
    294a:	23 fd       	sbrc	r18, 3
    294c:	95 91       	lpm	r25, Z+
    294e:	23 ff       	sbrs	r18, 3
    2950:	91 91       	ld	r25, Z+
    2952:	2f 01       	movw	r4, r30
    2954:	99 23       	and	r25, r25
    2956:	09 f0       	breq	.+2      	; 0x295a <vfprintf+0xfa>
    2958:	b8 cf       	rjmp	.-144    	; 0x28ca <vfprintf+0x6a>
    295a:	89 2f       	mov	r24, r25
    295c:	85 54       	subi	r24, 0x45	; 69
    295e:	83 30       	cpi	r24, 0x03	; 3
    2960:	18 f0       	brcs	.+6      	; 0x2968 <vfprintf+0x108>
    2962:	80 52       	subi	r24, 0x20	; 32
    2964:	83 30       	cpi	r24, 0x03	; 3
    2966:	38 f4       	brcc	.+14     	; 0x2976 <vfprintf+0x116>
    2968:	44 e0       	ldi	r20, 0x04	; 4
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	a4 0e       	add	r10, r20
    296e:	b5 1e       	adc	r11, r21
    2970:	5f e3       	ldi	r21, 0x3F	; 63
    2972:	59 83       	std	Y+1, r21	; 0x01
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <vfprintf+0x134>
    2976:	93 36       	cpi	r25, 0x63	; 99
    2978:	31 f0       	breq	.+12     	; 0x2986 <vfprintf+0x126>
    297a:	93 37       	cpi	r25, 0x73	; 115
    297c:	79 f0       	breq	.+30     	; 0x299c <vfprintf+0x13c>
    297e:	93 35       	cpi	r25, 0x53	; 83
    2980:	09 f0       	breq	.+2      	; 0x2984 <vfprintf+0x124>
    2982:	56 c0       	rjmp	.+172    	; 0x2a30 <vfprintf+0x1d0>
    2984:	20 c0       	rjmp	.+64     	; 0x29c6 <vfprintf+0x166>
    2986:	f5 01       	movw	r30, r10
    2988:	80 81       	ld	r24, Z
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	42 e0       	ldi	r20, 0x02	; 2
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	a4 0e       	add	r10, r20
    2992:	b5 1e       	adc	r11, r21
    2994:	61 01       	movw	r12, r2
    2996:	01 e0       	ldi	r16, 0x01	; 1
    2998:	10 e0       	ldi	r17, 0x00	; 0
    299a:	12 c0       	rjmp	.+36     	; 0x29c0 <vfprintf+0x160>
    299c:	f5 01       	movw	r30, r10
    299e:	c0 80       	ld	r12, Z
    29a0:	d1 80       	ldd	r13, Z+1	; 0x01
    29a2:	f6 fc       	sbrc	r15, 6
    29a4:	03 c0       	rjmp	.+6      	; 0x29ac <vfprintf+0x14c>
    29a6:	6f ef       	ldi	r22, 0xFF	; 255
    29a8:	7f ef       	ldi	r23, 0xFF	; 255
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <vfprintf+0x150>
    29ac:	69 2d       	mov	r22, r9
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	42 e0       	ldi	r20, 0x02	; 2
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	a4 0e       	add	r10, r20
    29b6:	b5 1e       	adc	r11, r21
    29b8:	c6 01       	movw	r24, r12
    29ba:	0e 94 18 16 	call	0x2c30	; 0x2c30 <strnlen>
    29be:	8c 01       	movw	r16, r24
    29c0:	5f e7       	ldi	r21, 0x7F	; 127
    29c2:	f5 22       	and	r15, r21
    29c4:	14 c0       	rjmp	.+40     	; 0x29ee <vfprintf+0x18e>
    29c6:	f5 01       	movw	r30, r10
    29c8:	c0 80       	ld	r12, Z
    29ca:	d1 80       	ldd	r13, Z+1	; 0x01
    29cc:	f6 fc       	sbrc	r15, 6
    29ce:	03 c0       	rjmp	.+6      	; 0x29d6 <vfprintf+0x176>
    29d0:	6f ef       	ldi	r22, 0xFF	; 255
    29d2:	7f ef       	ldi	r23, 0xFF	; 255
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <vfprintf+0x17a>
    29d6:	69 2d       	mov	r22, r9
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	42 e0       	ldi	r20, 0x02	; 2
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	a4 0e       	add	r10, r20
    29e0:	b5 1e       	adc	r11, r21
    29e2:	c6 01       	movw	r24, r12
    29e4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <strnlen_P>
    29e8:	8c 01       	movw	r16, r24
    29ea:	50 e8       	ldi	r21, 0x80	; 128
    29ec:	f5 2a       	or	r15, r21
    29ee:	f3 fe       	sbrs	r15, 3
    29f0:	07 c0       	rjmp	.+14     	; 0x2a00 <vfprintf+0x1a0>
    29f2:	1a c0       	rjmp	.+52     	; 0x2a28 <vfprintf+0x1c8>
    29f4:	80 e2       	ldi	r24, 0x20	; 32
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	b3 01       	movw	r22, r6
    29fa:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    29fe:	ea 94       	dec	r14
    2a00:	8e 2d       	mov	r24, r14
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	08 17       	cp	r16, r24
    2a06:	19 07       	cpc	r17, r25
    2a08:	a8 f3       	brcs	.-22     	; 0x29f4 <vfprintf+0x194>
    2a0a:	0e c0       	rjmp	.+28     	; 0x2a28 <vfprintf+0x1c8>
    2a0c:	f6 01       	movw	r30, r12
    2a0e:	f7 fc       	sbrc	r15, 7
    2a10:	85 91       	lpm	r24, Z+
    2a12:	f7 fe       	sbrs	r15, 7
    2a14:	81 91       	ld	r24, Z+
    2a16:	6f 01       	movw	r12, r30
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	b3 01       	movw	r22, r6
    2a1c:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    2a20:	e1 10       	cpse	r14, r1
    2a22:	ea 94       	dec	r14
    2a24:	01 50       	subi	r16, 0x01	; 1
    2a26:	10 40       	sbci	r17, 0x00	; 0
    2a28:	01 15       	cp	r16, r1
    2a2a:	11 05       	cpc	r17, r1
    2a2c:	79 f7       	brne	.-34     	; 0x2a0c <vfprintf+0x1ac>
    2a2e:	ea c0       	rjmp	.+468    	; 0x2c04 <vfprintf+0x3a4>
    2a30:	94 36       	cpi	r25, 0x64	; 100
    2a32:	11 f0       	breq	.+4      	; 0x2a38 <vfprintf+0x1d8>
    2a34:	99 36       	cpi	r25, 0x69	; 105
    2a36:	69 f5       	brne	.+90     	; 0x2a92 <vfprintf+0x232>
    2a38:	f7 fe       	sbrs	r15, 7
    2a3a:	08 c0       	rjmp	.+16     	; 0x2a4c <vfprintf+0x1ec>
    2a3c:	f5 01       	movw	r30, r10
    2a3e:	20 81       	ld	r18, Z
    2a40:	31 81       	ldd	r19, Z+1	; 0x01
    2a42:	42 81       	ldd	r20, Z+2	; 0x02
    2a44:	53 81       	ldd	r21, Z+3	; 0x03
    2a46:	84 e0       	ldi	r24, 0x04	; 4
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0a c0       	rjmp	.+20     	; 0x2a60 <vfprintf+0x200>
    2a4c:	f5 01       	movw	r30, r10
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	9c 01       	movw	r18, r24
    2a54:	44 27       	eor	r20, r20
    2a56:	37 fd       	sbrc	r19, 7
    2a58:	40 95       	com	r20
    2a5a:	54 2f       	mov	r21, r20
    2a5c:	82 e0       	ldi	r24, 0x02	; 2
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a8 0e       	add	r10, r24
    2a62:	b9 1e       	adc	r11, r25
    2a64:	9f e6       	ldi	r25, 0x6F	; 111
    2a66:	f9 22       	and	r15, r25
    2a68:	57 ff       	sbrs	r21, 7
    2a6a:	09 c0       	rjmp	.+18     	; 0x2a7e <vfprintf+0x21e>
    2a6c:	50 95       	com	r21
    2a6e:	40 95       	com	r20
    2a70:	30 95       	com	r19
    2a72:	21 95       	neg	r18
    2a74:	3f 4f       	sbci	r19, 0xFF	; 255
    2a76:	4f 4f       	sbci	r20, 0xFF	; 255
    2a78:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7a:	e0 e8       	ldi	r30, 0x80	; 128
    2a7c:	fe 2a       	or	r15, r30
    2a7e:	ca 01       	movw	r24, r20
    2a80:	b9 01       	movw	r22, r18
    2a82:	a1 01       	movw	r20, r2
    2a84:	2a e0       	ldi	r18, 0x0A	; 10
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__ultoa_invert>
    2a8c:	d8 2e       	mov	r13, r24
    2a8e:	d2 18       	sub	r13, r2
    2a90:	40 c0       	rjmp	.+128    	; 0x2b12 <vfprintf+0x2b2>
    2a92:	95 37       	cpi	r25, 0x75	; 117
    2a94:	29 f4       	brne	.+10     	; 0x2aa0 <vfprintf+0x240>
    2a96:	1f 2d       	mov	r17, r15
    2a98:	1f 7e       	andi	r17, 0xEF	; 239
    2a9a:	2a e0       	ldi	r18, 0x0A	; 10
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	1d c0       	rjmp	.+58     	; 0x2ada <vfprintf+0x27a>
    2aa0:	1f 2d       	mov	r17, r15
    2aa2:	19 7f       	andi	r17, 0xF9	; 249
    2aa4:	9f 36       	cpi	r25, 0x6F	; 111
    2aa6:	61 f0       	breq	.+24     	; 0x2ac0 <vfprintf+0x260>
    2aa8:	90 37       	cpi	r25, 0x70	; 112
    2aaa:	20 f4       	brcc	.+8      	; 0x2ab4 <vfprintf+0x254>
    2aac:	98 35       	cpi	r25, 0x58	; 88
    2aae:	09 f0       	breq	.+2      	; 0x2ab2 <vfprintf+0x252>
    2ab0:	ac c0       	rjmp	.+344    	; 0x2c0a <vfprintf+0x3aa>
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <vfprintf+0x272>
    2ab4:	90 37       	cpi	r25, 0x70	; 112
    2ab6:	39 f0       	breq	.+14     	; 0x2ac6 <vfprintf+0x266>
    2ab8:	98 37       	cpi	r25, 0x78	; 120
    2aba:	09 f0       	breq	.+2      	; 0x2abe <vfprintf+0x25e>
    2abc:	a6 c0       	rjmp	.+332    	; 0x2c0a <vfprintf+0x3aa>
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <vfprintf+0x268>
    2ac0:	28 e0       	ldi	r18, 0x08	; 8
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	0a c0       	rjmp	.+20     	; 0x2ada <vfprintf+0x27a>
    2ac6:	10 61       	ori	r17, 0x10	; 16
    2ac8:	14 fd       	sbrc	r17, 4
    2aca:	14 60       	ori	r17, 0x04	; 4
    2acc:	20 e1       	ldi	r18, 0x10	; 16
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	04 c0       	rjmp	.+8      	; 0x2ada <vfprintf+0x27a>
    2ad2:	14 fd       	sbrc	r17, 4
    2ad4:	16 60       	ori	r17, 0x06	; 6
    2ad6:	20 e1       	ldi	r18, 0x10	; 16
    2ad8:	32 e0       	ldi	r19, 0x02	; 2
    2ada:	17 ff       	sbrs	r17, 7
    2adc:	08 c0       	rjmp	.+16     	; 0x2aee <vfprintf+0x28e>
    2ade:	f5 01       	movw	r30, r10
    2ae0:	60 81       	ld	r22, Z
    2ae2:	71 81       	ldd	r23, Z+1	; 0x01
    2ae4:	82 81       	ldd	r24, Z+2	; 0x02
    2ae6:	93 81       	ldd	r25, Z+3	; 0x03
    2ae8:	44 e0       	ldi	r20, 0x04	; 4
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	08 c0       	rjmp	.+16     	; 0x2afe <vfprintf+0x29e>
    2aee:	f5 01       	movw	r30, r10
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	bc 01       	movw	r22, r24
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	42 e0       	ldi	r20, 0x02	; 2
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	a4 0e       	add	r10, r20
    2b00:	b5 1e       	adc	r11, r21
    2b02:	a1 01       	movw	r20, r2
    2b04:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__ultoa_invert>
    2b08:	d8 2e       	mov	r13, r24
    2b0a:	d2 18       	sub	r13, r2
    2b0c:	8f e7       	ldi	r24, 0x7F	; 127
    2b0e:	f8 2e       	mov	r15, r24
    2b10:	f1 22       	and	r15, r17
    2b12:	f6 fe       	sbrs	r15, 6
    2b14:	0b c0       	rjmp	.+22     	; 0x2b2c <vfprintf+0x2cc>
    2b16:	5e ef       	ldi	r21, 0xFE	; 254
    2b18:	f5 22       	and	r15, r21
    2b1a:	d9 14       	cp	r13, r9
    2b1c:	38 f4       	brcc	.+14     	; 0x2b2c <vfprintf+0x2cc>
    2b1e:	f4 fe       	sbrs	r15, 4
    2b20:	07 c0       	rjmp	.+14     	; 0x2b30 <vfprintf+0x2d0>
    2b22:	f2 fc       	sbrc	r15, 2
    2b24:	05 c0       	rjmp	.+10     	; 0x2b30 <vfprintf+0x2d0>
    2b26:	8f ee       	ldi	r24, 0xEF	; 239
    2b28:	f8 22       	and	r15, r24
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <vfprintf+0x2d0>
    2b2c:	1d 2d       	mov	r17, r13
    2b2e:	01 c0       	rjmp	.+2      	; 0x2b32 <vfprintf+0x2d2>
    2b30:	19 2d       	mov	r17, r9
    2b32:	f4 fe       	sbrs	r15, 4
    2b34:	0d c0       	rjmp	.+26     	; 0x2b50 <vfprintf+0x2f0>
    2b36:	fe 01       	movw	r30, r28
    2b38:	ed 0d       	add	r30, r13
    2b3a:	f1 1d       	adc	r31, r1
    2b3c:	80 81       	ld	r24, Z
    2b3e:	80 33       	cpi	r24, 0x30	; 48
    2b40:	19 f4       	brne	.+6      	; 0x2b48 <vfprintf+0x2e8>
    2b42:	99 ee       	ldi	r25, 0xE9	; 233
    2b44:	f9 22       	and	r15, r25
    2b46:	08 c0       	rjmp	.+16     	; 0x2b58 <vfprintf+0x2f8>
    2b48:	1f 5f       	subi	r17, 0xFF	; 255
    2b4a:	f2 fe       	sbrs	r15, 2
    2b4c:	05 c0       	rjmp	.+10     	; 0x2b58 <vfprintf+0x2f8>
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <vfprintf+0x2f6>
    2b50:	8f 2d       	mov	r24, r15
    2b52:	86 78       	andi	r24, 0x86	; 134
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <vfprintf+0x2f8>
    2b56:	1f 5f       	subi	r17, 0xFF	; 255
    2b58:	0f 2d       	mov	r16, r15
    2b5a:	f3 fc       	sbrc	r15, 3
    2b5c:	14 c0       	rjmp	.+40     	; 0x2b86 <vfprintf+0x326>
    2b5e:	f0 fe       	sbrs	r15, 0
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <vfprintf+0x320>
    2b62:	1e 15       	cp	r17, r14
    2b64:	10 f0       	brcs	.+4      	; 0x2b6a <vfprintf+0x30a>
    2b66:	9d 2c       	mov	r9, r13
    2b68:	0b c0       	rjmp	.+22     	; 0x2b80 <vfprintf+0x320>
    2b6a:	9d 2c       	mov	r9, r13
    2b6c:	9e 0c       	add	r9, r14
    2b6e:	91 1a       	sub	r9, r17
    2b70:	1e 2d       	mov	r17, r14
    2b72:	06 c0       	rjmp	.+12     	; 0x2b80 <vfprintf+0x320>
    2b74:	80 e2       	ldi	r24, 0x20	; 32
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	b3 01       	movw	r22, r6
    2b7a:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    2b7e:	1f 5f       	subi	r17, 0xFF	; 255
    2b80:	1e 15       	cp	r17, r14
    2b82:	c0 f3       	brcs	.-16     	; 0x2b74 <vfprintf+0x314>
    2b84:	04 c0       	rjmp	.+8      	; 0x2b8e <vfprintf+0x32e>
    2b86:	1e 15       	cp	r17, r14
    2b88:	10 f4       	brcc	.+4      	; 0x2b8e <vfprintf+0x32e>
    2b8a:	e1 1a       	sub	r14, r17
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <vfprintf+0x330>
    2b8e:	ee 24       	eor	r14, r14
    2b90:	04 ff       	sbrs	r16, 4
    2b92:	0f c0       	rjmp	.+30     	; 0x2bb2 <vfprintf+0x352>
    2b94:	80 e3       	ldi	r24, 0x30	; 48
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	b3 01       	movw	r22, r6
    2b9a:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    2b9e:	02 ff       	sbrs	r16, 2
    2ba0:	1d c0       	rjmp	.+58     	; 0x2bdc <vfprintf+0x37c>
    2ba2:	01 fd       	sbrc	r16, 1
    2ba4:	03 c0       	rjmp	.+6      	; 0x2bac <vfprintf+0x34c>
    2ba6:	88 e7       	ldi	r24, 0x78	; 120
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e c0       	rjmp	.+28     	; 0x2bc8 <vfprintf+0x368>
    2bac:	88 e5       	ldi	r24, 0x58	; 88
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0b c0       	rjmp	.+22     	; 0x2bc8 <vfprintf+0x368>
    2bb2:	80 2f       	mov	r24, r16
    2bb4:	86 78       	andi	r24, 0x86	; 134
    2bb6:	91 f0       	breq	.+36     	; 0x2bdc <vfprintf+0x37c>
    2bb8:	01 ff       	sbrs	r16, 1
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <vfprintf+0x360>
    2bbc:	8b e2       	ldi	r24, 0x2B	; 43
    2bbe:	01 c0       	rjmp	.+2      	; 0x2bc2 <vfprintf+0x362>
    2bc0:	80 e2       	ldi	r24, 0x20	; 32
    2bc2:	f7 fc       	sbrc	r15, 7
    2bc4:	8d e2       	ldi	r24, 0x2D	; 45
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	b3 01       	movw	r22, r6
    2bca:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    2bce:	06 c0       	rjmp	.+12     	; 0x2bdc <vfprintf+0x37c>
    2bd0:	80 e3       	ldi	r24, 0x30	; 48
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	b3 01       	movw	r22, r6
    2bd6:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    2bda:	9a 94       	dec	r9
    2bdc:	d9 14       	cp	r13, r9
    2bde:	c0 f3       	brcs	.-16     	; 0x2bd0 <vfprintf+0x370>
    2be0:	da 94       	dec	r13
    2be2:	f1 01       	movw	r30, r2
    2be4:	ed 0d       	add	r30, r13
    2be6:	f1 1d       	adc	r31, r1
    2be8:	80 81       	ld	r24, Z
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	b3 01       	movw	r22, r6
    2bee:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    2bf2:	dd 20       	and	r13, r13
    2bf4:	a9 f7       	brne	.-22     	; 0x2be0 <vfprintf+0x380>
    2bf6:	06 c0       	rjmp	.+12     	; 0x2c04 <vfprintf+0x3a4>
    2bf8:	80 e2       	ldi	r24, 0x20	; 32
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	b3 01       	movw	r22, r6
    2bfe:	0e 94 23 16 	call	0x2c46	; 0x2c46 <fputc>
    2c02:	ea 94       	dec	r14
    2c04:	ee 20       	and	r14, r14
    2c06:	c1 f7       	brne	.-16     	; 0x2bf8 <vfprintf+0x398>
    2c08:	43 ce       	rjmp	.-890    	; 0x2890 <vfprintf+0x30>
    2c0a:	f3 01       	movw	r30, r6
    2c0c:	66 81       	ldd	r22, Z+6	; 0x06
    2c0e:	77 81       	ldd	r23, Z+7	; 0x07
    2c10:	cb 01       	movw	r24, r22
    2c12:	2b 96       	adiw	r28, 0x0b	; 11
    2c14:	e2 e1       	ldi	r30, 0x12	; 18
    2c16:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__epilogue_restores__>

00002c1a <strnlen_P>:
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	05 90       	lpm	r0, Z+
    2c1e:	61 50       	subi	r22, 0x01	; 1
    2c20:	70 40       	sbci	r23, 0x00	; 0
    2c22:	01 10       	cpse	r0, r1
    2c24:	d8 f7       	brcc	.-10     	; 0x2c1c <strnlen_P+0x2>
    2c26:	80 95       	com	r24
    2c28:	90 95       	com	r25
    2c2a:	8e 0f       	add	r24, r30
    2c2c:	9f 1f       	adc	r25, r31
    2c2e:	08 95       	ret

00002c30 <strnlen>:
    2c30:	fc 01       	movw	r30, r24
    2c32:	61 50       	subi	r22, 0x01	; 1
    2c34:	70 40       	sbci	r23, 0x00	; 0
    2c36:	01 90       	ld	r0, Z+
    2c38:	01 10       	cpse	r0, r1
    2c3a:	d8 f7       	brcc	.-10     	; 0x2c32 <strnlen+0x2>
    2c3c:	80 95       	com	r24
    2c3e:	90 95       	com	r25
    2c40:	8e 0f       	add	r24, r30
    2c42:	9f 1f       	adc	r25, r31
    2c44:	08 95       	ret

00002c46 <fputc>:
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	8c 01       	movw	r16, r24
    2c50:	eb 01       	movw	r28, r22
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	81 ff       	sbrs	r24, 1
    2c56:	1b c0       	rjmp	.+54     	; 0x2c8e <fputc+0x48>
    2c58:	82 ff       	sbrs	r24, 2
    2c5a:	0d c0       	rjmp	.+26     	; 0x2c76 <fputc+0x30>
    2c5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2c60:	8c 81       	ldd	r24, Y+4	; 0x04
    2c62:	9d 81       	ldd	r25, Y+5	; 0x05
    2c64:	28 17       	cp	r18, r24
    2c66:	39 07       	cpc	r19, r25
    2c68:	64 f4       	brge	.+24     	; 0x2c82 <fputc+0x3c>
    2c6a:	e8 81       	ld	r30, Y
    2c6c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c6e:	01 93       	st	Z+, r16
    2c70:	f9 83       	std	Y+1, r31	; 0x01
    2c72:	e8 83       	st	Y, r30
    2c74:	06 c0       	rjmp	.+12     	; 0x2c82 <fputc+0x3c>
    2c76:	e8 85       	ldd	r30, Y+8	; 0x08
    2c78:	f9 85       	ldd	r31, Y+9	; 0x09
    2c7a:	80 2f       	mov	r24, r16
    2c7c:	09 95       	icall
    2c7e:	89 2b       	or	r24, r25
    2c80:	31 f4       	brne	.+12     	; 0x2c8e <fputc+0x48>
    2c82:	8e 81       	ldd	r24, Y+6	; 0x06
    2c84:	9f 81       	ldd	r25, Y+7	; 0x07
    2c86:	01 96       	adiw	r24, 0x01	; 1
    2c88:	9f 83       	std	Y+7, r25	; 0x07
    2c8a:	8e 83       	std	Y+6, r24	; 0x06
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <fputc+0x4c>
    2c8e:	0f ef       	ldi	r16, 0xFF	; 255
    2c90:	1f ef       	ldi	r17, 0xFF	; 255
    2c92:	c8 01       	movw	r24, r16
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	08 95       	ret

00002c9e <__ultoa_invert>:
    2c9e:	fa 01       	movw	r30, r20
    2ca0:	aa 27       	eor	r26, r26
    2ca2:	28 30       	cpi	r18, 0x08	; 8
    2ca4:	51 f1       	breq	.+84     	; 0x2cfa <__ultoa_invert+0x5c>
    2ca6:	20 31       	cpi	r18, 0x10	; 16
    2ca8:	81 f1       	breq	.+96     	; 0x2d0a <__ultoa_invert+0x6c>
    2caa:	e8 94       	clt
    2cac:	6f 93       	push	r22
    2cae:	6e 7f       	andi	r22, 0xFE	; 254
    2cb0:	6e 5f       	subi	r22, 0xFE	; 254
    2cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb8:	af 4f       	sbci	r26, 0xFF	; 255
    2cba:	b1 e0       	ldi	r27, 0x01	; 1
    2cbc:	3e d0       	rcall	.+124    	; 0x2d3a <__ultoa_invert+0x9c>
    2cbe:	b4 e0       	ldi	r27, 0x04	; 4
    2cc0:	3c d0       	rcall	.+120    	; 0x2d3a <__ultoa_invert+0x9c>
    2cc2:	67 0f       	add	r22, r23
    2cc4:	78 1f       	adc	r23, r24
    2cc6:	89 1f       	adc	r24, r25
    2cc8:	9a 1f       	adc	r25, r26
    2cca:	a1 1d       	adc	r26, r1
    2ccc:	68 0f       	add	r22, r24
    2cce:	79 1f       	adc	r23, r25
    2cd0:	8a 1f       	adc	r24, r26
    2cd2:	91 1d       	adc	r25, r1
    2cd4:	a1 1d       	adc	r26, r1
    2cd6:	6a 0f       	add	r22, r26
    2cd8:	71 1d       	adc	r23, r1
    2cda:	81 1d       	adc	r24, r1
    2cdc:	91 1d       	adc	r25, r1
    2cde:	a1 1d       	adc	r26, r1
    2ce0:	20 d0       	rcall	.+64     	; 0x2d22 <__ultoa_invert+0x84>
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <__ultoa_invert+0x48>
    2ce4:	68 94       	set
    2ce6:	3f 91       	pop	r19
    2ce8:	2a e0       	ldi	r18, 0x0A	; 10
    2cea:	26 9f       	mul	r18, r22
    2cec:	11 24       	eor	r1, r1
    2cee:	30 19       	sub	r19, r0
    2cf0:	30 5d       	subi	r19, 0xD0	; 208
    2cf2:	31 93       	st	Z+, r19
    2cf4:	de f6       	brtc	.-74     	; 0x2cac <__ultoa_invert+0xe>
    2cf6:	cf 01       	movw	r24, r30
    2cf8:	08 95       	ret
    2cfa:	46 2f       	mov	r20, r22
    2cfc:	47 70       	andi	r20, 0x07	; 7
    2cfe:	40 5d       	subi	r20, 0xD0	; 208
    2d00:	41 93       	st	Z+, r20
    2d02:	b3 e0       	ldi	r27, 0x03	; 3
    2d04:	0f d0       	rcall	.+30     	; 0x2d24 <__ultoa_invert+0x86>
    2d06:	c9 f7       	brne	.-14     	; 0x2cfa <__ultoa_invert+0x5c>
    2d08:	f6 cf       	rjmp	.-20     	; 0x2cf6 <__ultoa_invert+0x58>
    2d0a:	46 2f       	mov	r20, r22
    2d0c:	4f 70       	andi	r20, 0x0F	; 15
    2d0e:	40 5d       	subi	r20, 0xD0	; 208
    2d10:	4a 33       	cpi	r20, 0x3A	; 58
    2d12:	18 f0       	brcs	.+6      	; 0x2d1a <__ultoa_invert+0x7c>
    2d14:	49 5d       	subi	r20, 0xD9	; 217
    2d16:	31 fd       	sbrc	r19, 1
    2d18:	40 52       	subi	r20, 0x20	; 32
    2d1a:	41 93       	st	Z+, r20
    2d1c:	02 d0       	rcall	.+4      	; 0x2d22 <__ultoa_invert+0x84>
    2d1e:	a9 f7       	brne	.-22     	; 0x2d0a <__ultoa_invert+0x6c>
    2d20:	ea cf       	rjmp	.-44     	; 0x2cf6 <__ultoa_invert+0x58>
    2d22:	b4 e0       	ldi	r27, 0x04	; 4
    2d24:	a6 95       	lsr	r26
    2d26:	97 95       	ror	r25
    2d28:	87 95       	ror	r24
    2d2a:	77 95       	ror	r23
    2d2c:	67 95       	ror	r22
    2d2e:	ba 95       	dec	r27
    2d30:	c9 f7       	brne	.-14     	; 0x2d24 <__ultoa_invert+0x86>
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	61 05       	cpc	r22, r1
    2d36:	71 05       	cpc	r23, r1
    2d38:	08 95       	ret
    2d3a:	9b 01       	movw	r18, r22
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	0a 2e       	mov	r0, r26
    2d40:	06 94       	lsr	r0
    2d42:	57 95       	ror	r21
    2d44:	47 95       	ror	r20
    2d46:	37 95       	ror	r19
    2d48:	27 95       	ror	r18
    2d4a:	ba 95       	dec	r27
    2d4c:	c9 f7       	brne	.-14     	; 0x2d40 <__ultoa_invert+0xa2>
    2d4e:	62 0f       	add	r22, r18
    2d50:	73 1f       	adc	r23, r19
    2d52:	84 1f       	adc	r24, r20
    2d54:	95 1f       	adc	r25, r21
    2d56:	a0 1d       	adc	r26, r0
    2d58:	08 95       	ret

00002d5a <_exit>:
    2d5a:	f8 94       	cli

00002d5c <__stop_program>:
    2d5c:	ff cf       	rjmp	.-2      	; 0x2d5c <__stop_program>
