
U7_sec1_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001b0  2**0
                  ALLOC
  2 .stab         000001a4  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000252  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  74:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GPIO_init>:
#define DDRB  (*(volatile unsigned char*)0x37)
#define PORTB  (*(volatile unsigned char*)0x38)
#define PINB  (*(volatile unsigned char*)0x36)

void GPIO_init()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	// set direction of PA pins output
	DDRA |= 0b11111111 ;
  86:	ea e3       	ldi	r30, 0x3A	; 58
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	ea e3       	ldi	r30, 0x3A	; 58
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24

	// set pin0 PB input
	DDRB &= ~(1<<0);
  94:	a7 e3       	ldi	r26, 0x37	; 55
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	e7 e3       	ldi	r30, 0x37	; 55
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8c 93       	st	X, r24

}
  a2:	0f 90       	pop	r0
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	08 95       	ret

000000aa <main>:

// counter to Led
unsigned int counter ;
int main()
{
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	GPIO_init();
  b2:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_init>
	while(1)
	{
		if(READ_BIT(PINB , 0))
  b6:	e6 e3       	ldi	r30, 0x36	; 54
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	81 70       	andi	r24, 0x01	; 1
  c2:	90 70       	andi	r25, 0x00	; 0
  c4:	88 23       	and	r24, r24
  c6:	b9 f3       	breq	.-18     	; 0xb6 <main+0xc>
		{
			counter++;
  c8:	80 91 60 00 	lds	r24, 0x0060
  cc:	90 91 61 00 	lds	r25, 0x0061
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	90 93 61 00 	sts	0x0061, r25
  d6:	80 93 60 00 	sts	0x0060, r24
			if(counter == 9)
  da:	80 91 60 00 	lds	r24, 0x0060
  de:	90 91 61 00 	lds	r25, 0x0061
  e2:	89 30       	cpi	r24, 0x09	; 9
  e4:	91 05       	cpc	r25, r1
  e6:	41 f4       	brne	.+16     	; 0xf8 <main+0x4e>
			{
				PORTA = 0;
  e8:	eb e3       	ldi	r30, 0x3B	; 59
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
				counter =0;
  ee:	10 92 61 00 	sts	0x0061, r1
  f2:	10 92 60 00 	sts	0x0060, r1
  f6:	16 c0       	rjmp	.+44     	; 0x124 <main+0x7a>
			}
			else
			SET_BIT(PORTA,counter-1);
  f8:	ab e3       	ldi	r26, 0x3B	; 59
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	eb e3       	ldi	r30, 0x3B	; 59
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	48 2f       	mov	r20, r24
 104:	80 91 60 00 	lds	r24, 0x0060
 108:	90 91 61 00 	lds	r25, 0x0061
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	9c 01       	movw	r18, r24
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x72>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <main+0x6e>
 120:	84 2b       	or	r24, r20
 122:	8c 93       	st	X, r24
			while(READ_BIT(PINB , 0));
 124:	e6 e3       	ldi	r30, 0x36	; 54
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	90 70       	andi	r25, 0x00	; 0
 132:	88 23       	and	r24, r24
 134:	b9 f7       	brne	.-18     	; 0x124 <main+0x7a>
 136:	bf cf       	rjmp	.-130    	; 0xb6 <main+0xc>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
