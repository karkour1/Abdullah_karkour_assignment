
USART_Atmega32_Teest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002ab8  00002b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800182  00800182  00002c6e  2**0
                  ALLOC
  3 .stab         00001b0c  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe3  00000000  00000000  0000477c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000575f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000058df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00005ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00007ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00008c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00009dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a943  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__vector_13>
      38:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_14>
      3c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <main>
      8a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ee 57       	subi	r30, 0x7E	; 126
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <USART_ReadUCSRC>:
/*The read access is controlled by a timed sequence. Reading the I/O location once returns the UBRRH Register contents.
 * If the register location was read in previous system clock cycle,
 *  reading the register in the current clock cycle will return the UCSRCcontents */

uint8_t USART_ReadUCSRC( void )
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	uint8_t ucsrc;
	/* Read UCSRC */
	ucsrc = UBRRH;
     ce0:	e0 e4       	ldi	r30, 0x40	; 64
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	89 83       	std	Y+1, r24	; 0x01
	ucsrc = UCSRC;
     ce8:	e0 e4       	ldi	r30, 0x40	; 64
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	89 83       	std	Y+1, r24	; 0x01
	return ucsrc;
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <Send_Data>:
void Send_Data(uint16_t* data)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <Send_Data+0x6>
     d00:	00 d0       	rcall	.+0      	; 0xd02 <Send_Data+0x8>
     d02:	0f 92       	push	r0
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01
	if(G_usart_cnfg->data_bits == USART_DataBit_9bits)
     d0c:	e0 91 82 01 	lds	r30, 0x0182
     d10:	f0 91 83 01 	lds	r31, 0x0183
     d14:	81 85       	ldd	r24, Z+9	; 0x09
     d16:	87 30       	cpi	r24, 0x07	; 7
     d18:	61 f5       	brne	.+88     	; 0xd72 <Send_Data+0x78>
	{
		/* Copy 9th bit to TXB8 */
		UCSRB &= ~(1<<TXB8);
     d1a:	aa e2       	ldi	r26, 0x2A	; 42
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ea e2       	ldi	r30, 0x2A	; 42
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	8c 93       	st	X, r24
		UCSRB = ( *data & 0x0100 )? UCSRB|(1<<TXB8): UCSRB&(~(1<<TXB8));
     d28:	8a e2       	ldi	r24, 0x2A	; 42
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9d 83       	std	Y+5, r25	; 0x05
     d2e:	8c 83       	std	Y+4, r24	; 0x04
     d30:	e9 81       	ldd	r30, Y+1	; 0x01
     d32:	fa 81       	ldd	r31, Y+2	; 0x02
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	80 70       	andi	r24, 0x00	; 0
     d3a:	91 70       	andi	r25, 0x01	; 1
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	39 f0       	breq	.+14     	; 0xd4e <Send_Data+0x54>
     d40:	ea e2       	ldi	r30, 0x2A	; 42
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	98 2f       	mov	r25, r24
     d48:	91 60       	ori	r25, 0x01	; 1
     d4a:	9b 83       	std	Y+3, r25	; 0x03
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <Send_Data+0x60>
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	e8 2f       	mov	r30, r24
     d56:	ee 7f       	andi	r30, 0xFE	; 254
     d58:	eb 83       	std	Y+3, r30	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	ec 81       	ldd	r30, Y+4	; 0x04
     d5e:	fd 81       	ldd	r31, Y+5	; 0x05
     d60:	80 83       	st	Z, r24

		/* Put data into buffer, sends the data */
		UDR = *data;
     d62:	ac e2       	ldi	r26, 0x2C	; 44
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e9 81       	ldd	r30, Y+1	; 0x01
     d68:	fa 81       	ldd	r31, Y+2	; 0x02
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	8c 93       	st	X, r24
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <Send_Data+0x86>
	}
	else
	{
		/* Put data into buffer, sends the data */
		UDR = *data;
     d72:	ac e2       	ldi	r26, 0x2C	; 44
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e9 81       	ldd	r30, Y+1	; 0x01
     d78:	fa 81       	ldd	r31, Y+2	; 0x02
     d7a:	80 81       	ld	r24, Z
     d7c:	91 81       	ldd	r25, Z+1	; 0x01
     d7e:	8c 93       	st	X, r24
	}
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <RXC_CallBack>:
void RXC_CallBack(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62

}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <TXC_CallBack>:
void TXC_CallBack(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62

}
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <UDRIE_CallBack>:
void UDRIE_CallBack(void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	/* Disable  Interrupt */
	UCSRB &= ~(USART_IRQ_Enable_UDRIE);
     db4:	aa e2       	ldi	r26, 0x2A	; 42
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	ea e2       	ldi	r30, 0x2A	; 42
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 7d       	andi	r24, 0xDF	; 223
     dc0:	8c 93       	st	X, r24
	Send_Data(&Data);
     dc2:	8a e8       	ldi	r24, 0x8A	; 138
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Send_Data>

}
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <MCAL_USART_Init>:

/* APIS */
void MCAL_USART_Init(USART_Config_t* usart_cnfg)
{
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	2a 97       	sbiw	r28, 0x0a	; 10
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
	G_usart_cnfg = usart_cnfg;
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	90 93 83 01 	sts	0x0183, r25
     df8:	80 93 82 01 	sts	0x0182, r24
	/* Set baud rate */
	uint16_t baud =0 ;
     dfc:	1a 82       	std	Y+2, r1	; 0x02
     dfe:	19 82       	std	Y+1, r1	; 0x01
	if(usart_cnfg->Mode == USART_Normal_Mode)
     e00:	eb 81       	ldd	r30, Y+3	; 0x03
     e02:	fc 81       	ldd	r31, Y+4	; 0x04
     e04:	80 85       	ldd	r24, Z+8	; 0x08
     e06:	88 23       	and	r24, r24
     e08:	79 f5       	brne	.+94     	; 0xe68 <MCAL_USART_Init+0x98>
	{
		UCSRA &= ~(1<<U2X);
     e0a:	ab e2       	ldi	r26, 0x2B	; 43
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e2       	ldi	r30, 0x2B	; 43
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8d 7f       	andi	r24, 0xFD	; 253
     e16:	8c 93       	st	X, r24
		baud = (usart_cnfg->Fosc /(16*usart_cnfg->BaudRate))-1;
     e18:	eb 81       	ldd	r30, Y+3	; 0x03
     e1a:	fc 81       	ldd	r31, Y+4	; 0x04
     e1c:	e0 80       	ld	r14, Z
     e1e:	f1 80       	ldd	r15, Z+1	; 0x01
     e20:	02 81       	ldd	r16, Z+2	; 0x02
     e22:	13 81       	ldd	r17, Z+3	; 0x03
     e24:	eb 81       	ldd	r30, Y+3	; 0x03
     e26:	fc 81       	ldd	r31, Y+4	; 0x04
     e28:	84 81       	ldd	r24, Z+4	; 0x04
     e2a:	95 81       	ldd	r25, Z+5	; 0x05
     e2c:	a6 81       	ldd	r26, Z+6	; 0x06
     e2e:	b7 81       	ldd	r27, Z+7	; 0x07
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	aa 1f       	adc	r26, r26
     e36:	bb 1f       	adc	r27, r27
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	aa 1f       	adc	r26, r26
     e3e:	bb 1f       	adc	r27, r27
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	aa 1f       	adc	r26, r26
     e46:	bb 1f       	adc	r27, r27
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	aa 1f       	adc	r26, r26
     e4e:	bb 1f       	adc	r27, r27
     e50:	9c 01       	movw	r18, r24
     e52:	ad 01       	movw	r20, r26
     e54:	c8 01       	movw	r24, r16
     e56:	b7 01       	movw	r22, r14
     e58:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__udivmodsi4>
     e5c:	da 01       	movw	r26, r20
     e5e:	c9 01       	movw	r24, r18
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	2f c0       	rjmp	.+94     	; 0xec6 <MCAL_USART_Init+0xf6>
	}
	else if (usart_cnfg->Mode == USART_Double_Speed_Mode)
     e68:	eb 81       	ldd	r30, Y+3	; 0x03
     e6a:	fc 81       	ldd	r31, Y+4	; 0x04
     e6c:	80 85       	ldd	r24, Z+8	; 0x08
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	51 f5       	brne	.+84     	; 0xec6 <MCAL_USART_Init+0xf6>
	{
		UCSRA |= (1<<U2X);
     e72:	ab e2       	ldi	r26, 0x2B	; 43
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	eb e2       	ldi	r30, 0x2B	; 43
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	8c 93       	st	X, r24
		baud = (usart_cnfg->Fosc /(8*usart_cnfg->BaudRate))-1;
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	e0 80       	ld	r14, Z
     e86:	f1 80       	ldd	r15, Z+1	; 0x01
     e88:	02 81       	ldd	r16, Z+2	; 0x02
     e8a:	13 81       	ldd	r17, Z+3	; 0x03
     e8c:	eb 81       	ldd	r30, Y+3	; 0x03
     e8e:	fc 81       	ldd	r31, Y+4	; 0x04
     e90:	84 81       	ldd	r24, Z+4	; 0x04
     e92:	95 81       	ldd	r25, Z+5	; 0x05
     e94:	a6 81       	ldd	r26, Z+6	; 0x06
     e96:	b7 81       	ldd	r27, Z+7	; 0x07
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	aa 1f       	adc	r26, r26
     e9e:	bb 1f       	adc	r27, r27
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	aa 1f       	adc	r26, r26
     ea6:	bb 1f       	adc	r27, r27
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	aa 1f       	adc	r26, r26
     eae:	bb 1f       	adc	r27, r27
     eb0:	9c 01       	movw	r18, r24
     eb2:	ad 01       	movw	r20, r26
     eb4:	c8 01       	movw	r24, r16
     eb6:	b7 01       	movw	r22, r14
     eb8:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__udivmodsi4>
     ebc:	da 01       	movw	r26, r20
     ebe:	c9 01       	movw	r24, r18
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
	}
	UCSRC= USART_ReadUCSRC()&(~(1<<URSEL));
     ec6:	00 e4       	ldi	r16, 0x40	; 64
     ec8:	10 e0       	ldi	r17, 0x00	; 0
     eca:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     ece:	8f 77       	andi	r24, 0x7F	; 127
     ed0:	f8 01       	movw	r30, r16
     ed2:	80 83       	st	Z, r24
	UBRRH = (uint8_t)(baud>>8);
     ed4:	e0 e4       	ldi	r30, 0x40	; 64
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	89 2f       	mov	r24, r25
     ede:	99 27       	eor	r25, r25
     ee0:	80 83       	st	Z, r24
	UBRRL = (uint8_t)baud;
     ee2:	e9 e2       	ldi	r30, 0x29	; 41
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	80 83       	st	Z, r24

	/* Set frame format: Bits of data, Number of stop bit , Parity Mode */
	UCSRC= USART_ReadUCSRC()|(1<<URSEL);
     eea:	00 e4       	ldi	r16, 0x40	; 64
     eec:	10 e0       	ldi	r17, 0x00	; 0
     eee:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	f8 01       	movw	r30, r16
     ef6:	80 83       	st	Z, r24

	UCSRC = USART_ReadUCSRC()|((usart_cnfg->data_bits & 0x03)<<UCSZ0);
     ef8:	00 e4       	ldi	r16, 0x40	; 64
     efa:	10 e0       	ldi	r17, 0x00	; 0
     efc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     f00:	28 2f       	mov	r18, r24
     f02:	eb 81       	ldd	r30, Y+3	; 0x03
     f04:	fc 81       	ldd	r31, Y+4	; 0x04
     f06:	81 85       	ldd	r24, Z+9	; 0x09
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	83 70       	andi	r24, 0x03	; 3
     f0e:	90 70       	andi	r25, 0x00	; 0
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	82 2b       	or	r24, r18
     f16:	f8 01       	movw	r30, r16
     f18:	80 83       	st	Z, r24
	UCSRB = (usart_cnfg->data_bits>>2)? (UCSRB|(1<<UCSZ2)): (UCSRB& (~(1<<UCSZ2)));
     f1a:	8a e2       	ldi	r24, 0x2A	; 42
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9a 87       	std	Y+10, r25	; 0x0a
     f20:	89 87       	std	Y+9, r24	; 0x09
     f22:	eb 81       	ldd	r30, Y+3	; 0x03
     f24:	fc 81       	ldd	r31, Y+4	; 0x04
     f26:	81 85       	ldd	r24, Z+9	; 0x09
     f28:	86 95       	lsr	r24
     f2a:	86 95       	lsr	r24
     f2c:	88 23       	and	r24, r24
     f2e:	39 f0       	breq	.+14     	; 0xf3e <MCAL_USART_Init+0x16e>
     f30:	ea e2       	ldi	r30, 0x2A	; 42
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	98 2f       	mov	r25, r24
     f38:	94 60       	ori	r25, 0x04	; 4
     f3a:	98 87       	std	Y+8, r25	; 0x08
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <MCAL_USART_Init+0x17a>
     f3e:	ea e2       	ldi	r30, 0x2A	; 42
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	e8 2f       	mov	r30, r24
     f46:	eb 7f       	andi	r30, 0xFB	; 251
     f48:	e8 87       	std	Y+8, r30	; 0x08
     f4a:	88 85       	ldd	r24, Y+8	; 0x08
     f4c:	e9 85       	ldd	r30, Y+9	; 0x09
     f4e:	fa 85       	ldd	r31, Y+10	; 0x0a
     f50:	80 83       	st	Z, r24

	UCSRC = (usart_cnfg->Stop_bits)? (USART_ReadUCSRC()|(1<<USBS)) : (USART_ReadUCSRC()& (~(1<<USBS)));
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	ff 83       	std	Y+7, r31	; 0x07
     f58:	ee 83       	std	Y+6, r30	; 0x06
     f5a:	eb 81       	ldd	r30, Y+3	; 0x03
     f5c:	fc 81       	ldd	r31, Y+4	; 0x04
     f5e:	82 85       	ldd	r24, Z+10	; 0x0a
     f60:	88 23       	and	r24, r24
     f62:	31 f0       	breq	.+12     	; 0xf70 <MCAL_USART_Init+0x1a0>
     f64:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     f68:	f8 2f       	mov	r31, r24
     f6a:	f8 60       	ori	r31, 0x08	; 8
     f6c:	fd 83       	std	Y+5, r31	; 0x05
     f6e:	05 c0       	rjmp	.+10     	; 0xf7a <MCAL_USART_Init+0x1aa>
     f70:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     f74:	98 2f       	mov	r25, r24
     f76:	97 7f       	andi	r25, 0xF7	; 247
     f78:	9d 83       	std	Y+5, r25	; 0x05
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	ee 81       	ldd	r30, Y+6	; 0x06
     f7e:	ff 81       	ldd	r31, Y+7	; 0x07
     f80:	80 83       	st	Z, r24

	UCSRC = USART_ReadUCSRC()|((usart_cnfg->Parity_status)<<UPM0);
     f82:	00 e4       	ldi	r16, 0x40	; 64
     f84:	10 e0       	ldi	r17, 0x00	; 0
     f86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_ReadUCSRC>
     f8a:	28 2f       	mov	r18, r24
     f8c:	eb 81       	ldd	r30, Y+3	; 0x03
     f8e:	fc 81       	ldd	r31, Y+4	; 0x04
     f90:	83 85       	ldd	r24, Z+11	; 0x0b
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	82 95       	swap	r24
     f98:	92 95       	swap	r25
     f9a:	90 7f       	andi	r25, 0xF0	; 240
     f9c:	98 27       	eor	r25, r24
     f9e:	80 7f       	andi	r24, 0xF0	; 240
     fa0:	98 27       	eor	r25, r24
     fa2:	82 2b       	or	r24, r18
     fa4:	f8 01       	movw	r30, r16
     fa6:	80 83       	st	Z, r24


	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN)|(1<<TXEN);
     fa8:	aa e2       	ldi	r26, 0x2A	; 42
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e2       	ldi	r30, 0x2A	; 42
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 61       	ori	r24, 0x18	; 24
     fb4:	8c 93       	st	X, r24


}
     fb6:	2a 96       	adiw	r28, 0x0a	; 10
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	08 95       	ret

00000fd0 <MCAL_USART_Send>:
void MCAL_USART_Send(uint16_t* data, enum Polling_mechism P_E)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <MCAL_USART_Send+0x6>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait  transmit to Complete */
	while(!( UCSRA & (1<<TXC)));
     fe2:	eb e2       	ldi	r30, 0x2B	; 43
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	80 74       	andi	r24, 0x40	; 64
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	b9 f3       	breq	.-18     	; 0xfe2 <MCAL_USART_Send+0x12>
	if (P_E == enable)
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	88 23       	and	r24, r24
     ff8:	71 f4       	brne	.+28     	; 0x1016 <MCAL_USART_Send+0x46>
	{
		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)));
     ffa:	eb e2       	ldi	r30, 0x2B	; 43
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	80 72       	andi	r24, 0x20	; 32
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	b9 f3       	breq	.-18     	; 0xffa <MCAL_USART_Send+0x2a>
		Send_Data(data);
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Send_Data>
    1014:	15 c0       	rjmp	.+42     	; 0x1040 <MCAL_USART_Send+0x70>
	}
	else
	{
		Data = *data ;
    1016:	e9 81       	ldd	r30, Y+1	; 0x01
    1018:	fa 81       	ldd	r31, Y+2	; 0x02
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	90 93 8b 01 	sts	0x018B, r25
    1022:	80 93 8a 01 	sts	0x018A, r24
		P_IRQ_CallBack[1] = UDRIE_CallBack ;
    1026:	86 ed       	ldi	r24, 0xD6	; 214
    1028:	96 e0       	ldi	r25, 0x06	; 6
    102a:	90 93 87 01 	sts	0x0187, r25
    102e:	80 93 86 01 	sts	0x0186, r24
		/* Enable  Interrupt */
		UCSRB |= USART_IRQ_Enable_UDRIE;
    1032:	aa e2       	ldi	r26, 0x2A	; 42
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ea e2       	ldi	r30, 0x2A	; 42
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	80 62       	ori	r24, 0x20	; 32
    103e:	8c 93       	st	X, r24
	}

}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <MCAL_USART_Resive>:
void MCAL_USART_Resive(uint16_t* data , enum Polling_mechism P_E)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <MCAL_USART_Resive+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <MCAL_USART_Resive+0x8>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	6b 83       	std	Y+3, r22	; 0x03
	if (P_E == enable)
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 23       	and	r24, r24
    1064:	29 f4       	brne	.+10     	; 0x1070 <MCAL_USART_Resive+0x24>
		/* Wait for receive Data in receive buffer */
				while ( !( UCSRA & (1<<RXC)));
    1066:	eb e2       	ldi	r30, 0x2B	; 43
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	88 23       	and	r24, r24
    106e:	dc f7       	brge	.-10     	; 0x1066 <MCAL_USART_Resive+0x1a>

	if(G_usart_cnfg->data_bits  == USART_DataBit_9bits)
    1070:	e0 91 82 01 	lds	r30, 0x0182
    1074:	f0 91 83 01 	lds	r31, 0x0183
    1078:	81 85       	ldd	r24, Z+9	; 0x09
    107a:	87 30       	cpi	r24, 0x07	; 7
    107c:	81 f5       	brne	.+96     	; 0x10de <MCAL_USART_Resive+0x92>
	{
		/* Copy 9th bit From RXB8 */
		*data = ( UCSRB &(1<<RXB8))? *data|(1<<8): *data&(~(1<<8));
    107e:	ea e2       	ldi	r30, 0x2A	; 42
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	82 70       	andi	r24, 0x02	; 2
    108a:	90 70       	andi	r25, 0x00	; 0
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	49 f0       	breq	.+18     	; 0x10a2 <MCAL_USART_Resive+0x56>
    1090:	e9 81       	ldd	r30, Y+1	; 0x01
    1092:	fa 81       	ldd	r31, Y+2	; 0x02
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	9c 01       	movw	r18, r24
    109a:	31 60       	ori	r19, 0x01	; 1
    109c:	3d 83       	std	Y+5, r19	; 0x05
    109e:	2c 83       	std	Y+4, r18	; 0x04
    10a0:	08 c0       	rjmp	.+16     	; 0x10b2 <MCAL_USART_Resive+0x66>
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	9c 01       	movw	r18, r24
    10ac:	3e 7f       	andi	r19, 0xFE	; 254
    10ae:	3d 83       	std	Y+5, r19	; 0x05
    10b0:	2c 83       	std	Y+4, r18	; 0x04
    10b2:	e9 81       	ldd	r30, Y+1	; 0x01
    10b4:	fa 81       	ldd	r31, Y+2	; 0x02
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24

		/* Read data From buffer */
		*data |= UDR ;
    10be:	e9 81       	ldd	r30, Y+1	; 0x01
    10c0:	fa 81       	ldd	r31, Y+2	; 0x02
    10c2:	20 81       	ld	r18, Z
    10c4:	31 81       	ldd	r19, Z+1	; 0x01
    10c6:	ec e2       	ldi	r30, 0x2C	; 44
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	82 2b       	or	r24, r18
    10d2:	93 2b       	or	r25, r19
    10d4:	e9 81       	ldd	r30, Y+1	; 0x01
    10d6:	fa 81       	ldd	r31, Y+2	; 0x02
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	80 83       	st	Z, r24
    10dc:	09 c0       	rjmp	.+18     	; 0x10f0 <MCAL_USART_Resive+0xa4>
	}
	else
	{
		/* Read data From buffer */
		*data = UDR ;
    10de:	ec e2       	ldi	r30, 0x2C	; 44
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ea:	fa 81       	ldd	r31, Y+2	; 0x02
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
	}
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <MCAL_USART_SendString>:

void MCAL_USART_SendString(uint8_t* data)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <MCAL_USART_SendString+0x6>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01

}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <MCAL_USART_ResiveString>:
void MCAL_USART_ResiveString(uint8_t* data)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <MCAL_USART_ResiveString+0x6>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01

}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <__vector_13>:
// ISR FUNCTION PROTOTYPE FOR USART, RX Complete

void __vector_13 (void) __attribute__ (( signal ));

void __vector_13(void)
{
    1130:	1f 92       	push	r1
    1132:	0f 92       	push	r0
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	0f 92       	push	r0
    1138:	11 24       	eor	r1, r1
    113a:	2f 93       	push	r18
    113c:	3f 93       	push	r19
    113e:	4f 93       	push	r20
    1140:	5f 93       	push	r21
    1142:	6f 93       	push	r22
    1144:	7f 93       	push	r23
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    114a:	af 93       	push	r26
    114c:	bf 93       	push	r27
    114e:	ef 93       	push	r30
    1150:	ff 93       	push	r31
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
	P_IRQ_CallBack[0]();
    115a:	e0 91 84 01 	lds	r30, 0x0184
    115e:	f0 91 85 01 	lds	r31, 0x0185
    1162:	09 95       	icall
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <__vector_14>:
// ISR FUNCTION PROTOTYPE FOR USART, USART Data Register Empty

void __vector_14 (void) __attribute__ (( signal ));

void __vector_14(void)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	P_IRQ_CallBack[1]();
    11b4:	e0 91 86 01 	lds	r30, 0x0186
    11b8:	f0 91 87 01 	lds	r31, 0x0187
    11bc:	09 95       	icall
}
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	bf 91       	pop	r27
    11c8:	af 91       	pop	r26
    11ca:	9f 91       	pop	r25
    11cc:	8f 91       	pop	r24
    11ce:	7f 91       	pop	r23
    11d0:	6f 91       	pop	r22
    11d2:	5f 91       	pop	r21
    11d4:	4f 91       	pop	r20
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <__vector_15>:
// ISR FUNCTION PROTOTYPE FOR USART, TX Complete

void __vector_15 (void) __attribute__ (( signal ));

void __vector_15(void)
{
    11e4:	1f 92       	push	r1
    11e6:	0f 92       	push	r0
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	0f 92       	push	r0
    11ec:	11 24       	eor	r1, r1
    11ee:	2f 93       	push	r18
    11f0:	3f 93       	push	r19
    11f2:	4f 93       	push	r20
    11f4:	5f 93       	push	r21
    11f6:	6f 93       	push	r22
    11f8:	7f 93       	push	r23
    11fa:	8f 93       	push	r24
    11fc:	9f 93       	push	r25
    11fe:	af 93       	push	r26
    1200:	bf 93       	push	r27
    1202:	ef 93       	push	r30
    1204:	ff 93       	push	r31
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	P_IRQ_CallBack[2]();
    120e:	e0 91 88 01 	lds	r30, 0x0188
    1212:	f0 91 89 01 	lds	r31, 0x0189
    1216:	09 95       	icall
}
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <DIO_SetPinDirection>:

                                 /*****            APIS            *****/

  /* PIN APIS */
void DIO_SetPinDirection (U8 PortId , U8 PinId , U8 PinDirection)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <DIO_SetPinDirection+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <DIO_SetPinDirection+0x8>
    1246:	0f 92       	push	r0
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	6a 83       	std	Y+2, r22	; 0x02
    1250:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) && ((PinDirection == DIO_PIN_OUTPUT) || (PinDirection == DIO_PIN_INPUT)))
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	84 30       	cpi	r24, 0x04	; 4
    1256:	08 f0       	brcs	.+2      	; 0x125a <DIO_SetPinDirection+0x1c>
    1258:	dc c0       	rjmp	.+440    	; 0x1412 <DIO_SetPinDirection+0x1d4>
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	08 f0       	brcs	.+2      	; 0x1262 <DIO_SetPinDirection+0x24>
    1260:	d8 c0       	rjmp	.+432    	; 0x1412 <DIO_SetPinDirection+0x1d4>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	21 f0       	breq	.+8      	; 0x1270 <DIO_SetPinDirection+0x32>
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 23       	and	r24, r24
    126c:	09 f0       	breq	.+2      	; 0x1270 <DIO_SetPinDirection+0x32>
    126e:	d1 c0       	rjmp	.+418    	; 0x1412 <DIO_SetPinDirection+0x1d4>
	{
		 switch(PortId)
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <DIO_SetPinDirection+0x48>
    1284:	43 c0       	rjmp	.+134    	; 0x130c <DIO_SetPinDirection+0xce>
    1286:	2c 81       	ldd	r18, Y+4	; 0x04
    1288:	3d 81       	ldd	r19, Y+5	; 0x05
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	2c f4       	brge	.+10     	; 0x129a <DIO_SetPinDirection+0x5c>
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	71 f0       	breq	.+28     	; 0x12b4 <DIO_SetPinDirection+0x76>
    1298:	bc c0       	rjmp	.+376    	; 0x1412 <DIO_SetPinDirection+0x1d4>
    129a:	2c 81       	ldd	r18, Y+4	; 0x04
    129c:	3d 81       	ldd	r19, Y+5	; 0x05
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <DIO_SetPinDirection+0x68>
    12a4:	5f c0       	rjmp	.+190    	; 0x1364 <DIO_SetPinDirection+0x126>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <DIO_SetPinDirection+0x74>
    12b0:	85 c0       	rjmp	.+266    	; 0x13bc <DIO_SetPinDirection+0x17e>
    12b2:	af c0       	rjmp	.+350    	; 0x1412 <DIO_SetPinDirection+0x1d4>
		 {

		 case 0 :
			 if(PinDirection == DIO_PIN_OUTPUT)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	a1 f4       	brne	.+40     	; 0x12e2 <DIO_SetPinDirection+0xa4>
			 {
			     SET_BIT(DDRA, PinId);
    12ba:	aa e3       	ldi	r26, 0x3A	; 58
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ea e3       	ldi	r30, 0x3A	; 58
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_SetPinDirection+0x9a>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_SetPinDirection+0x96>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	98 c0       	rjmp	.+304    	; 0x1412 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRA , PinId);
    12e2:	aa e3       	ldi	r26, 0x3A	; 58
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ea e3       	ldi	r30, 0x3A	; 58
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_SetPinDirection+0xc2>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_SetPinDirection+0xbe>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	83 c0       	rjmp	.+262    	; 0x1412 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 1 :
			 if(PinDirection == DIO_PIN_OUTPUT)
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	a1 f4       	brne	.+40     	; 0x133a <DIO_SetPinDirection+0xfc>
			 {
			     SET_BIT(DDRB, PinId);
    1312:	a7 e3       	ldi	r26, 0x37	; 55
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e7 e3       	ldi	r30, 0x37	; 55
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_SetPinDirection+0xf2>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_SetPinDirection+0xee>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	6c c0       	rjmp	.+216    	; 0x1412 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRB , PinId);
    133a:	a7 e3       	ldi	r26, 0x37	; 55
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e7 e3       	ldi	r30, 0x37	; 55
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_SetPinDirection+0x11a>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_SetPinDirection+0x116>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	57 c0       	rjmp	.+174    	; 0x1412 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 2 :
			 if(PinDirection == DIO_PIN_OUTPUT)
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	a1 f4       	brne	.+40     	; 0x1392 <DIO_SetPinDirection+0x154>
			 {
			     SET_BIT(DDRC, PinId);
    136a:	a4 e3       	ldi	r26, 0x34	; 52
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e4 e3       	ldi	r30, 0x34	; 52
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_SetPinDirection+0x14a>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_SetPinDirection+0x146>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	40 c0       	rjmp	.+128    	; 0x1412 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRC , PinId);
    1392:	a4 e3       	ldi	r26, 0x34	; 52
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e4 e3       	ldi	r30, 0x34	; 52
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_SetPinDirection+0x172>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_SetPinDirection+0x16e>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	2b c0       	rjmp	.+86     	; 0x1412 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 3 :
			 if(PinDirection == DIO_PIN_OUTPUT)
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	a1 f4       	brne	.+40     	; 0x13ea <DIO_SetPinDirection+0x1ac>
			 {
			     SET_BIT(DDRD, PinId);
    13c2:	a1 e3       	ldi	r26, 0x31	; 49
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e1 e3       	ldi	r30, 0x31	; 49
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_SetPinDirection+0x1a2>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_SetPinDirection+0x19e>
    13e4:	84 2b       	or	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRD , PinId);
    13ea:	a1 e3       	ldi	r26, 0x31	; 49
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e1 e3       	ldi	r30, 0x31	; 49
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_SetPinDirection+0x1ca>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_SetPinDirection+0x1c6>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
			 }
			 break;
		 }
	}

}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <DIO_SetPinValue>:
void DIO_SetPinValue     (U8 PortId , U8 PinId , U8 PinValue)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <DIO_SetPinValue+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <DIO_SetPinValue+0x8>
    142a:	0f 92       	push	r0
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	6a 83       	std	Y+2, r22	; 0x02
    1434:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) && ((PinValue == 1) || (PinValue == 0)))
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	08 f0       	brcs	.+2      	; 0x143e <DIO_SetPinValue+0x1c>
    143c:	dc c0       	rjmp	.+440    	; 0x15f6 <DIO_SetPinValue+0x1d4>
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	88 30       	cpi	r24, 0x08	; 8
    1442:	08 f0       	brcs	.+2      	; 0x1446 <DIO_SetPinValue+0x24>
    1444:	d8 c0       	rjmp	.+432    	; 0x15f6 <DIO_SetPinValue+0x1d4>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	21 f0       	breq	.+8      	; 0x1454 <DIO_SetPinValue+0x32>
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 23       	and	r24, r24
    1450:	09 f0       	breq	.+2      	; 0x1454 <DIO_SetPinValue+0x32>
    1452:	d1 c0       	rjmp	.+418    	; 0x15f6 <DIO_SetPinValue+0x1d4>
		{
			 switch(PortId)
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	3d 83       	std	Y+5, r19	; 0x05
    145c:	2c 83       	std	Y+4, r18	; 0x04
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	91 05       	cpc	r25, r1
    1466:	09 f4       	brne	.+2      	; 0x146a <DIO_SetPinValue+0x48>
    1468:	43 c0       	rjmp	.+134    	; 0x14f0 <DIO_SetPinValue+0xce>
    146a:	2c 81       	ldd	r18, Y+4	; 0x04
    146c:	3d 81       	ldd	r19, Y+5	; 0x05
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <DIO_SetPinValue+0x5c>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	71 f0       	breq	.+28     	; 0x1498 <DIO_SetPinValue+0x76>
    147c:	bc c0       	rjmp	.+376    	; 0x15f6 <DIO_SetPinValue+0x1d4>
    147e:	2c 81       	ldd	r18, Y+4	; 0x04
    1480:	3d 81       	ldd	r19, Y+5	; 0x05
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	09 f4       	brne	.+2      	; 0x148a <DIO_SetPinValue+0x68>
    1488:	5f c0       	rjmp	.+190    	; 0x1548 <DIO_SetPinValue+0x126>
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	9d 81       	ldd	r25, Y+5	; 0x05
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	91 05       	cpc	r25, r1
    1492:	09 f4       	brne	.+2      	; 0x1496 <DIO_SetPinValue+0x74>
    1494:	85 c0       	rjmp	.+266    	; 0x15a0 <DIO_SetPinValue+0x17e>
    1496:	af c0       	rjmp	.+350    	; 0x15f6 <DIO_SetPinValue+0x1d4>
			 {

			 case 0 :
				 if(PinValue == DIO_PIN_HIGH)
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	a1 f4       	brne	.+40     	; 0x14c6 <DIO_SetPinValue+0xa4>
				 {
				     SET_BIT(PORTA, PinId);
    149e:	ab e3       	ldi	r26, 0x3B	; 59
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	eb e3       	ldi	r30, 0x3B	; 59
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_SetPinValue+0x9a>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_SetPinValue+0x96>
    14c0:	84 2b       	or	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	98 c0       	rjmp	.+304    	; 0x15f6 <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(DDRA , PinId);
    14c6:	aa e3       	ldi	r26, 0x3A	; 58
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ea e3       	ldi	r30, 0x3A	; 58
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_SetPinValue+0xc2>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_SetPinValue+0xbe>
    14e8:	80 95       	com	r24
    14ea:	84 23       	and	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	83 c0       	rjmp	.+262    	; 0x15f6 <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 1 :
				 if(PinValue == DIO_PIN_HIGH)
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	a1 f4       	brne	.+40     	; 0x151e <DIO_SetPinValue+0xfc>
				 {
				     SET_BIT(PORTB, PinId);
    14f6:	a8 e3       	ldi	r26, 0x38	; 56
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e8 e3       	ldi	r30, 0x38	; 56
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_SetPinValue+0xf2>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_SetPinValue+0xee>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	6c c0       	rjmp	.+216    	; 0x15f6 <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTB , PinId);
    151e:	a8 e3       	ldi	r26, 0x38	; 56
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e8 e3       	ldi	r30, 0x38	; 56
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_SetPinValue+0x11a>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_SetPinValue+0x116>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	57 c0       	rjmp	.+174    	; 0x15f6 <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 2 :
				 if(PinValue == DIO_PIN_HIGH)
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	a1 f4       	brne	.+40     	; 0x1576 <DIO_SetPinValue+0x154>
				 {
				     SET_BIT(PORTC, PinId);
    154e:	a5 e3       	ldi	r26, 0x35	; 53
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e5 e3       	ldi	r30, 0x35	; 53
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_SetPinValue+0x14a>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_SetPinValue+0x146>
    1570:	84 2b       	or	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	40 c0       	rjmp	.+128    	; 0x15f6 <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTC , PinId);
    1576:	a5 e3       	ldi	r26, 0x35	; 53
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e3       	ldi	r30, 0x35	; 53
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_SetPinValue+0x172>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_SetPinValue+0x16e>
    1598:	80 95       	com	r24
    159a:	84 23       	and	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	2b c0       	rjmp	.+86     	; 0x15f6 <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 3 :
				 if(PinValue == DIO_PIN_HIGH)
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	a1 f4       	brne	.+40     	; 0x15ce <DIO_SetPinValue+0x1ac>
				 {
				     SET_BIT(PORTD, PinId);
    15a6:	a2 e3       	ldi	r26, 0x32	; 50
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e2 e3       	ldi	r30, 0x32	; 50
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_SetPinValue+0x1a2>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_SetPinValue+0x19e>
    15c8:	84 2b       	or	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	14 c0       	rjmp	.+40     	; 0x15f6 <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTD , PinId);
    15ce:	a2 e3       	ldi	r26, 0x32	; 50
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e2 e3       	ldi	r30, 0x32	; 50
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_SetPinValue+0x1ca>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_SetPinValue+0x1c6>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
				 }
				 break;
			 }
		}

}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <DIO_GetPinValue>:
void DIO_GetPinValue     (U8 PortId , U8 PinId , U8* PinValue)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <DIO_GetPinValue+0x6>
    160c:	00 d0       	rcall	.+0      	; 0x160e <DIO_GetPinValue+0x8>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <DIO_GetPinValue+0xa>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	6a 83       	std	Y+2, r22	; 0x02
    1618:	5c 83       	std	Y+4, r21	; 0x04
    161a:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) )
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	08 f0       	brcs	.+2      	; 0x1624 <DIO_GetPinValue+0x1e>
    1622:	95 c0       	rjmp	.+298    	; 0x174e <DIO_GetPinValue+0x148>
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	88 30       	cpi	r24, 0x08	; 8
    1628:	08 f0       	brcs	.+2      	; 0x162c <DIO_GetPinValue+0x26>
    162a:	91 c0       	rjmp	.+290    	; 0x174e <DIO_GetPinValue+0x148>
		{
			 switch(PortId)
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	3e 83       	std	Y+6, r19	; 0x06
    1634:	2d 83       	std	Y+5, r18	; 0x05
    1636:	4d 81       	ldd	r20, Y+5	; 0x05
    1638:	5e 81       	ldd	r21, Y+6	; 0x06
    163a:	41 30       	cpi	r20, 0x01	; 1
    163c:	51 05       	cpc	r21, r1
    163e:	a1 f1       	breq	.+104    	; 0x16a8 <DIO_GetPinValue+0xa2>
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	91 05       	cpc	r25, r1
    1648:	34 f4       	brge	.+12     	; 0x1656 <DIO_GetPinValue+0x50>
    164a:	2d 81       	ldd	r18, Y+5	; 0x05
    164c:	3e 81       	ldd	r19, Y+6	; 0x06
    164e:	21 15       	cp	r18, r1
    1650:	31 05       	cpc	r19, r1
    1652:	71 f0       	breq	.+28     	; 0x1670 <DIO_GetPinValue+0x6a>
    1654:	7c c0       	rjmp	.+248    	; 0x174e <DIO_GetPinValue+0x148>
    1656:	4d 81       	ldd	r20, Y+5	; 0x05
    1658:	5e 81       	ldd	r21, Y+6	; 0x06
    165a:	42 30       	cpi	r20, 0x02	; 2
    165c:	51 05       	cpc	r21, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <DIO_GetPinValue+0x5c>
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <DIO_GetPinValue+0xda>
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <DIO_GetPinValue+0x68>
    166c:	55 c0       	rjmp	.+170    	; 0x1718 <DIO_GetPinValue+0x112>
    166e:	6f c0       	rjmp	.+222    	; 0x174e <DIO_GetPinValue+0x148>
			 {

			 case 0 :
				 if(GET_BIT(PINA , PinId) == DIO_PIN_HIGH)
    1670:	e9 e3       	ldi	r30, 0x39	; 57
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_GetPinValue+0x82>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_GetPinValue+0x7e>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	90 70       	andi	r25, 0x00	; 0
    1692:	88 23       	and	r24, r24
    1694:	29 f0       	breq	.+10     	; 0x16a0 <DIO_GetPinValue+0x9a>
				 {
				     *PinValue = DIO_PIN_HIGH;
    1696:	eb 81       	ldd	r30, Y+3	; 0x03
    1698:	fc 81       	ldd	r31, Y+4	; 0x04
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 83       	st	Z, r24
    169e:	57 c0       	rjmp	.+174    	; 0x174e <DIO_GetPinValue+0x148>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
    16a0:	eb 81       	ldd	r30, Y+3	; 0x03
    16a2:	fc 81       	ldd	r31, Y+4	; 0x04
    16a4:	10 82       	st	Z, r1
    16a6:	53 c0       	rjmp	.+166    	; 0x174e <DIO_GetPinValue+0x148>
				 }
				 break;
			 case 1 :
				 if(GET_BIT(PINB , PinId) == DIO_PIN_HIGH)
    16a8:	e6 e3       	ldi	r30, 0x36	; 54
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_GetPinValue+0xba>
    16bc:	55 95       	asr	r21
    16be:	47 95       	ror	r20
    16c0:	8a 95       	dec	r24
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_GetPinValue+0xb6>
    16c4:	ca 01       	movw	r24, r20
    16c6:	81 70       	andi	r24, 0x01	; 1
    16c8:	90 70       	andi	r25, 0x00	; 0
    16ca:	88 23       	and	r24, r24
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <DIO_GetPinValue+0xd2>
				 {
				     *PinValue = DIO_PIN_HIGH;
    16ce:	eb 81       	ldd	r30, Y+3	; 0x03
    16d0:	fc 81       	ldd	r31, Y+4	; 0x04
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	80 83       	st	Z, r24
    16d6:	3b c0       	rjmp	.+118    	; 0x174e <DIO_GetPinValue+0x148>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
    16d8:	eb 81       	ldd	r30, Y+3	; 0x03
    16da:	fc 81       	ldd	r31, Y+4	; 0x04
    16dc:	10 82       	st	Z, r1
    16de:	37 c0       	rjmp	.+110    	; 0x174e <DIO_GetPinValue+0x148>
				 }
				 break;
			 case 2 :
				 if(GET_BIT(PINC , PinId) == DIO_PIN_HIGH)
    16e0:	e3 e3       	ldi	r30, 0x33	; 51
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a9 01       	movw	r20, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <DIO_GetPinValue+0xf2>
    16f4:	55 95       	asr	r21
    16f6:	47 95       	ror	r20
    16f8:	8a 95       	dec	r24
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <DIO_GetPinValue+0xee>
    16fc:	ca 01       	movw	r24, r20
    16fe:	81 70       	andi	r24, 0x01	; 1
    1700:	90 70       	andi	r25, 0x00	; 0
    1702:	88 23       	and	r24, r24
    1704:	29 f0       	breq	.+10     	; 0x1710 <DIO_GetPinValue+0x10a>
				 {
				     *PinValue = DIO_PIN_HIGH;
    1706:	eb 81       	ldd	r30, Y+3	; 0x03
    1708:	fc 81       	ldd	r31, Y+4	; 0x04
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	80 83       	st	Z, r24
    170e:	1f c0       	rjmp	.+62     	; 0x174e <DIO_GetPinValue+0x148>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
    1710:	eb 81       	ldd	r30, Y+3	; 0x03
    1712:	fc 81       	ldd	r31, Y+4	; 0x04
    1714:	10 82       	st	Z, r1
    1716:	1b c0       	rjmp	.+54     	; 0x174e <DIO_GetPinValue+0x148>
				 }
				 break;
			 case 3 :
				 if(GET_BIT(PIND , PinId) == DIO_PIN_HIGH)
    1718:	e0 e3       	ldi	r30, 0x30	; 48
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a9 01       	movw	r20, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_GetPinValue+0x12a>
    172c:	55 95       	asr	r21
    172e:	47 95       	ror	r20
    1730:	8a 95       	dec	r24
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_GetPinValue+0x126>
    1734:	ca 01       	movw	r24, r20
    1736:	81 70       	andi	r24, 0x01	; 1
    1738:	90 70       	andi	r25, 0x00	; 0
    173a:	88 23       	and	r24, r24
    173c:	29 f0       	breq	.+10     	; 0x1748 <DIO_GetPinValue+0x142>
				 {
				     *PinValue = DIO_PIN_HIGH;
    173e:	eb 81       	ldd	r30, Y+3	; 0x03
    1740:	fc 81       	ldd	r31, Y+4	; 0x04
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 83       	st	Z, r24
    1746:	03 c0       	rjmp	.+6      	; 0x174e <DIO_GetPinValue+0x148>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
    1748:	eb 81       	ldd	r30, Y+3	; 0x03
    174a:	fc 81       	ldd	r31, Y+4	; 0x04
    174c:	10 82       	st	Z, r1
				 }
				 break;
			 }
		}

}
    174e:	26 96       	adiw	r28, 0x06	; 6
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <DIO_TogglePinValue>:
void DIO_TogglePinValue  (U8 PortId , U8 PinId)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <DIO_TogglePinValue+0x6>
    1766:	00 d0       	rcall	.+0      	; 0x1768 <DIO_TogglePinValue+0x8>
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && (PinId <= 7) )
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	08 f0       	brcs	.+2      	; 0x1778 <DIO_TogglePinValue+0x18>
    1776:	72 c0       	rjmp	.+228    	; 0x185c <DIO_TogglePinValue+0xfc>
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	88 30       	cpi	r24, 0x08	; 8
    177c:	08 f0       	brcs	.+2      	; 0x1780 <DIO_TogglePinValue+0x20>
    177e:	6e c0       	rjmp	.+220    	; 0x185c <DIO_TogglePinValue+0xfc>
		{
			 switch(PortId)
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3c 83       	std	Y+4, r19	; 0x04
    1788:	2b 83       	std	Y+3, r18	; 0x03
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	49 f1       	breq	.+82     	; 0x17e6 <DIO_TogglePinValue+0x86>
    1794:	2b 81       	ldd	r18, Y+3	; 0x03
    1796:	3c 81       	ldd	r19, Y+4	; 0x04
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <DIO_TogglePinValue+0x48>
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f0       	breq	.+24     	; 0x17be <DIO_TogglePinValue+0x5e>
    17a6:	5a c0       	rjmp	.+180    	; 0x185c <DIO_TogglePinValue+0xfc>
    17a8:	2b 81       	ldd	r18, Y+3	; 0x03
    17aa:	3c 81       	ldd	r19, Y+4	; 0x04
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	71 f1       	breq	.+92     	; 0x180e <DIO_TogglePinValue+0xae>
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	e9 f1       	breq	.+122    	; 0x1836 <DIO_TogglePinValue+0xd6>
    17bc:	4f c0       	rjmp	.+158    	; 0x185c <DIO_TogglePinValue+0xfc>
			 {

			 case 0 :
				 TOG_BIT(PORTA , PinId);
    17be:	ab e3       	ldi	r26, 0x3B	; 59
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_TogglePinValue+0x7c>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_TogglePinValue+0x78>
    17e0:	84 27       	eor	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	3b c0       	rjmp	.+118    	; 0x185c <DIO_TogglePinValue+0xfc>
				 break;
			 case 1 :
				 TOG_BIT(PORTB , PinId);
    17e6:	a8 e3       	ldi	r26, 0x38	; 56
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e8 e3       	ldi	r30, 0x38	; 56
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_TogglePinValue+0xa4>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_TogglePinValue+0xa0>
    1808:	84 27       	eor	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	27 c0       	rjmp	.+78     	; 0x185c <DIO_TogglePinValue+0xfc>
				 break;
			 case 2 :
				 TOG_BIT(PORTC , PinId);
    180e:	a5 e3       	ldi	r26, 0x35	; 53
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e3       	ldi	r30, 0x35	; 53
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_TogglePinValue+0xcc>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_TogglePinValue+0xc8>
    1830:	84 27       	eor	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	13 c0       	rjmp	.+38     	; 0x185c <DIO_TogglePinValue+0xfc>
				 break;
			 case 3 :
				 TOG_BIT(PORTD , PinId);
    1836:	a2 e3       	ldi	r26, 0x32	; 50
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e2 e3       	ldi	r30, 0x32	; 50
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_TogglePinValue+0xf4>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_TogglePinValue+0xf0>
    1858:	84 27       	eor	r24, r20
    185a:	8c 93       	st	X, r24
			 }
		}



}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <DIO_SetInputPinResistance>:
void DIO_SetInputPinResistance(U8 PortId , U8 PinId)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <DIO_SetInputPinResistance+0x6>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <DIO_SetInputPinResistance+0x8>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && (PinId <= 7) )
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	08 f0       	brcs	.+2      	; 0x1882 <DIO_SetInputPinResistance+0x18>
    1880:	72 c0       	rjmp	.+228    	; 0x1966 <DIO_SetInputPinResistance+0xfc>
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	88 30       	cpi	r24, 0x08	; 8
    1886:	08 f0       	brcs	.+2      	; 0x188a <DIO_SetInputPinResistance+0x20>
    1888:	6e c0       	rjmp	.+220    	; 0x1966 <DIO_SetInputPinResistance+0xfc>
			{
				 switch(PortId)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3c 83       	std	Y+4, r19	; 0x04
    1892:	2b 83       	std	Y+3, r18	; 0x03
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	91 05       	cpc	r25, r1
    189c:	49 f1       	breq	.+82     	; 0x18f0 <DIO_SetInputPinResistance+0x86>
    189e:	2b 81       	ldd	r18, Y+3	; 0x03
    18a0:	3c 81       	ldd	r19, Y+4	; 0x04
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <DIO_SetInputPinResistance+0x48>
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <DIO_SetInputPinResistance+0x5e>
    18b0:	5a c0       	rjmp	.+180    	; 0x1966 <DIO_SetInputPinResistance+0xfc>
    18b2:	2b 81       	ldd	r18, Y+3	; 0x03
    18b4:	3c 81       	ldd	r19, Y+4	; 0x04
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	71 f1       	breq	.+92     	; 0x1918 <DIO_SetInputPinResistance+0xae>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	91 05       	cpc	r25, r1
    18c4:	e9 f1       	breq	.+122    	; 0x1940 <DIO_SetInputPinResistance+0xd6>
    18c6:	4f c0       	rjmp	.+158    	; 0x1966 <DIO_SetInputPinResistance+0xfc>
				 {

				 case 0 :
					 SET_BIT(PORTA , PinId);
    18c8:	ab e3       	ldi	r26, 0x3B	; 59
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	eb e3       	ldi	r30, 0x3B	; 59
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_SetInputPinResistance+0x7c>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_SetInputPinResistance+0x78>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	3b c0       	rjmp	.+118    	; 0x1966 <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 1 :
					 SET_BIT(PORTB , PinId);
    18f0:	a8 e3       	ldi	r26, 0x38	; 56
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e8 e3       	ldi	r30, 0x38	; 56
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_SetInputPinResistance+0xa4>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_SetInputPinResistance+0xa0>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	27 c0       	rjmp	.+78     	; 0x1966 <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 2 :
					 SET_BIT(PORTC , PinId);
    1918:	a5 e3       	ldi	r26, 0x35	; 53
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e5 e3       	ldi	r30, 0x35	; 53
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_SetInputPinResistance+0xcc>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_SetInputPinResistance+0xc8>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	13 c0       	rjmp	.+38     	; 0x1966 <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 3 :
					 SET_BIT(PORTD , PinId);
    1940:	a2 e3       	ldi	r26, 0x32	; 50
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e2 e3       	ldi	r30, 0x32	; 50
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_SetInputPinResistance+0xf4>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_SetInputPinResistance+0xf0>
    1962:	84 2b       	or	r24, r20
    1964:	8c 93       	st	X, r24
					 break;
				 }
			}
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <DIO_SetPortDirection>:
  /* PORT APIS */

void DIO_SetPortDirection (U8 PortId ,  U8 PortDirection)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <DIO_SetPortDirection+0x6>
    197a:	00 d0       	rcall	.+0      	; 0x197c <DIO_SetPortDirection+0x8>
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && ((PortDirection == DIO_Port_OUTPUT)|| (PortDirection == DIO_Port_INPUT)))
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	08 f0       	brcs	.+2      	; 0x198c <DIO_SetPortDirection+0x18>
    198a:	55 c0       	rjmp	.+170    	; 0x1a36 <DIO_SetPortDirection+0xc2>
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	8f 3f       	cpi	r24, 0xFF	; 255
    1990:	21 f0       	breq	.+8      	; 0x199a <DIO_SetPortDirection+0x26>
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	88 23       	and	r24, r24
    1996:	09 f0       	breq	.+2      	; 0x199a <DIO_SetPortDirection+0x26>
    1998:	4e c0       	rjmp	.+156    	; 0x1a36 <DIO_SetPortDirection+0xc2>
	{
		switch(PortId)
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3c 83       	std	Y+4, r19	; 0x04
    19a2:	2b 83       	std	Y+3, r18	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	91 05       	cpc	r25, r1
    19ac:	09 f1       	breq	.+66     	; 0x19f0 <DIO_SetPortDirection+0x7c>
    19ae:	2b 81       	ldd	r18, Y+3	; 0x03
    19b0:	3c 81       	ldd	r19, Y+4	; 0x04
    19b2:	22 30       	cpi	r18, 0x02	; 2
    19b4:	31 05       	cpc	r19, r1
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <DIO_SetPortDirection+0x4e>
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	61 f0       	breq	.+24     	; 0x19d8 <DIO_SetPortDirection+0x64>
    19c0:	3a c0       	rjmp	.+116    	; 0x1a36 <DIO_SetPortDirection+0xc2>
    19c2:	2b 81       	ldd	r18, Y+3	; 0x03
    19c4:	3c 81       	ldd	r19, Y+4	; 0x04
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	f1 f0       	breq	.+60     	; 0x1a08 <DIO_SetPortDirection+0x94>
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	91 05       	cpc	r25, r1
    19d4:	29 f1       	breq	.+74     	; 0x1a20 <DIO_SetPortDirection+0xac>
    19d6:	2f c0       	rjmp	.+94     	; 0x1a36 <DIO_SetPortDirection+0xc2>
	 {
		case 0 :
			if (PortDirection == DIO_Port_OUTPUT)
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	8f 3f       	cpi	r24, 0xFF	; 255
    19dc:	29 f4       	brne	.+10     	; 0x19e8 <DIO_SetPortDirection+0x74>
			{
				DDRA = 0xff ;
    19de:	ea e3       	ldi	r30, 0x3A	; 58
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	80 83       	st	Z, r24
    19e6:	27 c0       	rjmp	.+78     	; 0x1a36 <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRA = 0x00 ;
    19e8:	ea e3       	ldi	r30, 0x3A	; 58
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	10 82       	st	Z, r1
    19ee:	23 c0       	rjmp	.+70     	; 0x1a36 <DIO_SetPortDirection+0xc2>
			}

			break;
		case 1 :
			if (PortDirection == DIO_Port_OUTPUT)
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	8f 3f       	cpi	r24, 0xFF	; 255
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <DIO_SetPortDirection+0x8c>
			{
				DDRB = 0xff ;
    19f6:	e7 e3       	ldi	r30, 0x37	; 55
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	80 83       	st	Z, r24
    19fe:	1b c0       	rjmp	.+54     	; 0x1a36 <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRB = 0x00 ;
    1a00:	e7 e3       	ldi	r30, 0x37	; 55
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	10 82       	st	Z, r1
    1a06:	17 c0       	rjmp	.+46     	; 0x1a36 <DIO_SetPortDirection+0xc2>
			}

			break;
		case 2 :
			if (PortDirection == DIO_Port_OUTPUT)
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <DIO_SetPortDirection+0xa4>
			{
				DDRC = 0xff ;
    1a0e:	e4 e3       	ldi	r30, 0x34	; 52
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	80 83       	st	Z, r24
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRC = 0x00 ;
    1a18:	e4 e3       	ldi	r30, 0x34	; 52
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	10 82       	st	Z, r1
    1a1e:	0b c0       	rjmp	.+22     	; 0x1a36 <DIO_SetPortDirection+0xc2>
			}

			break;
		case 3 :
			if (PortDirection == DIO_Port_OUTPUT)
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	8f 3f       	cpi	r24, 0xFF	; 255
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <DIO_SetPortDirection+0xbc>
			{
				DDRD = 0xff ;
    1a26:	e1 e3       	ldi	r30, 0x31	; 49
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	80 83       	st	Z, r24
    1a2e:	03 c0       	rjmp	.+6      	; 0x1a36 <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRD = 0x00 ;
    1a30:	e1 e3       	ldi	r30, 0x31	; 49
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	10 82       	st	Z, r1
			}

			break;
	 }
	}
}
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <DIO_SetPortValue>:
void DIO_SetPortValue     (U8 PortId ,  U8 PortValue)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <DIO_SetPortValue+0x6>
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <DIO_SetPortValue+0x8>
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3))
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	84 30       	cpi	r24, 0x04	; 4
    1a58:	90 f5       	brcc	.+100    	; 0x1abe <DIO_SetPortValue+0x7a>
		{
			switch(PortId)
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3c 83       	std	Y+4, r19	; 0x04
    1a62:	2b 83       	std	Y+3, r18	; 0x03
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	d1 f0       	breq	.+52     	; 0x1aa2 <DIO_SetPortValue+0x5e>
    1a6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a70:	3c 81       	ldd	r19, Y+4	; 0x04
    1a72:	22 30       	cpi	r18, 0x02	; 2
    1a74:	31 05       	cpc	r19, r1
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <DIO_SetPortValue+0x3e>
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <DIO_SetPortValue+0x54>
    1a80:	1e c0       	rjmp	.+60     	; 0x1abe <DIO_SetPortValue+0x7a>
    1a82:	2b 81       	ldd	r18, Y+3	; 0x03
    1a84:	3c 81       	ldd	r19, Y+4	; 0x04
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	81 f0       	breq	.+32     	; 0x1aac <DIO_SetPortValue+0x68>
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	91 05       	cpc	r25, r1
    1a94:	81 f0       	breq	.+32     	; 0x1ab6 <DIO_SetPortValue+0x72>
    1a96:	13 c0       	rjmp	.+38     	; 0x1abe <DIO_SetPortValue+0x7a>
		 {
			case 0 :
				PORTA = PortValue ;
    1a98:	eb e3       	ldi	r30, 0x3B	; 59
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	80 83       	st	Z, r24
    1aa0:	0e c0       	rjmp	.+28     	; 0x1abe <DIO_SetPortValue+0x7a>
				break;
			case 1 :
				PORTB = PortValue ;
    1aa2:	e8 e3       	ldi	r30, 0x38	; 56
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	80 83       	st	Z, r24
    1aaa:	09 c0       	rjmp	.+18     	; 0x1abe <DIO_SetPortValue+0x7a>
				break;
			case 2 :
				PORTC = PortValue ;
    1aac:	e5 e3       	ldi	r30, 0x35	; 53
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	80 83       	st	Z, r24
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <DIO_SetPortValue+0x7a>
				break;
			case 3 :
				PORTB = PortValue ;
    1ab6:	e8 e3       	ldi	r30, 0x38	; 56
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	80 83       	st	Z, r24
				break;
		 }
		}
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <DIO_GetPortValue>:
void DIO_GetPortValue     (U8 PortId , U8* PortValue)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <DIO_GetPortValue+0x6>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <DIO_GetPortValue+0x8>
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	7b 83       	std	Y+3, r23	; 0x03
    1ade:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) )
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	84 30       	cpi	r24, 0x04	; 4
    1ae4:	d0 f5       	brcc	.+116    	; 0x1b5a <DIO_GetPortValue+0x8e>
			{
				switch(PortId)
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	3d 83       	std	Y+5, r19	; 0x05
    1aee:	2c 83       	std	Y+4, r18	; 0x04
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	9d 81       	ldd	r25, Y+5	; 0x05
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	91 05       	cpc	r25, r1
    1af8:	e1 f0       	breq	.+56     	; 0x1b32 <DIO_GetPortValue+0x66>
    1afa:	2c 81       	ldd	r18, Y+4	; 0x04
    1afc:	3d 81       	ldd	r19, Y+5	; 0x05
    1afe:	22 30       	cpi	r18, 0x02	; 2
    1b00:	31 05       	cpc	r19, r1
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <DIO_GetPortValue+0x42>
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	61 f0       	breq	.+24     	; 0x1b24 <DIO_GetPortValue+0x58>
    1b0c:	26 c0       	rjmp	.+76     	; 0x1b5a <DIO_GetPortValue+0x8e>
    1b0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b10:	3d 81       	ldd	r19, Y+5	; 0x05
    1b12:	22 30       	cpi	r18, 0x02	; 2
    1b14:	31 05       	cpc	r19, r1
    1b16:	a1 f0       	breq	.+40     	; 0x1b40 <DIO_GetPortValue+0x74>
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1c:	83 30       	cpi	r24, 0x03	; 3
    1b1e:	91 05       	cpc	r25, r1
    1b20:	b1 f0       	breq	.+44     	; 0x1b4e <DIO_GetPortValue+0x82>
    1b22:	1b c0       	rjmp	.+54     	; 0x1b5a <DIO_GetPortValue+0x8e>
			 {
				case 0 :
					*PortValue = PINA ;
    1b24:	e9 e3       	ldi	r30, 0x39	; 57
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b2e:	80 83       	st	Z, r24
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <DIO_GetPortValue+0x8e>
					break;
				case 1 :
					*PortValue = PINB ;
    1b32:	e6 e3       	ldi	r30, 0x36	; 54
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3c:	80 83       	st	Z, r24
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <DIO_GetPortValue+0x8e>
					break;
				case 2 :
					*PortValue = PINC ;
    1b40:	e3 e3       	ldi	r30, 0x33	; 51
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	ea 81       	ldd	r30, Y+2	; 0x02
    1b48:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4a:	80 83       	st	Z, r24
    1b4c:	06 c0       	rjmp	.+12     	; 0x1b5a <DIO_GetPortValue+0x8e>
					break;
				case 3 :
					*PortValue = PIND ;
    1b4e:	e0 e3       	ldi	r30, 0x30	; 48
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	80 83       	st	Z, r24
					break;
			 }
			}
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <DIO_TogglePortValue>:
void DIO_TogglePortValue  (U8 PortId )
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <DIO_TogglePortValue+0x6>
    1b70:	0f 92       	push	r0
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	89 83       	std	Y+1, r24	; 0x01
	if ((PortId <= 3) )
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	08 f0       	brcs	.+2      	; 0x1b80 <DIO_TogglePortValue+0x16>
    1b7e:	3e c0       	rjmp	.+124    	; 0x1bfc <DIO_TogglePortValue+0x92>
				{
					switch(PortId)
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	3b 83       	std	Y+3, r19	; 0x03
    1b88:	2a 83       	std	Y+2, r18	; 0x02
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	91 05       	cpc	r25, r1
    1b92:	e9 f0       	breq	.+58     	; 0x1bce <DIO_TogglePortValue+0x64>
    1b94:	2a 81       	ldd	r18, Y+2	; 0x02
    1b96:	3b 81       	ldd	r19, Y+3	; 0x03
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <DIO_TogglePortValue+0x3e>
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	61 f0       	breq	.+24     	; 0x1bbe <DIO_TogglePortValue+0x54>
    1ba6:	2a c0       	rjmp	.+84     	; 0x1bfc <DIO_TogglePortValue+0x92>
    1ba8:	2a 81       	ldd	r18, Y+2	; 0x02
    1baa:	3b 81       	ldd	r19, Y+3	; 0x03
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	b1 f0       	breq	.+44     	; 0x1bde <DIO_TogglePortValue+0x74>
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	91 05       	cpc	r25, r1
    1bba:	c9 f0       	breq	.+50     	; 0x1bee <DIO_TogglePortValue+0x84>
    1bbc:	1f c0       	rjmp	.+62     	; 0x1bfc <DIO_TogglePortValue+0x92>
				 {
					case 0 :
						PORTA = ~PORTA ;
    1bbe:	ab e3       	ldi	r26, 0x3B	; 59
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	eb e3       	ldi	r30, 0x3B	; 59
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 95       	com	r24
    1bca:	8c 93       	st	X, r24
    1bcc:	17 c0       	rjmp	.+46     	; 0x1bfc <DIO_TogglePortValue+0x92>
						break;
					case 1 :
						PORTB = ~PORTB ;
    1bce:	a8 e3       	ldi	r26, 0x38	; 56
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e8 e3       	ldi	r30, 0x38	; 56
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	80 95       	com	r24
    1bda:	8c 93       	st	X, r24
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <DIO_TogglePortValue+0x92>
						break;
					case 2 :
						PORTC = ~PORTC ;
    1bde:	a5 e3       	ldi	r26, 0x35	; 53
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 e3       	ldi	r30, 0x35	; 53
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	80 95       	com	r24
    1bea:	8c 93       	st	X, r24
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <DIO_TogglePortValue+0x92>
						break;
					case 3 :
						PORTD = ~PORTD ;
    1bee:	a2 e3       	ldi	r26, 0x32	; 50
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	80 95       	com	r24
    1bfa:	8c 93       	st	X, r24
						break;
				 }
				}
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <DIO_SetInputPortResistance>:
void DIO_SetInputPortResistance(U8 PortId )
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <DIO_SetInputPortResistance+0x6>
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	89 83       	std	Y+1, r24	; 0x01
	if ((PortId <= 3) )
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	90 f5       	brcc	.+100    	; 0x1c80 <DIO_SetInputPortResistance+0x78>
				{
					switch(PortId)
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	3b 83       	std	Y+3, r19	; 0x03
    1c24:	2a 83       	std	Y+2, r18	; 0x02
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	d1 f0       	breq	.+52     	; 0x1c64 <DIO_SetInputPortResistance+0x5c>
    1c30:	2a 81       	ldd	r18, Y+2	; 0x02
    1c32:	3b 81       	ldd	r19, Y+3	; 0x03
    1c34:	22 30       	cpi	r18, 0x02	; 2
    1c36:	31 05       	cpc	r19, r1
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <DIO_SetInputPortResistance+0x3c>
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	61 f0       	breq	.+24     	; 0x1c5a <DIO_SetInputPortResistance+0x52>
    1c42:	1e c0       	rjmp	.+60     	; 0x1c80 <DIO_SetInputPortResistance+0x78>
    1c44:	2a 81       	ldd	r18, Y+2	; 0x02
    1c46:	3b 81       	ldd	r19, Y+3	; 0x03
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	81 f0       	breq	.+32     	; 0x1c6e <DIO_SetInputPortResistance+0x66>
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	83 30       	cpi	r24, 0x03	; 3
    1c54:	91 05       	cpc	r25, r1
    1c56:	81 f0       	breq	.+32     	; 0x1c78 <DIO_SetInputPortResistance+0x70>
    1c58:	13 c0       	rjmp	.+38     	; 0x1c80 <DIO_SetInputPortResistance+0x78>
				 {
					case 0 :
						PORTA = 0xff ;
    1c5a:	eb e3       	ldi	r30, 0x3B	; 59
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	80 83       	st	Z, r24
    1c62:	0e c0       	rjmp	.+28     	; 0x1c80 <DIO_SetInputPortResistance+0x78>
						break;
					case 1 :
						PORTB = 0xff ;
    1c64:	e8 e3       	ldi	r30, 0x38	; 56
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	8f ef       	ldi	r24, 0xFF	; 255
    1c6a:	80 83       	st	Z, r24
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <DIO_SetInputPortResistance+0x78>
						break;
					case 2 :
						PORTC = 0xff ;
    1c6e:	e5 e3       	ldi	r30, 0x35	; 53
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	8f ef       	ldi	r24, 0xFF	; 255
    1c74:	80 83       	st	Z, r24
    1c76:	04 c0       	rjmp	.+8      	; 0x1c80 <DIO_SetInputPortResistance+0x78>
						break;
					case 3 :
						PORTD = 0xff ;
    1c78:	e2 e3       	ldi	r30, 0x32	; 50
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	80 83       	st	Z, r24
						break;
				 }
				}
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <LCD_EN_Pluse>:



/* LCD APIS */
void LCD_EN_Pluse(void)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	2e 97       	sbiw	r28, 0x0e	; 14
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
	LCD_EN_PORT &= ~(1<<LCD_EN_PIN);
    1ca0:	a8 e3       	ldi	r26, 0x38	; 56
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e8 e3       	ldi	r30, 0x38	; 56
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	87 7f       	andi	r24, 0xF7	; 247
    1cac:	8c 93       	st	X, r24
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a8 e4       	ldi	r26, 0x48	; 72
    1cb4:	b2 e4       	ldi	r27, 0x42	; 66
    1cb6:	8b 87       	std	Y+11, r24	; 0x0b
    1cb8:	9c 87       	std	Y+12, r25	; 0x0c
    1cba:	ad 87       	std	Y+13, r26	; 0x0d
    1cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4a e7       	ldi	r20, 0x7A	; 122
    1ccc:	53 e4       	ldi	r21, 0x43	; 67
    1cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8f 83       	std	Y+7, r24	; 0x07
    1cd8:	98 87       	std	Y+8, r25	; 0x08
    1cda:	a9 87       	std	Y+9, r26	; 0x09
    1cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <LCD_EN_Pluse+0x74>
		__ticks = 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	3f c0       	rjmp	.+126    	; 0x1d7e <LCD_EN_Pluse+0xf2>
	else if (__tmp > 65535)
    1d00:	6f 81       	ldd	r22, Y+7	; 0x07
    1d02:	78 85       	ldd	r23, Y+8	; 0x08
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	4c f5       	brge	.+82     	; 0x1d6a <LCD_EN_Pluse+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e2       	ldi	r20, 0x20	; 32
    1d26:	51 e4       	ldi	r21, 0x41	; 65
    1d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <LCD_EN_Pluse+0xd4>
    1d42:	89 e1       	ldi	r24, 0x19	; 25
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9c 83       	std	Y+4, r25	; 0x04
    1d48:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_EN_Pluse+0xc2>
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	69 f7       	brne	.-38     	; 0x1d42 <LCD_EN_Pluse+0xb6>
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <LCD_EN_Pluse+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6c:	78 85       	ldd	r23, Y+8	; 0x08
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_EN_Pluse+0xfe>
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_EN_PORT |= (1<<LCD_EN_PIN);
    1d92:	a8 e3       	ldi	r26, 0x38	; 56
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e8 e3       	ldi	r30, 0x38	; 56
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	88 60       	ori	r24, 0x08	; 8
    1d9e:	8c 93       	st	X, r24
}
    1da0:	2e 96       	adiw	r28, 0x0e	; 14
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <LCD_init>:
void LCD_init(void)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	6c 97       	sbiw	r28, 0x1c	; 28
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 ea       	ldi	r26, 0xA0	; 160
    1dcc:	b1 e4       	ldi	r27, 0x41	; 65
    1dce:	89 8f       	std	Y+25, r24	; 0x19
    1dd0:	9a 8f       	std	Y+26, r25	; 0x1a
    1dd2:	ab 8f       	std	Y+27, r26	; 0x1b
    1dd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	53 e4       	ldi	r21, 0x43	; 67
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8d 8b       	std	Y+21, r24	; 0x15
    1df0:	9e 8b       	std	Y+22, r25	; 0x16
    1df2:	af 8b       	std	Y+23, r26	; 0x17
    1df4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1df6:	6d 89       	ldd	r22, Y+21	; 0x15
    1df8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <LCD_init+0x66>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <LCD_init+0xe4>
	else if (__tmp > 65535)
    1e18:	6d 89       	ldd	r22, Y+21	; 0x15
    1e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	69 8d       	ldd	r22, Y+25	; 0x19
    1e32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <LCD_init+0xc6>
    1e5a:	89 e1       	ldi	r24, 0x19	; 25
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9a 8b       	std	Y+18, r25	; 0x12
    1e60:	89 8b       	std	Y+17, r24	; 0x11
    1e62:	89 89       	ldd	r24, Y+17	; 0x11
    1e64:	9a 89       	ldd	r25, Y+18	; 0x12
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_init+0xb4>
    1e6a:	9a 8b       	std	Y+18, r25	; 0x12
    1e6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e70:	9c 89       	ldd	r25, Y+20	; 0x14
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <LCD_init+0xa8>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	6d 89       	ldd	r22, Y+21	; 0x15
    1e84:	7e 89       	ldd	r23, Y+22	; 0x16
    1e86:	8f 89       	ldd	r24, Y+23	; 0x17
    1e88:	98 8d       	ldd	r25, Y+24	; 0x18
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9c 8b       	std	Y+20, r25	; 0x14
    1e94:	8b 8b       	std	Y+19, r24	; 0x13
    1e96:	8b 89       	ldd	r24, Y+19	; 0x13
    1e98:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9a:	98 8b       	std	Y+16, r25	; 0x10
    1e9c:	8f 87       	std	Y+15, r24	; 0x0f
    1e9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea0:	98 89       	ldd	r25, Y+16	; 0x10
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_init+0xf0>
    1ea6:	98 8b       	std	Y+16, r25	; 0x10
    1ea8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	// Set LCD Data Port output
	LCD_DATA_DIR_PORT = 0xff ;
    1eaa:	ea e3       	ldi	r30, 0x3A	; 58
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	80 83       	st	Z, r24
	// SET control pins output
	LCD_RS_DIR_PORT |=(1<<LCD_RS_PIN);
    1eb2:	a7 e3       	ldi	r26, 0x37	; 55
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e7 e3       	ldi	r30, 0x37	; 55
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	82 60       	ori	r24, 0x02	; 2
    1ebe:	8c 93       	st	X, r24
	LCD_RW_DIR_PORT |=(1<<LCD_RW_PIN);
    1ec0:	a7 e3       	ldi	r26, 0x37	; 55
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e7 e3       	ldi	r30, 0x37	; 55
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	84 60       	ori	r24, 0x04	; 4
    1ecc:	8c 93       	st	X, r24
	LCD_EN_DIR_PORT |=(1<<LCD_EN_PIN);
    1ece:	a7 e3       	ldi	r26, 0x37	; 55
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e7 e3       	ldi	r30, 0x37	; 55
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 60       	ori	r24, 0x08	; 8
    1eda:	8c 93       	st	X, r24

	//put the LCD in command mode (RS off)
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    1edc:	a8 e3       	ldi	r26, 0x38	; 56
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e8 e3       	ldi	r30, 0x38	; 56
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8d 7f       	andi	r24, 0xFD	; 253
    1ee8:	8c 93       	st	X, r24

	// put the LCD in write mode (RW off)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
    1eea:	a8 e3       	ldi	r26, 0x38	; 56
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e8 e3       	ldi	r30, 0x38	; 56
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8b 7f       	andi	r24, 0xFB	; 251
    1ef6:	8c 93       	st	X, r24

	// EN off
	LCD_EN_PORT &= ~(1<<LCD_EN_PIN);
    1ef8:	a8 e3       	ldi	r26, 0x38	; 56
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e8 e3       	ldi	r30, 0x38	; 56
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	87 7f       	andi	r24, 0xF7	; 247
    1f04:	8c 93       	st	X, r24
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a0 e7       	ldi	r26, 0x70	; 112
    1f0c:	b1 e4       	ldi	r27, 0x41	; 65
    1f0e:	8b 87       	std	Y+11, r24	; 0x0b
    1f10:	9c 87       	std	Y+12, r25	; 0x0c
    1f12:	ad 87       	std	Y+13, r26	; 0x0d
    1f14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	53 e4       	ldi	r21, 0x43	; 67
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8f 83       	std	Y+7, r24	; 0x07
    1f30:	98 87       	std	Y+8, r25	; 0x08
    1f32:	a9 87       	std	Y+9, r26	; 0x09
    1f34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <LCD_init+0x1a6>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <LCD_init+0x224>
	else if (__tmp > 65535)
    1f58:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5a:	78 85       	ldd	r23, Y+8	; 0x08
    1f5c:	89 85       	ldd	r24, Y+9	; 0x09
    1f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	4c f5       	brge	.+82     	; 0x1fc2 <LCD_init+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9e 83       	std	Y+6, r25	; 0x06
    1f96:	8d 83       	std	Y+5, r24	; 0x05
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <LCD_init+0x206>
    1f9a:	89 e1       	ldi	r24, 0x19	; 25
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 83       	std	Y+4, r25	; 0x04
    1fa0:	8b 83       	std	Y+3, r24	; 0x03
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <LCD_init+0x1f4>
    1faa:	9c 83       	std	Y+4, r25	; 0x04
    1fac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	9e 83       	std	Y+6, r25	; 0x06
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <LCD_init+0x1e8>
    1fc0:	14 c0       	rjmp	.+40     	; 0x1fea <LCD_init+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc4:	78 85       	ldd	r23, Y+8	; 0x08
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_init+0x230>
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(15);
	LCD_Clear_Screen();
    1fea:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_Clear_Screen>
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINE);

	/*4_BIT_MODE_INIT*/
#elif LCD_MODE == LCD_4_BIT_MODE

	LCD_Send_Command(0x02);
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINE);
    1ff4:	88 e2       	ldi	r24, 0x28	; 40
    1ff6:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_Send_Command>

#endif


	LCD_Send_Command(LCD_ENTRY_MODE);
    1ffa:	86 e0       	ldi	r24, 0x06	; 6
    1ffc:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
    2000:	80 e8       	ldi	r24, 0x80	; 128
    2002:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
    2006:	8f e0       	ldi	r24, 0x0F	; 15
    2008:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_Send_Command>

}
    200c:	6c 96       	adiw	r28, 0x1c	; 28
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <LCD_Is_Busy>:
void LCD_Is_Busy(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
	// set pin connected to D7 to receive data (Data direction as input).
	LCD_DATA_DIR_PORT &= ~(1<<LCD_D7_PIN);
    2026:	aa e3       	ldi	r26, 0x3A	; 58
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ea e3       	ldi	r30, 0x3A	; 58
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	8f 77       	andi	r24, 0x7F	; 127
    2032:	8c 93       	st	X, r24

	// put the LCD in read mode (RW on)
	LCD_RW_PORT |= (1<<LCD_RW_PIN);
    2034:	a8 e3       	ldi	r26, 0x38	; 56
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e8 e3       	ldi	r30, 0x38	; 56
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	84 60       	ori	r24, 0x04	; 4
    2040:	8c 93       	st	X, r24

	//put the LCD in command mode (RS off)
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    2042:	a8 e3       	ldi	r26, 0x38	; 56
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e8 e3       	ldi	r30, 0x38	; 56
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	8d 7f       	andi	r24, 0xFD	; 253
    204e:	8c 93       	st	X, r24

	while (((LCD_DATA_INP_PORT>>LCD_D7_PIN)&1));
    2050:	ea e3       	ldi	r30, 0x3A	; 58
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	88 23       	and	r24, r24
    2058:	dc f3       	brlt	.-10     	; 0x2050 <LCD_Is_Busy+0x32>

	// set  D7 to receive data (Data direction as output).
	LCD_DATA_DIR_PORT |= (1<<LCD_D7_PIN);
    205a:	aa e3       	ldi	r26, 0x3A	; 58
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	ea e3       	ldi	r30, 0x3A	; 58
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 68       	ori	r24, 0x80	; 128
    2066:	8c 93       	st	X, r24

	// put the LCD in write mode (RW off)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
    2068:	a8 e3       	ldi	r26, 0x38	; 56
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e8 e3       	ldi	r30, 0x38	; 56
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	8b 7f       	andi	r24, 0xFB	; 251
    2074:	8c 93       	st	X, r24

}
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <LCD_Send_Command>:
void LCD_Send_Command(uint8 command)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	89 83       	std	Y+1, r24	; 0x01
	// Check if LCD is busy
	LCD_Is_Busy();
    2088:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_Is_Busy>

	//put the LCD in command mode (RS off)
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    208c:	a8 e3       	ldi	r26, 0x38	; 56
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e8 e3       	ldi	r30, 0x38	; 56
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8d 7f       	andi	r24, 0xFD	; 253
    2098:	8c 93       	st	X, r24

	// put the LCD in write mode (RW off)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
    209a:	a8 e3       	ldi	r26, 0x38	; 56
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e8 e3       	ldi	r30, 0x38	; 56
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8b 7f       	andi	r24, 0xFB	; 251
    20a6:	8c 93       	st	X, r24
	LCD_EN_Pluse();

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of command on Data Pins
	LCD_DATA_OUT_PORT = (LCD_DATA_OUT_PORT & 0x0f)|(command & 0xf0);
    20a8:	ab e3       	ldi	r26, 0x3B	; 59
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	eb e3       	ldi	r30, 0x3B	; 59
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	98 2f       	mov	r25, r24
    20b4:	9f 70       	andi	r25, 0x0F	; 15
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	80 7f       	andi	r24, 0xF0	; 240
    20ba:	89 2b       	or	r24, r25
    20bc:	8c 93       	st	X, r24
	LCD_EN_Pluse();
    20be:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_EN_Pluse>

	// Write The Least 4 bits Of command on Data Pins
	LCD_DATA_OUT_PORT = (LCD_DATA_OUT_PORT & 0x0f)|(command <<4);
    20c2:	ab e3       	ldi	r26, 0x3B	; 59
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	eb e3       	ldi	r30, 0x3B	; 59
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	28 2f       	mov	r18, r24
    20ce:	2f 70       	andi	r18, 0x0F	; 15
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	82 95       	swap	r24
    20d8:	92 95       	swap	r25
    20da:	90 7f       	andi	r25, 0xF0	; 240
    20dc:	98 27       	eor	r25, r24
    20de:	80 7f       	andi	r24, 0xF0	; 240
    20e0:	98 27       	eor	r25, r24
    20e2:	82 2b       	or	r24, r18
    20e4:	8c 93       	st	X, r24
	LCD_EN_Pluse();
    20e6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_EN_Pluse>

#endif


}
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <LCD_Send_Character>:
void LCD_Send_Character(uint8 character)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	0f 92       	push	r0
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	89 83       	std	Y+1, r24	; 0x01
	//put the LCD in Data mode (RS on)
	LCD_RS_PORT |= (1<<LCD_RS_PIN);
    20fe:	a8 e3       	ldi	r26, 0x38	; 56
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e8 e3       	ldi	r30, 0x38	; 56
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	82 60       	ori	r24, 0x02	; 2
    210a:	8c 93       	st	X, r24

	// put the LCD in write mode (RW off)
	LCD_RW_PORT &= ~(1<<LCD_RW_PIN);
    210c:	a8 e3       	ldi	r26, 0x38	; 56
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e8 e3       	ldi	r30, 0x38	; 56
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	8b 7f       	andi	r24, 0xFB	; 251
    2118:	8c 93       	st	X, r24
	LCD_EN_Pluse();

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of data on Data Pins
	LCD_DATA_OUT_PORT = (LCD_DATA_OUT_PORT & 0x0f)|(character & 0xf0);
    211a:	ab e3       	ldi	r26, 0x3B	; 59
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	eb e3       	ldi	r30, 0x3B	; 59
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	98 2f       	mov	r25, r24
    2126:	9f 70       	andi	r25, 0x0F	; 15
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	80 7f       	andi	r24, 0xF0	; 240
    212c:	89 2b       	or	r24, r25
    212e:	8c 93       	st	X, r24
	LCD_EN_Pluse();
    2130:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_EN_Pluse>

	// Write The Least 4 bits Of data on Data Pins
	LCD_DATA_OUT_PORT = (LCD_DATA_OUT_PORT & 0x0f)|(character <<4);
    2134:	ab e3       	ldi	r26, 0x3B	; 59
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	eb e3       	ldi	r30, 0x3B	; 59
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	28 2f       	mov	r18, r24
    2140:	2f 70       	andi	r18, 0x0F	; 15
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	82 95       	swap	r24
    214a:	92 95       	swap	r25
    214c:	90 7f       	andi	r25, 0xF0	; 240
    214e:	98 27       	eor	r25, r24
    2150:	80 7f       	andi	r24, 0xF0	; 240
    2152:	98 27       	eor	r25, r24
    2154:	82 2b       	or	r24, r18
    2156:	8c 93       	st	X, r24
	LCD_EN_Pluse();
    2158:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_EN_Pluse>

#endif

}
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <LCD_Send_string>:
void LCD_Send_string(uint8* string)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <LCD_Send_string+0x6>
    216a:	0f 92       	push	r0
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	9b 83       	std	Y+3, r25	; 0x03
    2172:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = 0;
    2174:	19 82       	std	Y+1, r1	; 0x01
    2176:	1f c0       	rjmp	.+62     	; 0x21b6 <LCD_Send_string+0x52>
	while( *string >0)
	{
		counter++;
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_Character(*string);
    217e:	ea 81       	ldd	r30, Y+2	; 0x02
    2180:	fb 81       	ldd	r31, Y+3	; 0x03
    2182:	80 81       	ld	r24, Z
    2184:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LCD_Send_Character>
		string++;
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	9b 81       	ldd	r25, Y+3	; 0x03
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	9b 83       	std	Y+3, r25	; 0x03
    2190:	8a 83       	std	Y+2, r24	; 0x02

		if(counter == 16)
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	80 31       	cpi	r24, 0x10	; 16
    2196:	29 f4       	brne	.+10     	; 0x21a2 <LCD_Send_string+0x3e>
		{
			LCD_SET_Cursor(2, 0);
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_SET_Cursor>
    21a0:	0a c0       	rjmp	.+20     	; 0x21b6 <LCD_Send_string+0x52>
		}
		else if(counter == 32)
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	80 32       	cpi	r24, 0x20	; 32
    21a6:	39 f4       	brne	.+14     	; 0x21b6 <LCD_Send_string+0x52>
		{
			LCD_Clear_Screen();
    21a8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_Clear_Screen>
			LCD_SET_Cursor(1, 0);
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_SET_Cursor>
			counter =0 ;
    21b4:	19 82       	std	Y+1, r1	; 0x01

}
void LCD_Send_string(uint8* string)
{
	uint8 counter = 0;
	while( *string >0)
    21b6:	ea 81       	ldd	r30, Y+2	; 0x02
    21b8:	fb 81       	ldd	r31, Y+3	; 0x03
    21ba:	80 81       	ld	r24, Z
    21bc:	88 23       	and	r24, r24
    21be:	e1 f6       	brne	.-72     	; 0x2178 <LCD_Send_string+0x14>
			LCD_Clear_Screen();
			LCD_SET_Cursor(1, 0);
			counter =0 ;
		}
	}
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <LCD_Clear_Screen>:
void LCD_Clear_Screen(void)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Command(LCD_CLEAR_SCREEN);
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_Send_Command>
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <LCD_SET_Cursor>:
void LCD_SET_Cursor(uint8 line , uint8 position )
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <LCD_SET_Cursor+0x6>
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	41 f4       	brne	.+16     	; 0x2204 <LCD_SET_Cursor+0x24>
	{
		if(position<16)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	80 31       	cpi	r24, 0x10	; 16
    21f8:	78 f4       	brcc	.+30     	; 0x2218 <LCD_SET_Cursor+0x38>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW + position);
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	80 58       	subi	r24, 0x80	; 128
    21fe:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_Send_Command>
    2202:	0a c0       	rjmp	.+20     	; 0x2218 <LCD_SET_Cursor+0x38>
	}
	else if (line == 2)
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	39 f4       	brne	.+14     	; 0x2218 <LCD_SET_Cursor+0x38>
	{
		if(position<16)
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	80 31       	cpi	r24, 0x10	; 16
    220e:	20 f4       	brcc	.+8      	; 0x2218 <LCD_SET_Cursor+0x38>
		LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW + position);
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	80 54       	subi	r24, 0x40	; 64
    2214:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_Send_Command>
	}
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <LCD_Display_Number>:
void LCD_Display_Number(uint32 number)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	29 97       	sbiw	r28, 0x09	; 9
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	99 87       	std	Y+9, r25	; 0x09
    2238:	88 87       	std	Y+8, r24	; 0x08
	uint8 str[7];
	sprintf(str,"%d",number);
    223a:	00 d0       	rcall	.+0      	; 0x223c <LCD_Display_Number+0x1a>
    223c:	00 d0       	rcall	.+0      	; 0x223e <LCD_Display_Number+0x1c>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <LCD_Display_Number+0x1e>
    2240:	ed b7       	in	r30, 0x3d	; 61
    2242:	fe b7       	in	r31, 0x3e	; 62
    2244:	31 96       	adiw	r30, 0x01	; 1
    2246:	ce 01       	movw	r24, r28
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	80 83       	st	Z, r24
    224e:	80 e6       	ldi	r24, 0x60	; 96
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	93 83       	std	Z+3, r25	; 0x03
    2254:	82 83       	std	Z+2, r24	; 0x02
    2256:	88 85       	ldd	r24, Y+8	; 0x08
    2258:	99 85       	ldd	r25, Y+9	; 0x09
    225a:	95 83       	std	Z+5, r25	; 0x05
    225c:	84 83       	std	Z+4, r24	; 0x04
    225e:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
    2262:	8d b7       	in	r24, 0x3d	; 61
    2264:	9e b7       	in	r25, 0x3e	; 62
    2266:	06 96       	adiw	r24, 0x06	; 6
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	9e bf       	out	0x3e, r25	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	8d bf       	out	0x3d, r24	; 61
	LCD_Send_string(str);
    2272:	ce 01       	movw	r24, r28
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_Send_string>
}
    227a:	29 96       	adiw	r28, 0x09	; 9
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <LCD_Display_Real_Number>:
void LCD_Display_Real_Number(double number)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	a2 97       	sbiw	r28, 0x22	; 34
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	6a 8f       	std	Y+26, r22	; 0x1a
    22a2:	7b 8f       	std	Y+27, r23	; 0x1b
    22a4:	8c 8f       	std	Y+28, r24	; 0x1c
    22a6:	9d 8f       	std	Y+29, r25	; 0x1d
	uint8 str[16];

	uint8 sign = (number<0)? "-":"";
    22a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	24 f4       	brge	.+8      	; 0x22c8 <LCD_Display_Real_Number+0x3c>
    22c0:	83 e6       	ldi	r24, 0x63	; 99
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	8a a3       	std	Y+34, r24	; 0x22
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <LCD_Display_Real_Number+0x42>
    22c8:	85 e6       	ldi	r24, 0x65	; 101
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	8a a3       	std	Y+34, r24	; 0x22
    22ce:	2a a1       	ldd	r18, Y+34	; 0x22
    22d0:	29 87       	std	Y+9, r18	; 0x09
	float Temp = (number<0)? -number:number;
    22d2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22d4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	64 f4       	brge	.+24     	; 0x2302 <LCD_Display_Real_Number+0x76>
    22ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22ee:	ac 8d       	ldd	r26, Y+28	; 0x1c
    22f0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    22f2:	9c 01       	movw	r18, r24
    22f4:	ad 01       	movw	r20, r26
    22f6:	50 58       	subi	r21, 0x80	; 128
    22f8:	2e 8f       	std	Y+30, r18	; 0x1e
    22fa:	3f 8f       	std	Y+31, r19	; 0x1f
    22fc:	48 a3       	std	Y+32, r20	; 0x20
    22fe:	59 a3       	std	Y+33, r21	; 0x21
    2300:	08 c0       	rjmp	.+16     	; 0x2312 <LCD_Display_Real_Number+0x86>
    2302:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2304:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2306:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2308:	bd 8d       	ldd	r27, Y+29	; 0x1d
    230a:	8e 8f       	std	Y+30, r24	; 0x1e
    230c:	9f 8f       	std	Y+31, r25	; 0x1f
    230e:	a8 a3       	std	Y+32, r26	; 0x20
    2310:	b9 a3       	std	Y+33, r27	; 0x21
    2312:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2314:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2316:	48 a1       	ldd	r20, Y+32	; 0x20
    2318:	59 a1       	ldd	r21, Y+33	; 0x21
    231a:	2d 83       	std	Y+5, r18	; 0x05
    231c:	3e 83       	std	Y+6, r19	; 0x06
    231e:	4f 83       	std	Y+7, r20	; 0x07
    2320:	58 87       	std	Y+8, r21	; 0x08

	uint32 temp1 = Temp;
    2322:	6d 81       	ldd	r22, Y+5	; 0x05
    2324:	7e 81       	ldd	r23, Y+6	; 0x06
    2326:	8f 81       	ldd	r24, Y+7	; 0x07
    2328:	98 85       	ldd	r25, Y+8	; 0x08
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
	uint32 temp2 = (Temp - temp1) *10000 ;
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	cc 01       	movw	r24, r24
    233c:	a0 e0       	ldi	r26, 0x00	; 0
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	6d 81       	ldd	r22, Y+5	; 0x05
    234e:	7e 81       	ldd	r23, Y+6	; 0x06
    2350:	8f 81       	ldd	r24, Y+7	; 0x07
    2352:	98 85       	ldd	r25, Y+8	; 0x08
    2354:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	bc 01       	movw	r22, r24
    235e:	cd 01       	movw	r24, r26
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e4       	ldi	r19, 0x40	; 64
    2364:	4c e1       	ldi	r20, 0x1C	; 28
    2366:	56 e4       	ldi	r21, 0x46	; 70
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
	sprintf(str,"%s%d.%04d",sign , temp1, temp2);
    2380:	89 85       	ldd	r24, Y+9	; 0x09
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	4d b7       	in	r20, 0x3d	; 61
    2388:	5e b7       	in	r21, 0x3e	; 62
    238a:	4a 50       	subi	r20, 0x0A	; 10
    238c:	50 40       	sbci	r21, 0x00	; 0
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	5e bf       	out	0x3e, r21	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	4d bf       	out	0x3d, r20	; 61
    2398:	ed b7       	in	r30, 0x3d	; 61
    239a:	fe b7       	in	r31, 0x3e	; 62
    239c:	31 96       	adiw	r30, 0x01	; 1
    239e:	ce 01       	movw	r24, r28
    23a0:	0a 96       	adiw	r24, 0x0a	; 10
    23a2:	91 83       	std	Z+1, r25	; 0x01
    23a4:	80 83       	st	Z, r24
    23a6:	86 e6       	ldi	r24, 0x66	; 102
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	93 83       	std	Z+3, r25	; 0x03
    23ac:	82 83       	std	Z+2, r24	; 0x02
    23ae:	35 83       	std	Z+5, r19	; 0x05
    23b0:	24 83       	std	Z+4, r18	; 0x04
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	97 83       	std	Z+7, r25	; 0x07
    23b8:	86 83       	std	Z+6, r24	; 0x06
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	91 87       	std	Z+9, r25	; 0x09
    23c0:	80 87       	std	Z+8, r24	; 0x08
    23c2:	0e 94 b9 12 	call	0x2572	; 0x2572 <sprintf>
    23c6:	8d b7       	in	r24, 0x3d	; 61
    23c8:	9e b7       	in	r25, 0x3e	; 62
    23ca:	0a 96       	adiw	r24, 0x0a	; 10
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	9e bf       	out	0x3e, r25	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	8d bf       	out	0x3d, r24	; 61
	LCD_Send_string(str);
    23d6:	ce 01       	movw	r24, r28
    23d8:	0a 96       	adiw	r24, 0x0a	; 10
    23da:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_Send_string>
}
    23de:	a2 96       	adiw	r28, 0x22	; 34
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <main>:
USART_Config_t usart_cfg ;
uint16_t a , x ;


int main(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(DIO_PORTD , DIO_PIN0 , DIO_PIN_INPUT);
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD , DIO_PIN1 , DIO_PIN_OUTPUT);
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	61 e0       	ldi	r22, 0x01	; 1
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_SetPinDirection>

	usart_cfg.BaudRate = USART_BaudRate_9600;
    240c:	80 e8       	ldi	r24, 0x80	; 128
    240e:	95 e2       	ldi	r25, 0x25	; 37
    2410:	a0 e0       	ldi	r26, 0x00	; 0
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	80 93 92 01 	sts	0x0192, r24
    2418:	90 93 93 01 	sts	0x0193, r25
    241c:	a0 93 94 01 	sts	0x0194, r26
    2420:	b0 93 95 01 	sts	0x0195, r27
	usart_cfg.Fosc = 8000000;
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	92 e1       	ldi	r25, 0x12	; 18
    2428:	aa e7       	ldi	r26, 0x7A	; 122
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	80 93 8e 01 	sts	0x018E, r24
    2430:	90 93 8f 01 	sts	0x018F, r25
    2434:	a0 93 90 01 	sts	0x0190, r26
    2438:	b0 93 91 01 	sts	0x0191, r27
	usart_cfg.Mode = USART_Normal_Mode;
    243c:	10 92 96 01 	sts	0x0196, r1
	usart_cfg.Parity_status = USART_Parity_Disable;
    2440:	10 92 99 01 	sts	0x0199, r1
	usart_cfg.Stop_bits = USART_StopBit_1bit;
    2444:	10 92 98 01 	sts	0x0198, r1
	usart_cfg.data_bits = USART_DataBit_8bits;
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	80 93 97 01 	sts	0x0197, r24
	MCAL_USART_Init(&usart_cfg);
    244e:	8e e8       	ldi	r24, 0x8E	; 142
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MCAL_USART_Init>
	LCD_init();
    2456:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <LCD_init>
	GI_Enable;
    245a:	af e5       	ldi	r26, 0x5F	; 95
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	ef e5       	ldi	r30, 0x5F	; 95
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	80 68       	ori	r24, 0x80	; 128
    2466:	8c 93       	st	X, r24

	LCD_Send_string("UASRT AIK");
    2468:	80 e7       	ldi	r24, 0x70	; 112
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_Send_string>
    a = 'A' ;
    2470:	81 e4       	ldi	r24, 0x41	; 65
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	90 93 9b 01 	sts	0x019B, r25
    2478:	80 93 9a 01 	sts	0x019A, r24
    MCAL_USART_Send(&a , disable);
    247c:	8a e9       	ldi	r24, 0x9A	; 154
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	61 e0       	ldi	r22, 0x01	; 1
    2482:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <MCAL_USART_Send>
    a = 'I';
    2486:	89 e4       	ldi	r24, 0x49	; 73
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	90 93 9b 01 	sts	0x019B, r25
    248e:	80 93 9a 01 	sts	0x019A, r24
    MCAL_USART_Send(&a , disable);
    2492:	8a e9       	ldi	r24, 0x9A	; 154
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <MCAL_USART_Send>
    a = 'K';
    249c:	8b e4       	ldi	r24, 0x4B	; 75
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	90 93 9b 01 	sts	0x019B, r25
    24a4:	80 93 9a 01 	sts	0x019A, r24
    MCAL_USART_Send(&a , disable);
    24a8:	8a e9       	ldi	r24, 0x9A	; 154
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <MCAL_USART_Send>
	LCD_SET_Cursor(2,0);
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_SET_Cursor>
    24be:	ff cf       	rjmp	.-2      	; 0x24be <main+0xce>

000024c0 <__udivmodsi4>:
    24c0:	a1 e2       	ldi	r26, 0x21	; 33
    24c2:	1a 2e       	mov	r1, r26
    24c4:	aa 1b       	sub	r26, r26
    24c6:	bb 1b       	sub	r27, r27
    24c8:	fd 01       	movw	r30, r26
    24ca:	0d c0       	rjmp	.+26     	; 0x24e6 <__udivmodsi4_ep>

000024cc <__udivmodsi4_loop>:
    24cc:	aa 1f       	adc	r26, r26
    24ce:	bb 1f       	adc	r27, r27
    24d0:	ee 1f       	adc	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	a2 17       	cp	r26, r18
    24d6:	b3 07       	cpc	r27, r19
    24d8:	e4 07       	cpc	r30, r20
    24da:	f5 07       	cpc	r31, r21
    24dc:	20 f0       	brcs	.+8      	; 0x24e6 <__udivmodsi4_ep>
    24de:	a2 1b       	sub	r26, r18
    24e0:	b3 0b       	sbc	r27, r19
    24e2:	e4 0b       	sbc	r30, r20
    24e4:	f5 0b       	sbc	r31, r21

000024e6 <__udivmodsi4_ep>:
    24e6:	66 1f       	adc	r22, r22
    24e8:	77 1f       	adc	r23, r23
    24ea:	88 1f       	adc	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	1a 94       	dec	r1
    24f0:	69 f7       	brne	.-38     	; 0x24cc <__udivmodsi4_loop>
    24f2:	60 95       	com	r22
    24f4:	70 95       	com	r23
    24f6:	80 95       	com	r24
    24f8:	90 95       	com	r25
    24fa:	9b 01       	movw	r18, r22
    24fc:	ac 01       	movw	r20, r24
    24fe:	bd 01       	movw	r22, r26
    2500:	cf 01       	movw	r24, r30
    2502:	08 95       	ret

00002504 <__prologue_saves__>:
    2504:	2f 92       	push	r2
    2506:	3f 92       	push	r3
    2508:	4f 92       	push	r4
    250a:	5f 92       	push	r5
    250c:	6f 92       	push	r6
    250e:	7f 92       	push	r7
    2510:	8f 92       	push	r8
    2512:	9f 92       	push	r9
    2514:	af 92       	push	r10
    2516:	bf 92       	push	r11
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	ca 1b       	sub	r28, r26
    252e:	db 0b       	sbc	r29, r27
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	09 94       	ijmp

0000253c <__epilogue_restores__>:
    253c:	2a 88       	ldd	r2, Y+18	; 0x12
    253e:	39 88       	ldd	r3, Y+17	; 0x11
    2540:	48 88       	ldd	r4, Y+16	; 0x10
    2542:	5f 84       	ldd	r5, Y+15	; 0x0f
    2544:	6e 84       	ldd	r6, Y+14	; 0x0e
    2546:	7d 84       	ldd	r7, Y+13	; 0x0d
    2548:	8c 84       	ldd	r8, Y+12	; 0x0c
    254a:	9b 84       	ldd	r9, Y+11	; 0x0b
    254c:	aa 84       	ldd	r10, Y+10	; 0x0a
    254e:	b9 84       	ldd	r11, Y+9	; 0x09
    2550:	c8 84       	ldd	r12, Y+8	; 0x08
    2552:	df 80       	ldd	r13, Y+7	; 0x07
    2554:	ee 80       	ldd	r14, Y+6	; 0x06
    2556:	fd 80       	ldd	r15, Y+5	; 0x05
    2558:	0c 81       	ldd	r16, Y+4	; 0x04
    255a:	1b 81       	ldd	r17, Y+3	; 0x03
    255c:	aa 81       	ldd	r26, Y+2	; 0x02
    255e:	b9 81       	ldd	r27, Y+1	; 0x01
    2560:	ce 0f       	add	r28, r30
    2562:	d1 1d       	adc	r29, r1
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	ed 01       	movw	r28, r26
    2570:	08 95       	ret

00002572 <sprintf>:
    2572:	ae e0       	ldi	r26, 0x0E	; 14
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ef eb       	ldi	r30, 0xBF	; 191
    2578:	f2 e1       	ldi	r31, 0x12	; 18
    257a:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__prologue_saves__+0x1c>
    257e:	0d 89       	ldd	r16, Y+21	; 0x15
    2580:	1e 89       	ldd	r17, Y+22	; 0x16
    2582:	86 e0       	ldi	r24, 0x06	; 6
    2584:	8c 83       	std	Y+4, r24	; 0x04
    2586:	1a 83       	std	Y+2, r17	; 0x02
    2588:	09 83       	std	Y+1, r16	; 0x01
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	9f e7       	ldi	r25, 0x7F	; 127
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
    2592:	9e 01       	movw	r18, r28
    2594:	27 5e       	subi	r18, 0xE7	; 231
    2596:	3f 4f       	sbci	r19, 0xFF	; 255
    2598:	ce 01       	movw	r24, r28
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	6f 89       	ldd	r22, Y+23	; 0x17
    259e:	78 8d       	ldd	r23, Y+24	; 0x18
    25a0:	a9 01       	movw	r20, r18
    25a2:	0e 94 dd 12 	call	0x25ba	; 0x25ba <vfprintf>
    25a6:	2f 81       	ldd	r18, Y+7	; 0x07
    25a8:	38 85       	ldd	r19, Y+8	; 0x08
    25aa:	02 0f       	add	r16, r18
    25ac:	13 1f       	adc	r17, r19
    25ae:	f8 01       	movw	r30, r16
    25b0:	10 82       	st	Z, r1
    25b2:	2e 96       	adiw	r28, 0x0e	; 14
    25b4:	e4 e0       	ldi	r30, 0x04	; 4
    25b6:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__epilogue_restores__+0x1c>

000025ba <vfprintf>:
    25ba:	ab e0       	ldi	r26, 0x0B	; 11
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e3 ee       	ldi	r30, 0xE3	; 227
    25c0:	f2 e1       	ldi	r31, 0x12	; 18
    25c2:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__prologue_saves__>
    25c6:	3c 01       	movw	r6, r24
    25c8:	2b 01       	movw	r4, r22
    25ca:	5a 01       	movw	r10, r20
    25cc:	fc 01       	movw	r30, r24
    25ce:	17 82       	std	Z+7, r1	; 0x07
    25d0:	16 82       	std	Z+6, r1	; 0x06
    25d2:	83 81       	ldd	r24, Z+3	; 0x03
    25d4:	81 fd       	sbrc	r24, 1
    25d6:	03 c0       	rjmp	.+6      	; 0x25de <vfprintf+0x24>
    25d8:	6f ef       	ldi	r22, 0xFF	; 255
    25da:	7f ef       	ldi	r23, 0xFF	; 255
    25dc:	c6 c1       	rjmp	.+908    	; 0x296a <vfprintf+0x3b0>
    25de:	9a e0       	ldi	r25, 0x0A	; 10
    25e0:	89 2e       	mov	r8, r25
    25e2:	1e 01       	movw	r2, r28
    25e4:	08 94       	sec
    25e6:	21 1c       	adc	r2, r1
    25e8:	31 1c       	adc	r3, r1
    25ea:	f3 01       	movw	r30, r6
    25ec:	23 81       	ldd	r18, Z+3	; 0x03
    25ee:	f2 01       	movw	r30, r4
    25f0:	23 fd       	sbrc	r18, 3
    25f2:	85 91       	lpm	r24, Z+
    25f4:	23 ff       	sbrs	r18, 3
    25f6:	81 91       	ld	r24, Z+
    25f8:	2f 01       	movw	r4, r30
    25fa:	88 23       	and	r24, r24
    25fc:	09 f4       	brne	.+2      	; 0x2600 <vfprintf+0x46>
    25fe:	b2 c1       	rjmp	.+868    	; 0x2964 <vfprintf+0x3aa>
    2600:	85 32       	cpi	r24, 0x25	; 37
    2602:	39 f4       	brne	.+14     	; 0x2612 <vfprintf+0x58>
    2604:	23 fd       	sbrc	r18, 3
    2606:	85 91       	lpm	r24, Z+
    2608:	23 ff       	sbrs	r18, 3
    260a:	81 91       	ld	r24, Z+
    260c:	2f 01       	movw	r4, r30
    260e:	85 32       	cpi	r24, 0x25	; 37
    2610:	29 f4       	brne	.+10     	; 0x261c <vfprintf+0x62>
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	b3 01       	movw	r22, r6
    2616:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    261a:	e7 cf       	rjmp	.-50     	; 0x25ea <vfprintf+0x30>
    261c:	98 2f       	mov	r25, r24
    261e:	ff 24       	eor	r15, r15
    2620:	ee 24       	eor	r14, r14
    2622:	99 24       	eor	r9, r9
    2624:	ff e1       	ldi	r31, 0x1F	; 31
    2626:	ff 15       	cp	r31, r15
    2628:	d0 f0       	brcs	.+52     	; 0x265e <vfprintf+0xa4>
    262a:	9b 32       	cpi	r25, 0x2B	; 43
    262c:	69 f0       	breq	.+26     	; 0x2648 <vfprintf+0x8e>
    262e:	9c 32       	cpi	r25, 0x2C	; 44
    2630:	28 f4       	brcc	.+10     	; 0x263c <vfprintf+0x82>
    2632:	90 32       	cpi	r25, 0x20	; 32
    2634:	59 f0       	breq	.+22     	; 0x264c <vfprintf+0x92>
    2636:	93 32       	cpi	r25, 0x23	; 35
    2638:	91 f4       	brne	.+36     	; 0x265e <vfprintf+0xa4>
    263a:	0e c0       	rjmp	.+28     	; 0x2658 <vfprintf+0x9e>
    263c:	9d 32       	cpi	r25, 0x2D	; 45
    263e:	49 f0       	breq	.+18     	; 0x2652 <vfprintf+0x98>
    2640:	90 33       	cpi	r25, 0x30	; 48
    2642:	69 f4       	brne	.+26     	; 0x265e <vfprintf+0xa4>
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	24 c0       	rjmp	.+72     	; 0x2690 <vfprintf+0xd6>
    2648:	52 e0       	ldi	r21, 0x02	; 2
    264a:	f5 2a       	or	r15, r21
    264c:	84 e0       	ldi	r24, 0x04	; 4
    264e:	f8 2a       	or	r15, r24
    2650:	28 c0       	rjmp	.+80     	; 0x26a2 <vfprintf+0xe8>
    2652:	98 e0       	ldi	r25, 0x08	; 8
    2654:	f9 2a       	or	r15, r25
    2656:	25 c0       	rjmp	.+74     	; 0x26a2 <vfprintf+0xe8>
    2658:	e0 e1       	ldi	r30, 0x10	; 16
    265a:	fe 2a       	or	r15, r30
    265c:	22 c0       	rjmp	.+68     	; 0x26a2 <vfprintf+0xe8>
    265e:	f7 fc       	sbrc	r15, 7
    2660:	29 c0       	rjmp	.+82     	; 0x26b4 <vfprintf+0xfa>
    2662:	89 2f       	mov	r24, r25
    2664:	80 53       	subi	r24, 0x30	; 48
    2666:	8a 30       	cpi	r24, 0x0A	; 10
    2668:	70 f4       	brcc	.+28     	; 0x2686 <vfprintf+0xcc>
    266a:	f6 fe       	sbrs	r15, 6
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <vfprintf+0xbe>
    266e:	98 9c       	mul	r9, r8
    2670:	90 2c       	mov	r9, r0
    2672:	11 24       	eor	r1, r1
    2674:	98 0e       	add	r9, r24
    2676:	15 c0       	rjmp	.+42     	; 0x26a2 <vfprintf+0xe8>
    2678:	e8 9c       	mul	r14, r8
    267a:	e0 2c       	mov	r14, r0
    267c:	11 24       	eor	r1, r1
    267e:	e8 0e       	add	r14, r24
    2680:	f0 e2       	ldi	r31, 0x20	; 32
    2682:	ff 2a       	or	r15, r31
    2684:	0e c0       	rjmp	.+28     	; 0x26a2 <vfprintf+0xe8>
    2686:	9e 32       	cpi	r25, 0x2E	; 46
    2688:	29 f4       	brne	.+10     	; 0x2694 <vfprintf+0xda>
    268a:	f6 fc       	sbrc	r15, 6
    268c:	6b c1       	rjmp	.+726    	; 0x2964 <vfprintf+0x3aa>
    268e:	40 e4       	ldi	r20, 0x40	; 64
    2690:	f4 2a       	or	r15, r20
    2692:	07 c0       	rjmp	.+14     	; 0x26a2 <vfprintf+0xe8>
    2694:	9c 36       	cpi	r25, 0x6C	; 108
    2696:	19 f4       	brne	.+6      	; 0x269e <vfprintf+0xe4>
    2698:	50 e8       	ldi	r21, 0x80	; 128
    269a:	f5 2a       	or	r15, r21
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <vfprintf+0xe8>
    269e:	98 36       	cpi	r25, 0x68	; 104
    26a0:	49 f4       	brne	.+18     	; 0x26b4 <vfprintf+0xfa>
    26a2:	f2 01       	movw	r30, r4
    26a4:	23 fd       	sbrc	r18, 3
    26a6:	95 91       	lpm	r25, Z+
    26a8:	23 ff       	sbrs	r18, 3
    26aa:	91 91       	ld	r25, Z+
    26ac:	2f 01       	movw	r4, r30
    26ae:	99 23       	and	r25, r25
    26b0:	09 f0       	breq	.+2      	; 0x26b4 <vfprintf+0xfa>
    26b2:	b8 cf       	rjmp	.-144    	; 0x2624 <vfprintf+0x6a>
    26b4:	89 2f       	mov	r24, r25
    26b6:	85 54       	subi	r24, 0x45	; 69
    26b8:	83 30       	cpi	r24, 0x03	; 3
    26ba:	18 f0       	brcs	.+6      	; 0x26c2 <vfprintf+0x108>
    26bc:	80 52       	subi	r24, 0x20	; 32
    26be:	83 30       	cpi	r24, 0x03	; 3
    26c0:	38 f4       	brcc	.+14     	; 0x26d0 <vfprintf+0x116>
    26c2:	44 e0       	ldi	r20, 0x04	; 4
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	a4 0e       	add	r10, r20
    26c8:	b5 1e       	adc	r11, r21
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	59 83       	std	Y+1, r21	; 0x01
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <vfprintf+0x134>
    26d0:	93 36       	cpi	r25, 0x63	; 99
    26d2:	31 f0       	breq	.+12     	; 0x26e0 <vfprintf+0x126>
    26d4:	93 37       	cpi	r25, 0x73	; 115
    26d6:	79 f0       	breq	.+30     	; 0x26f6 <vfprintf+0x13c>
    26d8:	93 35       	cpi	r25, 0x53	; 83
    26da:	09 f0       	breq	.+2      	; 0x26de <vfprintf+0x124>
    26dc:	56 c0       	rjmp	.+172    	; 0x278a <vfprintf+0x1d0>
    26de:	20 c0       	rjmp	.+64     	; 0x2720 <vfprintf+0x166>
    26e0:	f5 01       	movw	r30, r10
    26e2:	80 81       	ld	r24, Z
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	42 e0       	ldi	r20, 0x02	; 2
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	a4 0e       	add	r10, r20
    26ec:	b5 1e       	adc	r11, r21
    26ee:	61 01       	movw	r12, r2
    26f0:	01 e0       	ldi	r16, 0x01	; 1
    26f2:	10 e0       	ldi	r17, 0x00	; 0
    26f4:	12 c0       	rjmp	.+36     	; 0x271a <vfprintf+0x160>
    26f6:	f5 01       	movw	r30, r10
    26f8:	c0 80       	ld	r12, Z
    26fa:	d1 80       	ldd	r13, Z+1	; 0x01
    26fc:	f6 fc       	sbrc	r15, 6
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <vfprintf+0x14c>
    2700:	6f ef       	ldi	r22, 0xFF	; 255
    2702:	7f ef       	ldi	r23, 0xFF	; 255
    2704:	02 c0       	rjmp	.+4      	; 0x270a <vfprintf+0x150>
    2706:	69 2d       	mov	r22, r9
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	42 e0       	ldi	r20, 0x02	; 2
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	a4 0e       	add	r10, r20
    2710:	b5 1e       	adc	r11, r21
    2712:	c6 01       	movw	r24, r12
    2714:	0e 94 c5 14 	call	0x298a	; 0x298a <strnlen>
    2718:	8c 01       	movw	r16, r24
    271a:	5f e7       	ldi	r21, 0x7F	; 127
    271c:	f5 22       	and	r15, r21
    271e:	14 c0       	rjmp	.+40     	; 0x2748 <vfprintf+0x18e>
    2720:	f5 01       	movw	r30, r10
    2722:	c0 80       	ld	r12, Z
    2724:	d1 80       	ldd	r13, Z+1	; 0x01
    2726:	f6 fc       	sbrc	r15, 6
    2728:	03 c0       	rjmp	.+6      	; 0x2730 <vfprintf+0x176>
    272a:	6f ef       	ldi	r22, 0xFF	; 255
    272c:	7f ef       	ldi	r23, 0xFF	; 255
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <vfprintf+0x17a>
    2730:	69 2d       	mov	r22, r9
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	42 e0       	ldi	r20, 0x02	; 2
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	a4 0e       	add	r10, r20
    273a:	b5 1e       	adc	r11, r21
    273c:	c6 01       	movw	r24, r12
    273e:	0e 94 ba 14 	call	0x2974	; 0x2974 <strnlen_P>
    2742:	8c 01       	movw	r16, r24
    2744:	50 e8       	ldi	r21, 0x80	; 128
    2746:	f5 2a       	or	r15, r21
    2748:	f3 fe       	sbrs	r15, 3
    274a:	07 c0       	rjmp	.+14     	; 0x275a <vfprintf+0x1a0>
    274c:	1a c0       	rjmp	.+52     	; 0x2782 <vfprintf+0x1c8>
    274e:	80 e2       	ldi	r24, 0x20	; 32
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	b3 01       	movw	r22, r6
    2754:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    2758:	ea 94       	dec	r14
    275a:	8e 2d       	mov	r24, r14
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	08 17       	cp	r16, r24
    2760:	19 07       	cpc	r17, r25
    2762:	a8 f3       	brcs	.-22     	; 0x274e <vfprintf+0x194>
    2764:	0e c0       	rjmp	.+28     	; 0x2782 <vfprintf+0x1c8>
    2766:	f6 01       	movw	r30, r12
    2768:	f7 fc       	sbrc	r15, 7
    276a:	85 91       	lpm	r24, Z+
    276c:	f7 fe       	sbrs	r15, 7
    276e:	81 91       	ld	r24, Z+
    2770:	6f 01       	movw	r12, r30
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	b3 01       	movw	r22, r6
    2776:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    277a:	e1 10       	cpse	r14, r1
    277c:	ea 94       	dec	r14
    277e:	01 50       	subi	r16, 0x01	; 1
    2780:	10 40       	sbci	r17, 0x00	; 0
    2782:	01 15       	cp	r16, r1
    2784:	11 05       	cpc	r17, r1
    2786:	79 f7       	brne	.-34     	; 0x2766 <vfprintf+0x1ac>
    2788:	ea c0       	rjmp	.+468    	; 0x295e <vfprintf+0x3a4>
    278a:	94 36       	cpi	r25, 0x64	; 100
    278c:	11 f0       	breq	.+4      	; 0x2792 <vfprintf+0x1d8>
    278e:	99 36       	cpi	r25, 0x69	; 105
    2790:	69 f5       	brne	.+90     	; 0x27ec <vfprintf+0x232>
    2792:	f7 fe       	sbrs	r15, 7
    2794:	08 c0       	rjmp	.+16     	; 0x27a6 <vfprintf+0x1ec>
    2796:	f5 01       	movw	r30, r10
    2798:	20 81       	ld	r18, Z
    279a:	31 81       	ldd	r19, Z+1	; 0x01
    279c:	42 81       	ldd	r20, Z+2	; 0x02
    279e:	53 81       	ldd	r21, Z+3	; 0x03
    27a0:	84 e0       	ldi	r24, 0x04	; 4
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0a c0       	rjmp	.+20     	; 0x27ba <vfprintf+0x200>
    27a6:	f5 01       	movw	r30, r10
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	9c 01       	movw	r18, r24
    27ae:	44 27       	eor	r20, r20
    27b0:	37 fd       	sbrc	r19, 7
    27b2:	40 95       	com	r20
    27b4:	54 2f       	mov	r21, r20
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	a8 0e       	add	r10, r24
    27bc:	b9 1e       	adc	r11, r25
    27be:	9f e6       	ldi	r25, 0x6F	; 111
    27c0:	f9 22       	and	r15, r25
    27c2:	57 ff       	sbrs	r21, 7
    27c4:	09 c0       	rjmp	.+18     	; 0x27d8 <vfprintf+0x21e>
    27c6:	50 95       	com	r21
    27c8:	40 95       	com	r20
    27ca:	30 95       	com	r19
    27cc:	21 95       	neg	r18
    27ce:	3f 4f       	sbci	r19, 0xFF	; 255
    27d0:	4f 4f       	sbci	r20, 0xFF	; 255
    27d2:	5f 4f       	sbci	r21, 0xFF	; 255
    27d4:	e0 e8       	ldi	r30, 0x80	; 128
    27d6:	fe 2a       	or	r15, r30
    27d8:	ca 01       	movw	r24, r20
    27da:	b9 01       	movw	r22, r18
    27dc:	a1 01       	movw	r20, r2
    27de:	2a e0       	ldi	r18, 0x0A	; 10
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__ultoa_invert>
    27e6:	d8 2e       	mov	r13, r24
    27e8:	d2 18       	sub	r13, r2
    27ea:	40 c0       	rjmp	.+128    	; 0x286c <vfprintf+0x2b2>
    27ec:	95 37       	cpi	r25, 0x75	; 117
    27ee:	29 f4       	brne	.+10     	; 0x27fa <vfprintf+0x240>
    27f0:	1f 2d       	mov	r17, r15
    27f2:	1f 7e       	andi	r17, 0xEF	; 239
    27f4:	2a e0       	ldi	r18, 0x0A	; 10
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	1d c0       	rjmp	.+58     	; 0x2834 <vfprintf+0x27a>
    27fa:	1f 2d       	mov	r17, r15
    27fc:	19 7f       	andi	r17, 0xF9	; 249
    27fe:	9f 36       	cpi	r25, 0x6F	; 111
    2800:	61 f0       	breq	.+24     	; 0x281a <vfprintf+0x260>
    2802:	90 37       	cpi	r25, 0x70	; 112
    2804:	20 f4       	brcc	.+8      	; 0x280e <vfprintf+0x254>
    2806:	98 35       	cpi	r25, 0x58	; 88
    2808:	09 f0       	breq	.+2      	; 0x280c <vfprintf+0x252>
    280a:	ac c0       	rjmp	.+344    	; 0x2964 <vfprintf+0x3aa>
    280c:	0f c0       	rjmp	.+30     	; 0x282c <vfprintf+0x272>
    280e:	90 37       	cpi	r25, 0x70	; 112
    2810:	39 f0       	breq	.+14     	; 0x2820 <vfprintf+0x266>
    2812:	98 37       	cpi	r25, 0x78	; 120
    2814:	09 f0       	breq	.+2      	; 0x2818 <vfprintf+0x25e>
    2816:	a6 c0       	rjmp	.+332    	; 0x2964 <vfprintf+0x3aa>
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <vfprintf+0x268>
    281a:	28 e0       	ldi	r18, 0x08	; 8
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	0a c0       	rjmp	.+20     	; 0x2834 <vfprintf+0x27a>
    2820:	10 61       	ori	r17, 0x10	; 16
    2822:	14 fd       	sbrc	r17, 4
    2824:	14 60       	ori	r17, 0x04	; 4
    2826:	20 e1       	ldi	r18, 0x10	; 16
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	04 c0       	rjmp	.+8      	; 0x2834 <vfprintf+0x27a>
    282c:	14 fd       	sbrc	r17, 4
    282e:	16 60       	ori	r17, 0x06	; 6
    2830:	20 e1       	ldi	r18, 0x10	; 16
    2832:	32 e0       	ldi	r19, 0x02	; 2
    2834:	17 ff       	sbrs	r17, 7
    2836:	08 c0       	rjmp	.+16     	; 0x2848 <vfprintf+0x28e>
    2838:	f5 01       	movw	r30, r10
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	44 e0       	ldi	r20, 0x04	; 4
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	08 c0       	rjmp	.+16     	; 0x2858 <vfprintf+0x29e>
    2848:	f5 01       	movw	r30, r10
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	bc 01       	movw	r22, r24
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	42 e0       	ldi	r20, 0x02	; 2
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	a4 0e       	add	r10, r20
    285a:	b5 1e       	adc	r11, r21
    285c:	a1 01       	movw	r20, r2
    285e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__ultoa_invert>
    2862:	d8 2e       	mov	r13, r24
    2864:	d2 18       	sub	r13, r2
    2866:	8f e7       	ldi	r24, 0x7F	; 127
    2868:	f8 2e       	mov	r15, r24
    286a:	f1 22       	and	r15, r17
    286c:	f6 fe       	sbrs	r15, 6
    286e:	0b c0       	rjmp	.+22     	; 0x2886 <vfprintf+0x2cc>
    2870:	5e ef       	ldi	r21, 0xFE	; 254
    2872:	f5 22       	and	r15, r21
    2874:	d9 14       	cp	r13, r9
    2876:	38 f4       	brcc	.+14     	; 0x2886 <vfprintf+0x2cc>
    2878:	f4 fe       	sbrs	r15, 4
    287a:	07 c0       	rjmp	.+14     	; 0x288a <vfprintf+0x2d0>
    287c:	f2 fc       	sbrc	r15, 2
    287e:	05 c0       	rjmp	.+10     	; 0x288a <vfprintf+0x2d0>
    2880:	8f ee       	ldi	r24, 0xEF	; 239
    2882:	f8 22       	and	r15, r24
    2884:	02 c0       	rjmp	.+4      	; 0x288a <vfprintf+0x2d0>
    2886:	1d 2d       	mov	r17, r13
    2888:	01 c0       	rjmp	.+2      	; 0x288c <vfprintf+0x2d2>
    288a:	19 2d       	mov	r17, r9
    288c:	f4 fe       	sbrs	r15, 4
    288e:	0d c0       	rjmp	.+26     	; 0x28aa <vfprintf+0x2f0>
    2890:	fe 01       	movw	r30, r28
    2892:	ed 0d       	add	r30, r13
    2894:	f1 1d       	adc	r31, r1
    2896:	80 81       	ld	r24, Z
    2898:	80 33       	cpi	r24, 0x30	; 48
    289a:	19 f4       	brne	.+6      	; 0x28a2 <vfprintf+0x2e8>
    289c:	99 ee       	ldi	r25, 0xE9	; 233
    289e:	f9 22       	and	r15, r25
    28a0:	08 c0       	rjmp	.+16     	; 0x28b2 <vfprintf+0x2f8>
    28a2:	1f 5f       	subi	r17, 0xFF	; 255
    28a4:	f2 fe       	sbrs	r15, 2
    28a6:	05 c0       	rjmp	.+10     	; 0x28b2 <vfprintf+0x2f8>
    28a8:	03 c0       	rjmp	.+6      	; 0x28b0 <vfprintf+0x2f6>
    28aa:	8f 2d       	mov	r24, r15
    28ac:	86 78       	andi	r24, 0x86	; 134
    28ae:	09 f0       	breq	.+2      	; 0x28b2 <vfprintf+0x2f8>
    28b0:	1f 5f       	subi	r17, 0xFF	; 255
    28b2:	0f 2d       	mov	r16, r15
    28b4:	f3 fc       	sbrc	r15, 3
    28b6:	14 c0       	rjmp	.+40     	; 0x28e0 <vfprintf+0x326>
    28b8:	f0 fe       	sbrs	r15, 0
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <vfprintf+0x320>
    28bc:	1e 15       	cp	r17, r14
    28be:	10 f0       	brcs	.+4      	; 0x28c4 <vfprintf+0x30a>
    28c0:	9d 2c       	mov	r9, r13
    28c2:	0b c0       	rjmp	.+22     	; 0x28da <vfprintf+0x320>
    28c4:	9d 2c       	mov	r9, r13
    28c6:	9e 0c       	add	r9, r14
    28c8:	91 1a       	sub	r9, r17
    28ca:	1e 2d       	mov	r17, r14
    28cc:	06 c0       	rjmp	.+12     	; 0x28da <vfprintf+0x320>
    28ce:	80 e2       	ldi	r24, 0x20	; 32
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	b3 01       	movw	r22, r6
    28d4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    28d8:	1f 5f       	subi	r17, 0xFF	; 255
    28da:	1e 15       	cp	r17, r14
    28dc:	c0 f3       	brcs	.-16     	; 0x28ce <vfprintf+0x314>
    28de:	04 c0       	rjmp	.+8      	; 0x28e8 <vfprintf+0x32e>
    28e0:	1e 15       	cp	r17, r14
    28e2:	10 f4       	brcc	.+4      	; 0x28e8 <vfprintf+0x32e>
    28e4:	e1 1a       	sub	r14, r17
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <vfprintf+0x330>
    28e8:	ee 24       	eor	r14, r14
    28ea:	04 ff       	sbrs	r16, 4
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <vfprintf+0x352>
    28ee:	80 e3       	ldi	r24, 0x30	; 48
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	b3 01       	movw	r22, r6
    28f4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    28f8:	02 ff       	sbrs	r16, 2
    28fa:	1d c0       	rjmp	.+58     	; 0x2936 <vfprintf+0x37c>
    28fc:	01 fd       	sbrc	r16, 1
    28fe:	03 c0       	rjmp	.+6      	; 0x2906 <vfprintf+0x34c>
    2900:	88 e7       	ldi	r24, 0x78	; 120
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e c0       	rjmp	.+28     	; 0x2922 <vfprintf+0x368>
    2906:	88 e5       	ldi	r24, 0x58	; 88
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0b c0       	rjmp	.+22     	; 0x2922 <vfprintf+0x368>
    290c:	80 2f       	mov	r24, r16
    290e:	86 78       	andi	r24, 0x86	; 134
    2910:	91 f0       	breq	.+36     	; 0x2936 <vfprintf+0x37c>
    2912:	01 ff       	sbrs	r16, 1
    2914:	02 c0       	rjmp	.+4      	; 0x291a <vfprintf+0x360>
    2916:	8b e2       	ldi	r24, 0x2B	; 43
    2918:	01 c0       	rjmp	.+2      	; 0x291c <vfprintf+0x362>
    291a:	80 e2       	ldi	r24, 0x20	; 32
    291c:	f7 fc       	sbrc	r15, 7
    291e:	8d e2       	ldi	r24, 0x2D	; 45
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	b3 01       	movw	r22, r6
    2924:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    2928:	06 c0       	rjmp	.+12     	; 0x2936 <vfprintf+0x37c>
    292a:	80 e3       	ldi	r24, 0x30	; 48
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	b3 01       	movw	r22, r6
    2930:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    2934:	9a 94       	dec	r9
    2936:	d9 14       	cp	r13, r9
    2938:	c0 f3       	brcs	.-16     	; 0x292a <vfprintf+0x370>
    293a:	da 94       	dec	r13
    293c:	f1 01       	movw	r30, r2
    293e:	ed 0d       	add	r30, r13
    2940:	f1 1d       	adc	r31, r1
    2942:	80 81       	ld	r24, Z
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	b3 01       	movw	r22, r6
    2948:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    294c:	dd 20       	and	r13, r13
    294e:	a9 f7       	brne	.-22     	; 0x293a <vfprintf+0x380>
    2950:	06 c0       	rjmp	.+12     	; 0x295e <vfprintf+0x3a4>
    2952:	80 e2       	ldi	r24, 0x20	; 32
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	b3 01       	movw	r22, r6
    2958:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <fputc>
    295c:	ea 94       	dec	r14
    295e:	ee 20       	and	r14, r14
    2960:	c1 f7       	brne	.-16     	; 0x2952 <vfprintf+0x398>
    2962:	43 ce       	rjmp	.-890    	; 0x25ea <vfprintf+0x30>
    2964:	f3 01       	movw	r30, r6
    2966:	66 81       	ldd	r22, Z+6	; 0x06
    2968:	77 81       	ldd	r23, Z+7	; 0x07
    296a:	cb 01       	movw	r24, r22
    296c:	2b 96       	adiw	r28, 0x0b	; 11
    296e:	e2 e1       	ldi	r30, 0x12	; 18
    2970:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__epilogue_restores__>

00002974 <strnlen_P>:
    2974:	fc 01       	movw	r30, r24
    2976:	05 90       	lpm	r0, Z+
    2978:	61 50       	subi	r22, 0x01	; 1
    297a:	70 40       	sbci	r23, 0x00	; 0
    297c:	01 10       	cpse	r0, r1
    297e:	d8 f7       	brcc	.-10     	; 0x2976 <strnlen_P+0x2>
    2980:	80 95       	com	r24
    2982:	90 95       	com	r25
    2984:	8e 0f       	add	r24, r30
    2986:	9f 1f       	adc	r25, r31
    2988:	08 95       	ret

0000298a <strnlen>:
    298a:	fc 01       	movw	r30, r24
    298c:	61 50       	subi	r22, 0x01	; 1
    298e:	70 40       	sbci	r23, 0x00	; 0
    2990:	01 90       	ld	r0, Z+
    2992:	01 10       	cpse	r0, r1
    2994:	d8 f7       	brcc	.-10     	; 0x298c <strnlen+0x2>
    2996:	80 95       	com	r24
    2998:	90 95       	com	r25
    299a:	8e 0f       	add	r24, r30
    299c:	9f 1f       	adc	r25, r31
    299e:	08 95       	ret

000029a0 <fputc>:
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	8c 01       	movw	r16, r24
    29aa:	eb 01       	movw	r28, r22
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	81 ff       	sbrs	r24, 1
    29b0:	1b c0       	rjmp	.+54     	; 0x29e8 <fputc+0x48>
    29b2:	82 ff       	sbrs	r24, 2
    29b4:	0d c0       	rjmp	.+26     	; 0x29d0 <fputc+0x30>
    29b6:	2e 81       	ldd	r18, Y+6	; 0x06
    29b8:	3f 81       	ldd	r19, Y+7	; 0x07
    29ba:	8c 81       	ldd	r24, Y+4	; 0x04
    29bc:	9d 81       	ldd	r25, Y+5	; 0x05
    29be:	28 17       	cp	r18, r24
    29c0:	39 07       	cpc	r19, r25
    29c2:	64 f4       	brge	.+24     	; 0x29dc <fputc+0x3c>
    29c4:	e8 81       	ld	r30, Y
    29c6:	f9 81       	ldd	r31, Y+1	; 0x01
    29c8:	01 93       	st	Z+, r16
    29ca:	f9 83       	std	Y+1, r31	; 0x01
    29cc:	e8 83       	st	Y, r30
    29ce:	06 c0       	rjmp	.+12     	; 0x29dc <fputc+0x3c>
    29d0:	e8 85       	ldd	r30, Y+8	; 0x08
    29d2:	f9 85       	ldd	r31, Y+9	; 0x09
    29d4:	80 2f       	mov	r24, r16
    29d6:	09 95       	icall
    29d8:	89 2b       	or	r24, r25
    29da:	31 f4       	brne	.+12     	; 0x29e8 <fputc+0x48>
    29dc:	8e 81       	ldd	r24, Y+6	; 0x06
    29de:	9f 81       	ldd	r25, Y+7	; 0x07
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	9f 83       	std	Y+7, r25	; 0x07
    29e4:	8e 83       	std	Y+6, r24	; 0x06
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <fputc+0x4c>
    29e8:	0f ef       	ldi	r16, 0xFF	; 255
    29ea:	1f ef       	ldi	r17, 0xFF	; 255
    29ec:	c8 01       	movw	r24, r16
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	1f 91       	pop	r17
    29f4:	0f 91       	pop	r16
    29f6:	08 95       	ret

000029f8 <__ultoa_invert>:
    29f8:	fa 01       	movw	r30, r20
    29fa:	aa 27       	eor	r26, r26
    29fc:	28 30       	cpi	r18, 0x08	; 8
    29fe:	51 f1       	breq	.+84     	; 0x2a54 <__ultoa_invert+0x5c>
    2a00:	20 31       	cpi	r18, 0x10	; 16
    2a02:	81 f1       	breq	.+96     	; 0x2a64 <__ultoa_invert+0x6c>
    2a04:	e8 94       	clt
    2a06:	6f 93       	push	r22
    2a08:	6e 7f       	andi	r22, 0xFE	; 254
    2a0a:	6e 5f       	subi	r22, 0xFE	; 254
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a10:	9f 4f       	sbci	r25, 0xFF	; 255
    2a12:	af 4f       	sbci	r26, 0xFF	; 255
    2a14:	b1 e0       	ldi	r27, 0x01	; 1
    2a16:	3e d0       	rcall	.+124    	; 0x2a94 <__ultoa_invert+0x9c>
    2a18:	b4 e0       	ldi	r27, 0x04	; 4
    2a1a:	3c d0       	rcall	.+120    	; 0x2a94 <__ultoa_invert+0x9c>
    2a1c:	67 0f       	add	r22, r23
    2a1e:	78 1f       	adc	r23, r24
    2a20:	89 1f       	adc	r24, r25
    2a22:	9a 1f       	adc	r25, r26
    2a24:	a1 1d       	adc	r26, r1
    2a26:	68 0f       	add	r22, r24
    2a28:	79 1f       	adc	r23, r25
    2a2a:	8a 1f       	adc	r24, r26
    2a2c:	91 1d       	adc	r25, r1
    2a2e:	a1 1d       	adc	r26, r1
    2a30:	6a 0f       	add	r22, r26
    2a32:	71 1d       	adc	r23, r1
    2a34:	81 1d       	adc	r24, r1
    2a36:	91 1d       	adc	r25, r1
    2a38:	a1 1d       	adc	r26, r1
    2a3a:	20 d0       	rcall	.+64     	; 0x2a7c <__ultoa_invert+0x84>
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <__ultoa_invert+0x48>
    2a3e:	68 94       	set
    2a40:	3f 91       	pop	r19
    2a42:	2a e0       	ldi	r18, 0x0A	; 10
    2a44:	26 9f       	mul	r18, r22
    2a46:	11 24       	eor	r1, r1
    2a48:	30 19       	sub	r19, r0
    2a4a:	30 5d       	subi	r19, 0xD0	; 208
    2a4c:	31 93       	st	Z+, r19
    2a4e:	de f6       	brtc	.-74     	; 0x2a06 <__ultoa_invert+0xe>
    2a50:	cf 01       	movw	r24, r30
    2a52:	08 95       	ret
    2a54:	46 2f       	mov	r20, r22
    2a56:	47 70       	andi	r20, 0x07	; 7
    2a58:	40 5d       	subi	r20, 0xD0	; 208
    2a5a:	41 93       	st	Z+, r20
    2a5c:	b3 e0       	ldi	r27, 0x03	; 3
    2a5e:	0f d0       	rcall	.+30     	; 0x2a7e <__ultoa_invert+0x86>
    2a60:	c9 f7       	brne	.-14     	; 0x2a54 <__ultoa_invert+0x5c>
    2a62:	f6 cf       	rjmp	.-20     	; 0x2a50 <__ultoa_invert+0x58>
    2a64:	46 2f       	mov	r20, r22
    2a66:	4f 70       	andi	r20, 0x0F	; 15
    2a68:	40 5d       	subi	r20, 0xD0	; 208
    2a6a:	4a 33       	cpi	r20, 0x3A	; 58
    2a6c:	18 f0       	brcs	.+6      	; 0x2a74 <__ultoa_invert+0x7c>
    2a6e:	49 5d       	subi	r20, 0xD9	; 217
    2a70:	31 fd       	sbrc	r19, 1
    2a72:	40 52       	subi	r20, 0x20	; 32
    2a74:	41 93       	st	Z+, r20
    2a76:	02 d0       	rcall	.+4      	; 0x2a7c <__ultoa_invert+0x84>
    2a78:	a9 f7       	brne	.-22     	; 0x2a64 <__ultoa_invert+0x6c>
    2a7a:	ea cf       	rjmp	.-44     	; 0x2a50 <__ultoa_invert+0x58>
    2a7c:	b4 e0       	ldi	r27, 0x04	; 4
    2a7e:	a6 95       	lsr	r26
    2a80:	97 95       	ror	r25
    2a82:	87 95       	ror	r24
    2a84:	77 95       	ror	r23
    2a86:	67 95       	ror	r22
    2a88:	ba 95       	dec	r27
    2a8a:	c9 f7       	brne	.-14     	; 0x2a7e <__ultoa_invert+0x86>
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	61 05       	cpc	r22, r1
    2a90:	71 05       	cpc	r23, r1
    2a92:	08 95       	ret
    2a94:	9b 01       	movw	r18, r22
    2a96:	ac 01       	movw	r20, r24
    2a98:	0a 2e       	mov	r0, r26
    2a9a:	06 94       	lsr	r0
    2a9c:	57 95       	ror	r21
    2a9e:	47 95       	ror	r20
    2aa0:	37 95       	ror	r19
    2aa2:	27 95       	ror	r18
    2aa4:	ba 95       	dec	r27
    2aa6:	c9 f7       	brne	.-14     	; 0x2a9a <__ultoa_invert+0xa2>
    2aa8:	62 0f       	add	r22, r18
    2aaa:	73 1f       	adc	r23, r19
    2aac:	84 1f       	adc	r24, r20
    2aae:	95 1f       	adc	r25, r21
    2ab0:	a0 1d       	adc	r26, r0
    2ab2:	08 95       	ret

00002ab4 <_exit>:
    2ab4:	f8 94       	cli

00002ab6 <__stop_program>:
    2ab6:	ff cf       	rjmp	.-2      	; 0x2ab6 <__stop_program>
