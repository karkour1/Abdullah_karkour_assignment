
EXTI_Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dfc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000f2c  08000f2c  00010f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f54  08000f54  00010f5c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f54  08000f54  00010f5c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f54  08000f5c  00010f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f54  08000f54  00010f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000f5c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000f5c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000101e  00000000  00000000  00010f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004ea  00000000  00000000  00011fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009f1  00000000  00000000  0001248d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00012e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00013028  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000017d8  00000000  00000000  00013188  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000011c9  00000000  00000000  00014960  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000648c  00000000  00000000  00015b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001bfb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000548  00000000  00000000  0001c030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f14 	.word	0x08000f14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f14 	.word	0x08000f14

08000170 <wait_ms>:
// global variables
GPIO_PinConfig_t pincofg  ;

// LCD global functions
void wait_ms(uint32 time )
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32 i,j;
	for(i=0 ; i<time ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>
		for(j=0 ; j<255 ; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for(i=0 ; i<time ; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_EN_Pluse>:
void LCD_EN_Pluse(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_EN_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	210a      	movs	r1, #10
 80001b0:	4806      	ldr	r0, [pc, #24]	; (80001cc <LCD_EN_Pluse+0x24>)
 80001b2:	f000 fe67 	bl	8000e84 <MCAL_GPIO_WritePin>
	wait_ms(50);
 80001b6:	2032      	movs	r0, #50	; 0x32
 80001b8:	f7ff ffda 	bl	8000170 <wait_ms>
	MCAL_GPIO_WritePin(LCD_EN_PORT, LCD_EN_PIN, GPIO_PIN_SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	210a      	movs	r1, #10
 80001c0:	4802      	ldr	r0, [pc, #8]	; (80001cc <LCD_EN_Pluse+0x24>)
 80001c2:	f000 fe5f 	bl	8000e84 <MCAL_GPIO_WritePin>
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <LCD_init>:

/* LCD APIS */
void LCD_init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	wait_ms(20);
 80001d4:	2014      	movs	r0, #20
 80001d6:	f7ff ffcb 	bl	8000170 <wait_ms>

	// Set LCD Data Port output
	pincofg.GPIO_PinNumber = LCD_D0_PIN;
 80001da:	4b5a      	ldr	r3, [pc, #360]	; (8000344 <LCD_init+0x174>)
 80001dc:	2200      	movs	r2, #0
 80001de:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001e0:	4b58      	ldr	r3, [pc, #352]	; (8000344 <LCD_init+0x174>)
 80001e2:	2204      	movs	r2, #4
 80001e4:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e6:	4b57      	ldr	r3, [pc, #348]	; (8000344 <LCD_init+0x174>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 80001ec:	4955      	ldr	r1, [pc, #340]	; (8000344 <LCD_init+0x174>)
 80001ee:	4856      	ldr	r0, [pc, #344]	; (8000348 <LCD_init+0x178>)
 80001f0:	f000 fdac 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D1_PIN;
 80001f4:	4b53      	ldr	r3, [pc, #332]	; (8000344 <LCD_init+0x174>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	4b52      	ldr	r3, [pc, #328]	; (8000344 <LCD_init+0x174>)
 80001fc:	2204      	movs	r2, #4
 80001fe:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000200:	4b50      	ldr	r3, [pc, #320]	; (8000344 <LCD_init+0x174>)
 8000202:	2201      	movs	r2, #1
 8000204:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8000206:	494f      	ldr	r1, [pc, #316]	; (8000344 <LCD_init+0x174>)
 8000208:	484f      	ldr	r0, [pc, #316]	; (8000348 <LCD_init+0x178>)
 800020a:	f000 fd9f 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D2_PIN;
 800020e:	4b4d      	ldr	r3, [pc, #308]	; (8000344 <LCD_init+0x174>)
 8000210:	2202      	movs	r2, #2
 8000212:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	4b4b      	ldr	r3, [pc, #300]	; (8000344 <LCD_init+0x174>)
 8000216:	2204      	movs	r2, #4
 8000218:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800021a:	4b4a      	ldr	r3, [pc, #296]	; (8000344 <LCD_init+0x174>)
 800021c:	2201      	movs	r2, #1
 800021e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8000220:	4948      	ldr	r1, [pc, #288]	; (8000344 <LCD_init+0x174>)
 8000222:	4849      	ldr	r0, [pc, #292]	; (8000348 <LCD_init+0x178>)
 8000224:	f000 fd92 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D3_PIN;
 8000228:	4b46      	ldr	r3, [pc, #280]	; (8000344 <LCD_init+0x174>)
 800022a:	2203      	movs	r2, #3
 800022c:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	4b45      	ldr	r3, [pc, #276]	; (8000344 <LCD_init+0x174>)
 8000230:	2204      	movs	r2, #4
 8000232:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000234:	4b43      	ldr	r3, [pc, #268]	; (8000344 <LCD_init+0x174>)
 8000236:	2201      	movs	r2, #1
 8000238:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 800023a:	4942      	ldr	r1, [pc, #264]	; (8000344 <LCD_init+0x174>)
 800023c:	4842      	ldr	r0, [pc, #264]	; (8000348 <LCD_init+0x178>)
 800023e:	f000 fd85 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D4_PIN;
 8000242:	4b40      	ldr	r3, [pc, #256]	; (8000344 <LCD_init+0x174>)
 8000244:	2204      	movs	r2, #4
 8000246:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000248:	4b3e      	ldr	r3, [pc, #248]	; (8000344 <LCD_init+0x174>)
 800024a:	2204      	movs	r2, #4
 800024c:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800024e:	4b3d      	ldr	r3, [pc, #244]	; (8000344 <LCD_init+0x174>)
 8000250:	2201      	movs	r2, #1
 8000252:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8000254:	493b      	ldr	r1, [pc, #236]	; (8000344 <LCD_init+0x174>)
 8000256:	483c      	ldr	r0, [pc, #240]	; (8000348 <LCD_init+0x178>)
 8000258:	f000 fd78 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D5_PIN;
 800025c:	4b39      	ldr	r3, [pc, #228]	; (8000344 <LCD_init+0x174>)
 800025e:	2205      	movs	r2, #5
 8000260:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000262:	4b38      	ldr	r3, [pc, #224]	; (8000344 <LCD_init+0x174>)
 8000264:	2204      	movs	r2, #4
 8000266:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000268:	4b36      	ldr	r3, [pc, #216]	; (8000344 <LCD_init+0x174>)
 800026a:	2201      	movs	r2, #1
 800026c:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 800026e:	4935      	ldr	r1, [pc, #212]	; (8000344 <LCD_init+0x174>)
 8000270:	4835      	ldr	r0, [pc, #212]	; (8000348 <LCD_init+0x178>)
 8000272:	f000 fd6b 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D6_PIN;
 8000276:	4b33      	ldr	r3, [pc, #204]	; (8000344 <LCD_init+0x174>)
 8000278:	2206      	movs	r2, #6
 800027a:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800027c:	4b31      	ldr	r3, [pc, #196]	; (8000344 <LCD_init+0x174>)
 800027e:	2204      	movs	r2, #4
 8000280:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000282:	4b30      	ldr	r3, [pc, #192]	; (8000344 <LCD_init+0x174>)
 8000284:	2201      	movs	r2, #1
 8000286:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8000288:	492e      	ldr	r1, [pc, #184]	; (8000344 <LCD_init+0x174>)
 800028a:	482f      	ldr	r0, [pc, #188]	; (8000348 <LCD_init+0x178>)
 800028c:	f000 fd5e 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D7_PIN;
 8000290:	4b2c      	ldr	r3, [pc, #176]	; (8000344 <LCD_init+0x174>)
 8000292:	2207      	movs	r2, #7
 8000294:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <LCD_init+0x174>)
 8000298:	2204      	movs	r2, #4
 800029a:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800029c:	4b29      	ldr	r3, [pc, #164]	; (8000344 <LCD_init+0x174>)
 800029e:	2201      	movs	r2, #1
 80002a0:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 80002a2:	4928      	ldr	r1, [pc, #160]	; (8000344 <LCD_init+0x174>)
 80002a4:	4828      	ldr	r0, [pc, #160]	; (8000348 <LCD_init+0x178>)
 80002a6:	f000 fd51 	bl	8000d4c <MCAL_GPIO_Init>

	// SET control pins output (Rs , RW , EN)
	pincofg.GPIO_PinNumber = LCD_RS_PIN;
 80002aa:	4b26      	ldr	r3, [pc, #152]	; (8000344 <LCD_init+0x174>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002b0:	4b24      	ldr	r3, [pc, #144]	; (8000344 <LCD_init+0x174>)
 80002b2:	2204      	movs	r2, #4
 80002b4:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <LCD_init+0x174>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_RS_PORT, &pincofg);
 80002bc:	4921      	ldr	r1, [pc, #132]	; (8000344 <LCD_init+0x174>)
 80002be:	4823      	ldr	r0, [pc, #140]	; (800034c <LCD_init+0x17c>)
 80002c0:	f000 fd44 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_RW_PIN;
 80002c4:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <LCD_init+0x174>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <LCD_init+0x174>)
 80002cc:	2204      	movs	r2, #4
 80002ce:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002d0:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <LCD_init+0x174>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_RW_PORT, &pincofg);
 80002d6:	491b      	ldr	r1, [pc, #108]	; (8000344 <LCD_init+0x174>)
 80002d8:	481c      	ldr	r0, [pc, #112]	; (800034c <LCD_init+0x17c>)
 80002da:	f000 fd37 	bl	8000d4c <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_EN_PIN;
 80002de:	4b19      	ldr	r3, [pc, #100]	; (8000344 <LCD_init+0x174>)
 80002e0:	220a      	movs	r2, #10
 80002e2:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <LCD_init+0x174>)
 80002e6:	2204      	movs	r2, #4
 80002e8:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <LCD_init+0x174>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_EN_PORT, &pincofg);
 80002f0:	4914      	ldr	r1, [pc, #80]	; (8000344 <LCD_init+0x174>)
 80002f2:	4816      	ldr	r0, [pc, #88]	; (800034c <LCD_init+0x17c>)
 80002f4:	f000 fd2a 	bl	8000d4c <MCAL_GPIO_Init>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2100      	movs	r1, #0
 80002fc:	4813      	ldr	r0, [pc, #76]	; (800034c <LCD_init+0x17c>)
 80002fe:	f000 fdc1 	bl	8000e84 <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2101      	movs	r1, #1
 8000306:	4811      	ldr	r0, [pc, #68]	; (800034c <LCD_init+0x17c>)
 8000308:	f000 fdbc 	bl	8000e84 <MCAL_GPIO_WritePin>

	// EN off
	MCAL_GPIO_WritePin(LCD_EN_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	210a      	movs	r1, #10
 8000310:	480e      	ldr	r0, [pc, #56]	; (800034c <LCD_init+0x17c>)
 8000312:	f000 fdb7 	bl	8000e84 <MCAL_GPIO_WritePin>

	wait_ms(15);
 8000316:	200f      	movs	r0, #15
 8000318:	f7ff ff2a 	bl	8000170 <wait_ms>
	LCD_Clear_Screen();
 800031c:	f000 f969 	bl	80005f2 <LCD_Clear_Screen>
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINE);

	/*4_BIT_MODE_INIT*/
#elif LCD_MODE == LCD_4_BIT_MODE

	LCD_Send_Command(0x02);
 8000320:	2002      	movs	r0, #2
 8000322:	f000 f84f 	bl	80003c4 <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINE);
 8000326:	2028      	movs	r0, #40	; 0x28
 8000328:	f000 f84c 	bl	80003c4 <LCD_Send_Command>

#endif


	LCD_Send_Command(LCD_ENTRY_MODE);
 800032c:	2006      	movs	r0, #6
 800032e:	f000 f849 	bl	80003c4 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 8000332:	2080      	movs	r0, #128	; 0x80
 8000334:	f000 f846 	bl	80003c4 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 8000338:	200f      	movs	r0, #15
 800033a:	f000 f843 	bl	80003c4 <LCD_Send_Command>

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	2000001c 	.word	0x2000001c
 8000348:	40010800 	.word	0x40010800
 800034c:	40010c00 	.word	0x40010c00

08000350 <LCD_Is_Busy>:
void LCD_Is_Busy(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	// set pin connected to D7 to receive data (Data direction as input).
	pincofg.GPIO_PinNumber = LCD_D7_PIN;
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <LCD_Is_Busy+0x68>)
 8000356:	2207      	movs	r2, #7
 8000358:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <LCD_Is_Busy+0x68>)
 800035c:	2201      	movs	r2, #1
 800035e:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8000360:	4915      	ldr	r1, [pc, #84]	; (80003b8 <LCD_Is_Busy+0x68>)
 8000362:	4816      	ldr	r0, [pc, #88]	; (80003bc <LCD_Is_Busy+0x6c>)
 8000364:	f000 fcf2 	bl	8000d4c <MCAL_GPIO_Init>

	// put the LCD in read mode (RW =1 on)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2101      	movs	r1, #1
 800036c:	4814      	ldr	r0, [pc, #80]	; (80003c0 <LCD_Is_Busy+0x70>)
 800036e:	f000 fd89 	bl	8000e84 <MCAL_GPIO_WritePin>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2100      	movs	r1, #0
 8000376:	4812      	ldr	r0, [pc, #72]	; (80003c0 <LCD_Is_Busy+0x70>)
 8000378:	f000 fd84 	bl	8000e84 <MCAL_GPIO_WritePin>

	while (((MCAL_GPIO_ReadPin(LCD_DATA_PORT, LCD_D7_PIN))&1));
 800037c:	bf00      	nop
 800037e:	2107      	movs	r1, #7
 8000380:	480e      	ldr	r0, [pc, #56]	; (80003bc <LCD_Is_Busy+0x6c>)
 8000382:	f000 fd65 	bl	8000e50 <MCAL_GPIO_ReadPin>
 8000386:	4603      	mov	r3, r0
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d1f6      	bne.n	800037e <LCD_Is_Busy+0x2e>

	// set  D7 to receive data (Data direction as output).
	pincofg.GPIO_PinNumber = LCD_D7_PIN;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <LCD_Is_Busy+0x68>)
 8000392:	2207      	movs	r2, #7
 8000394:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <LCD_Is_Busy+0x68>)
 8000398:	2204      	movs	r2, #4
 800039a:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <LCD_Is_Busy+0x68>)
 800039e:	2201      	movs	r2, #1
 80003a0:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 80003a2:	4905      	ldr	r1, [pc, #20]	; (80003b8 <LCD_Is_Busy+0x68>)
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <LCD_Is_Busy+0x6c>)
 80003a6:	f000 fcd1 	bl	8000d4c <MCAL_GPIO_Init>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2101      	movs	r1, #1
 80003ae:	4804      	ldr	r0, [pc, #16]	; (80003c0 <LCD_Is_Busy+0x70>)
 80003b0:	f000 fd68 	bl	8000e84 <MCAL_GPIO_WritePin>

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000001c 	.word	0x2000001c
 80003bc:	40010800 	.word	0x40010800
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <LCD_Send_Command>:
void LCD_Send_Command(uint8 command)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	// Check if LCD is busy
	LCD_Is_Busy();
 80003ce:	f7ff ffbf 	bl	8000350 <LCD_Is_Busy>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2100      	movs	r1, #0
 80003d6:	4834      	ldr	r0, [pc, #208]	; (80004a8 <LCD_Send_Command+0xe4>)
 80003d8:	f000 fd54 	bl	8000e84 <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW off)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2101      	movs	r1, #1
 80003e0:	4831      	ldr	r0, [pc, #196]	; (80004a8 <LCD_Send_Command+0xe4>)
 80003e2:	f000 fd4f 	bl	8000e84 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of command on Data Pins
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, ((command >>LCD_D4_PIN) & 1));
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	091b      	lsrs	r3, r3, #4
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	2104      	movs	r1, #4
 80003f6:	482d      	ldr	r0, [pc, #180]	; (80004ac <LCD_Send_Command+0xe8>)
 80003f8:	f000 fd44 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, ((command >>LCD_D5_PIN) & 1));
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	095b      	lsrs	r3, r3, #5
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	2105      	movs	r1, #5
 800040c:	4827      	ldr	r0, [pc, #156]	; (80004ac <LCD_Send_Command+0xe8>)
 800040e:	f000 fd39 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, ((command >>LCD_D6_PIN) & 1));
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	099b      	lsrs	r3, r3, #6
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	2106      	movs	r1, #6
 8000422:	4822      	ldr	r0, [pc, #136]	; (80004ac <LCD_Send_Command+0xe8>)
 8000424:	f000 fd2e 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, ((command >>LCD_D7_PIN) & 1));
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	09db      	lsrs	r3, r3, #7
 800042c:	b2db      	uxtb	r3, r3
 800042e:	461a      	mov	r2, r3
 8000430:	2107      	movs	r1, #7
 8000432:	481e      	ldr	r0, [pc, #120]	; (80004ac <LCD_Send_Command+0xe8>)
 8000434:	f000 fd26 	bl	8000e84 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();
 8000438:	f7ff feb6 	bl	80001a8 <LCD_EN_Pluse>

	// Write The Least 4 bits Of command on Data Pins
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, (((command<<4) >>LCD_D4_PIN) & 1));
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	011b      	lsls	r3, r3, #4
 8000440:	111b      	asrs	r3, r3, #4
 8000442:	b2db      	uxtb	r3, r3
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	b2db      	uxtb	r3, r3
 800044a:	461a      	mov	r2, r3
 800044c:	2104      	movs	r1, #4
 800044e:	4817      	ldr	r0, [pc, #92]	; (80004ac <LCD_Send_Command+0xe8>)
 8000450:	f000 fd18 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, (((command<<4) >>LCD_D5_PIN) & 1));
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	011b      	lsls	r3, r3, #4
 8000458:	115b      	asrs	r3, r3, #5
 800045a:	b2db      	uxtb	r3, r3
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	2105      	movs	r1, #5
 8000466:	4811      	ldr	r0, [pc, #68]	; (80004ac <LCD_Send_Command+0xe8>)
 8000468:	f000 fd0c 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, (((command<<4) >>LCD_D6_PIN) & 1));
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	119b      	asrs	r3, r3, #6
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	b2db      	uxtb	r3, r3
 800047a:	461a      	mov	r2, r3
 800047c:	2106      	movs	r1, #6
 800047e:	480b      	ldr	r0, [pc, #44]	; (80004ac <LCD_Send_Command+0xe8>)
 8000480:	f000 fd00 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, (((command<<4) >>LCD_D7_PIN) & 1));
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	11db      	asrs	r3, r3, #7
 800048a:	b2db      	uxtb	r3, r3
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	b2db      	uxtb	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	2107      	movs	r1, #7
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <LCD_Send_Command+0xe8>)
 8000498:	f000 fcf4 	bl	8000e84 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();
 800049c:	f7ff fe84 	bl	80001a8 <LCD_EN_Pluse>

#endif


}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	40010800 	.word	0x40010800

080004b0 <LCD_Send_Character>:
void LCD_Send_Character(uint8 character)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	//put the LCD in Data mode (RS=1 on)
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2100      	movs	r1, #0
 80004be:	4834      	ldr	r0, [pc, #208]	; (8000590 <LCD_Send_Character+0xe0>)
 80004c0:	f000 fce0 	bl	8000e84 <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2101      	movs	r1, #1
 80004c8:	4831      	ldr	r0, [pc, #196]	; (8000590 <LCD_Send_Character+0xe0>)
 80004ca:	f000 fcdb 	bl	8000e84 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of data on Data Pins
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, ((character >>LCD_D4_PIN) & 1));
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	091b      	lsrs	r3, r3, #4
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	2104      	movs	r1, #4
 80004de:	482d      	ldr	r0, [pc, #180]	; (8000594 <LCD_Send_Character+0xe4>)
 80004e0:	f000 fcd0 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, ((character >>LCD_D5_PIN) & 1));
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	095b      	lsrs	r3, r3, #5
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	2105      	movs	r1, #5
 80004f4:	4827      	ldr	r0, [pc, #156]	; (8000594 <LCD_Send_Character+0xe4>)
 80004f6:	f000 fcc5 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, ((character >>LCD_D6_PIN) & 1));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	099b      	lsrs	r3, r3, #6
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	2106      	movs	r1, #6
 800050a:	4822      	ldr	r0, [pc, #136]	; (8000594 <LCD_Send_Character+0xe4>)
 800050c:	f000 fcba 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, ((character >>LCD_D7_PIN) & 1));
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	09db      	lsrs	r3, r3, #7
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	2107      	movs	r1, #7
 800051a:	481e      	ldr	r0, [pc, #120]	; (8000594 <LCD_Send_Character+0xe4>)
 800051c:	f000 fcb2 	bl	8000e84 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();
 8000520:	f7ff fe42 	bl	80001a8 <LCD_EN_Pluse>

	// Write The Least 4 bits Of data on Data Pins
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, (((character<<4) >>LCD_D4_PIN) & 1));
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	011b      	lsls	r3, r3, #4
 8000528:	111b      	asrs	r3, r3, #4
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	2104      	movs	r1, #4
 8000536:	4817      	ldr	r0, [pc, #92]	; (8000594 <LCD_Send_Character+0xe4>)
 8000538:	f000 fca4 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, (((character<<4) >>LCD_D5_PIN) & 1));
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	115b      	asrs	r3, r3, #5
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	2105      	movs	r1, #5
 800054e:	4811      	ldr	r0, [pc, #68]	; (8000594 <LCD_Send_Character+0xe4>)
 8000550:	f000 fc98 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, (((character<<4) >>LCD_D6_PIN) & 1));
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	011b      	lsls	r3, r3, #4
 8000558:	119b      	asrs	r3, r3, #6
 800055a:	b2db      	uxtb	r3, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	461a      	mov	r2, r3
 8000564:	2106      	movs	r1, #6
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <LCD_Send_Character+0xe4>)
 8000568:	f000 fc8c 	bl	8000e84 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, (((character<<4) >>LCD_D7_PIN) & 1));
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	11db      	asrs	r3, r3, #7
 8000572:	b2db      	uxtb	r3, r3
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2107      	movs	r1, #7
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <LCD_Send_Character+0xe4>)
 8000580:	f000 fc80 	bl	8000e84 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();
 8000584:	f7ff fe10 	bl	80001a8 <LCD_EN_Pluse>

#endif

}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40010c00 	.word	0x40010c00
 8000594:	40010800 	.word	0x40010800

08000598 <LCD_Send_string>:
void LCD_Send_string(uint8* string)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	uint8 counter = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
	while( *string > 0)
 80005a4:	e01d      	b.n	80005e2 <LCD_Send_string+0x4a>
	{
		counter++;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	3301      	adds	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
		LCD_Send_Character(*string);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ff7d 	bl	80004b0 <LCD_Send_Character>
		string++;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3301      	adds	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]

		if(counter == 16)
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b10      	cmp	r3, #16
 80005c0:	d104      	bne.n	80005cc <LCD_Send_string+0x34>
		{
			LCD_SET_Cursor(2, 0);
 80005c2:	2100      	movs	r1, #0
 80005c4:	2002      	movs	r0, #2
 80005c6:	f000 f81b 	bl	8000600 <LCD_SET_Cursor>
 80005ca:	e00a      	b.n	80005e2 <LCD_Send_string+0x4a>
		}
		else if(counter == 32)
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b20      	cmp	r3, #32
 80005d0:	d107      	bne.n	80005e2 <LCD_Send_string+0x4a>
		{
			LCD_Clear_Screen();
 80005d2:	f000 f80e 	bl	80005f2 <LCD_Clear_Screen>
			LCD_SET_Cursor(1, 0);
 80005d6:	2100      	movs	r1, #0
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 f811 	bl	8000600 <LCD_SET_Cursor>
			counter =0 ;
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
	while( *string > 0)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1dd      	bne.n	80005a6 <LCD_Send_string+0xe>
		}
	}
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <LCD_Clear_Screen>:
void LCD_Clear_Screen(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fee4 	bl	80003c4 <LCD_Send_Command>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <LCD_SET_Cursor>:
void LCD_SET_Cursor(uint8 line , uint8 position )
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d109      	bne.n	800062a <LCD_SET_Cursor+0x2a>
	{
		if(position<16)
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	d812      	bhi.n	8000642 <LCD_SET_Cursor+0x42>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW + position);
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	3b80      	subs	r3, #128	; 0x80
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fece 	bl	80003c4 <LCD_Send_Command>
	else if (line == 2)
	{
		if(position<16)
		LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW + position);
	}
}
 8000628:	e00b      	b.n	8000642 <LCD_SET_Cursor+0x42>
	else if (line == 2)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d108      	bne.n	8000642 <LCD_SET_Cursor+0x42>
		if(position<16)
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	2b0f      	cmp	r3, #15
 8000634:	d805      	bhi.n	8000642 <LCD_SET_Cursor+0x42>
		LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW + position);
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	3b40      	subs	r3, #64	; 0x40
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff fec1 	bl	80003c4 <LCD_Send_Command>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <Wait>:
#endif

uint8_t IRQ_Flag ;

void Wait(int x)
{
 800064a:	b480      	push	{r7}
 800064c:	b085      	sub	sp, #20
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	unsigned int i , j ;
	for(i=0 ; i<x ;i++)
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e00b      	b.n	8000670 <Wait+0x26>
	{
		for(j = 0 ; j<255 ; j++);
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	e002      	b.n	8000664 <Wait+0x1a>
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	3301      	adds	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	2bfe      	cmp	r3, #254	; 0xfe
 8000668:	d9f9      	bls.n	800065e <Wait+0x14>
	for(i=0 ; i<x ;i++)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	429a      	cmp	r2, r3
 8000676:	d3ef      	bcc.n	8000658 <Wait+0xe>
	}
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
	...

08000684 <clock_init>:
void clock_init()
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	// Enable IO port A clock
	RCC_GPIOA_CLK_EN();
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <clock_init+0x30>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <clock_init+0x30>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
	// Enable IO Port B clock
	RCC_GPIOB_CLK_EN();
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <clock_init+0x30>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <clock_init+0x30>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
	// AFIO Clock
	RCC_AFIO_CLK_EN();
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <clock_init+0x30>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <clock_init+0x30>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6193      	str	r3, [r2, #24]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000

080006b8 <EXTI9_CallBack>:

void EXTI9_CallBack(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <EXTI9_CallBack+0x20>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
	LCD_Send_string("IRQ EXTI9 is Happened _|-");
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <EXTI9_CallBack+0x24>)
 80006c4:	f7ff ff68 	bl	8000598 <LCD_Send_string>
	Wait(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f7ff ffbd 	bl	800064a <Wait>
	LCD_Clear_Screen();
 80006d0:	f7ff ff8f 	bl	80005f2 <LCD_Clear_Screen>

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000001f 	.word	0x2000001f
 80006dc:	08000f2c 	.word	0x08000f2c

080006e0 <main>:

int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
	clock_init();
 80006e6:	f7ff ffcd 	bl	8000684 <clock_init>
	LCD_init();
 80006ea:	f7ff fd71 	bl	80001d0 <LCD_init>
	LCD_Clear_Screen();
 80006ee:	f7ff ff80 	bl	80005f2 <LCD_Clear_Screen>

	// Configuration of EXTI9PB9
	EXTI_PinConfig_t EXTI_Confg ;
	EXTI_Confg.EXTI_Pin = EXTI9PB9;
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <main+0x4c>)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80006f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Confg.Trigger_case = EXTI_TRIGGER_RAISING;
 80006fc:	2300      	movs	r3, #0
 80006fe:	743b      	strb	r3, [r7, #16]
	EXTI_Confg.P_IRQ_CallBack= EXTI9_CallBack;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <main+0x50>)
 8000702:	617b      	str	r3, [r7, #20]
	EXTI_Confg.IRQ_EN = EXTI_IRQ_ENABLE ;
 8000704:	2301      	movs	r3, #1
 8000706:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Update(&EXTI_Confg);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f9f8 	bl	8000b00 <MCAL_EXTI_GPIO_Update>

	IRQ_Flag = 1;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <main+0x54>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
    /* Loop forever */
	while(1)
	{
		if(IRQ_Flag)
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <main+0x54>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0fb      	beq.n	8000716 <main+0x36>
		{
			LCD_Clear_Screen();
 800071e:	f7ff ff68 	bl	80005f2 <LCD_Clear_Screen>
			IRQ_Flag =0 ;
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <main+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000728:	e7f5      	b.n	8000716 <main+0x36>
 800072a:	bf00      	nop
 800072c:	08000f48 	.word	0x08000f48
 8000730:	080006b9 	.word	0x080006b9
 8000734:	2000001f 	.word	0x2000001f

08000738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800073c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000766:	f000 fbb1 	bl	8000ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff ffb9 	bl	80006e0 <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800077c:	08000f5c 	.word	0x08000f5c
  ldr r2, =_sbss
 8000780:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000784:	2000005c 	.word	0x2000005c

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>
	...

0800078c <Enable_NVIC>:
											(x==GPIOD)?3:0  )
//-----------------------------
//Generic Functions
//-----------------------------
void Enable_NVIC(uint16_t IRQ)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d854      	bhi.n	8000846 <Enable_NVIC+0xba>
 800079c:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <Enable_NVIC+0x18>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007e5 	.word	0x080007e5
 80007a8:	080007f3 	.word	0x080007f3
 80007ac:	08000801 	.word	0x08000801
 80007b0:	0800080f 	.word	0x0800080f
 80007b4:	0800081d 	.word	0x0800081d
 80007b8:	0800082b 	.word	0x0800082b
 80007bc:	0800082b 	.word	0x0800082b
 80007c0:	0800082b 	.word	0x0800082b
 80007c4:	0800082b 	.word	0x0800082b
 80007c8:	0800082b 	.word	0x0800082b
 80007cc:	08000839 	.word	0x08000839
 80007d0:	08000839 	.word	0x08000839
 80007d4:	08000839 	.word	0x08000839
 80007d8:	08000839 	.word	0x08000839
 80007dc:	08000839 	.word	0x08000839
 80007e0:	08000839 	.word	0x08000839
	{
	case 0 :
		NVIC_IRQ6_EXTI0_ENABLE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <Enable_NVIC+0xc4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a19      	ldr	r2, [pc, #100]	; (8000850 <Enable_NVIC+0xc4>)
 80007ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ee:	6013      	str	r3, [r2, #0]
		break;
 80007f0:	e029      	b.n	8000846 <Enable_NVIC+0xba>
	case 1 :
		NVIC_IRQ7_EXTI1_ENABLE;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <Enable_NVIC+0xc4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <Enable_NVIC+0xc4>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6013      	str	r3, [r2, #0]
		break;
 80007fe:	e022      	b.n	8000846 <Enable_NVIC+0xba>
	case 2 :
		NVIC_IRQ8_EXTI2_ENABLE;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <Enable_NVIC+0xc4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a12      	ldr	r2, [pc, #72]	; (8000850 <Enable_NVIC+0xc4>)
 8000806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080a:	6013      	str	r3, [r2, #0]
		break;
 800080c:	e01b      	b.n	8000846 <Enable_NVIC+0xba>
	case 3 :
		NVIC_IRQ8_EXTI2_ENABLE;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <Enable_NVIC+0xc4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <Enable_NVIC+0xc4>)
 8000814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000818:	6013      	str	r3, [r2, #0]
		break;
 800081a:	e014      	b.n	8000846 <Enable_NVIC+0xba>
	case 4 :
		NVIC_IRQ9_EXTI3_ENABLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <Enable_NVIC+0xc4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <Enable_NVIC+0xc4>)
 8000822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000826:	6013      	str	r3, [r2, #0]
		break;
 8000828:	e00d      	b.n	8000846 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_ENABLE;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <Enable_NVIC+0xc4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <Enable_NVIC+0xc4>)
 8000830:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000834:	6013      	str	r3, [r2, #0]
		break;
 8000836:	e006      	b.n	8000846 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_ENABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <Enable_NVIC+0xc8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <Enable_NVIC+0xc8>)
 800083e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000842:	6013      	str	r3, [r2, #0]
		break;
 8000844:	bf00      	nop
	}
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000e104 	.word	0xe000e104

08000858 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d854      	bhi.n	8000912 <Disable_NVIC+0xba>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <Disable_NVIC+0x18>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008bf 	.word	0x080008bf
 8000878:	080008cd 	.word	0x080008cd
 800087c:	080008db 	.word	0x080008db
 8000880:	080008e9 	.word	0x080008e9
 8000884:	080008f7 	.word	0x080008f7
 8000888:	080008f7 	.word	0x080008f7
 800088c:	080008f7 	.word	0x080008f7
 8000890:	080008f7 	.word	0x080008f7
 8000894:	080008f7 	.word	0x080008f7
 8000898:	08000905 	.word	0x08000905
 800089c:	08000905 	.word	0x08000905
 80008a0:	08000905 	.word	0x08000905
 80008a4:	08000905 	.word	0x08000905
 80008a8:	08000905 	.word	0x08000905
 80008ac:	08000905 	.word	0x08000905
	{
	case 0 :
		NVIC_IRQ6_EXTI0_DISABLE;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <Disable_NVIC+0xc4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <Disable_NVIC+0xc4>)
 80008b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ba:	6013      	str	r3, [r2, #0]
		break;
 80008bc:	e029      	b.n	8000912 <Disable_NVIC+0xba>
	case 1 :
		NVIC_IRQ7_EXTI1_DISABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <Disable_NVIC+0xc4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <Disable_NVIC+0xc4>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	6013      	str	r3, [r2, #0]
		break;
 80008ca:	e022      	b.n	8000912 <Disable_NVIC+0xba>
	case 2 :
		NVIC_IRQ8_EXTI2_DISABLE;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <Disable_NVIC+0xc4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <Disable_NVIC+0xc4>)
 80008d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d6:	6013      	str	r3, [r2, #0]
		break;
 80008d8:	e01b      	b.n	8000912 <Disable_NVIC+0xba>
	case 3 :
		NVIC_IRQ8_EXTI2_DISABLE;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <Disable_NVIC+0xc4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <Disable_NVIC+0xc4>)
 80008e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e4:	6013      	str	r3, [r2, #0]
		break;
 80008e6:	e014      	b.n	8000912 <Disable_NVIC+0xba>
	case 4 :
		NVIC_IRQ9_EXTI3_DISABLE;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <Disable_NVIC+0xc4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <Disable_NVIC+0xc4>)
 80008ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f2:	6013      	str	r3, [r2, #0]
		break;
 80008f4:	e00d      	b.n	8000912 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <Disable_NVIC+0xc4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <Disable_NVIC+0xc4>)
 80008fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000900:	6013      	str	r3, [r2, #0]
		break;
 8000902:	e006      	b.n	8000912 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_DISABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <Disable_NVIC+0xc8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a05      	ldr	r2, [pc, #20]	; (8000920 <Disable_NVIC+0xc8>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090e:	6013      	str	r3, [r2, #0]
		break;
 8000910:	bf00      	nop
	}
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	e000e180 	.word	0xe000e180
 8000920:	e000e184 	.word	0xe000e184

08000924 <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_cfg)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	// Configure GPIO AF Input --> Floating Input
	GPIO_PinConfig_t GPIO_Cfg ;
	GPIO_Cfg.GPIO_PinNumber = EXTI_cfg->EXTI_Pin.GPIO_Pin;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	891b      	ldrh	r3, [r3, #8]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	723b      	strb	r3, [r7, #8]
	GPIO_Cfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000934:	2301      	movs	r3, #1
 8000936:	727b      	strb	r3, [r7, #9]
	MCAL_GPIO_Init(EXTI_cfg->EXTI_Pin.GPIO_Port, &GPIO_Cfg);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f107 0208 	add.w	r2, r7, #8
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fa02 	bl	8000d4c <MCAL_GPIO_Init>
	//================================================================

	// Update the AFIO to Route EXTI Line with Port A,B,C,D
	uint8_t AFIO_EXTICR_Index    = (EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber /4);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	b29b      	uxth	r3, r3
 8000950:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber %4)*4;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	73bb      	strb	r3, [r7, #14]

	//Clear Four bit
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position);
 8000962:	4a60      	ldr	r2, [pc, #384]	; (8000ae4 <Update_EXTI+0x1c0>)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3302      	adds	r3, #2
 8000968:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	210f      	movs	r1, #15
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	495a      	ldr	r1, [pc, #360]	; (8000ae4 <Update_EXTI+0x1c0>)
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	4002      	ands	r2, r0
 800097e:	3302      	adds	r3, #2
 8000980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_cfg->EXTI_Pin.GPIO_Port) & 0xF) << AFIO_EXTICR_Position);
 8000984:	4a57      	ldr	r2, [pc, #348]	; (8000ae4 <Update_EXTI+0x1c0>)
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	3302      	adds	r3, #2
 800098a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4955      	ldr	r1, [pc, #340]	; (8000ae8 <Update_EXTI+0x1c4>)
 8000994:	428b      	cmp	r3, r1
 8000996:	d016      	beq.n	80009c6 <Update_EXTI+0xa2>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4953      	ldr	r1, [pc, #332]	; (8000aec <Update_EXTI+0x1c8>)
 800099e:	428b      	cmp	r3, r1
 80009a0:	d00f      	beq.n	80009c2 <Update_EXTI+0x9e>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	4952      	ldr	r1, [pc, #328]	; (8000af0 <Update_EXTI+0x1cc>)
 80009a8:	428b      	cmp	r3, r1
 80009aa:	d008      	beq.n	80009be <Update_EXTI+0x9a>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	4950      	ldr	r1, [pc, #320]	; (8000af4 <Update_EXTI+0x1d0>)
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d101      	bne.n	80009ba <Update_EXTI+0x96>
 80009b6:	2303      	movs	r3, #3
 80009b8:	e006      	b.n	80009c8 <Update_EXTI+0xa4>
 80009ba:	2300      	movs	r3, #0
 80009bc:	e004      	b.n	80009c8 <Update_EXTI+0xa4>
 80009be:	2302      	movs	r3, #2
 80009c0:	e002      	b.n	80009c8 <Update_EXTI+0xa4>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <Update_EXTI+0xa4>
 80009c6:	2300      	movs	r3, #0
 80009c8:	7bb9      	ldrb	r1, [r7, #14]
 80009ca:	408b      	lsls	r3, r1
 80009cc:	4618      	mov	r0, r3
 80009ce:	4945      	ldr	r1, [pc, #276]	; (8000ae4 <Update_EXTI+0x1c0>)
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	4302      	orrs	r2, r0
 80009d4:	3302      	adds	r3, #2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//================================================================

	// Update Raising or Falling Trigger
	//DisableRaising or Falling Trigger
	EXTI->RTSR &= ~(1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 80009da:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <Update_EXTI+0x1d4>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	8812      	ldrh	r2, [r2, #0]
 80009e2:	4611      	mov	r1, r2
 80009e4:	2201      	movs	r2, #1
 80009e6:	408a      	lsls	r2, r1
 80009e8:	43d2      	mvns	r2, r2
 80009ea:	4611      	mov	r1, r2
 80009ec:	4a42      	ldr	r2, [pc, #264]	; (8000af8 <Update_EXTI+0x1d4>)
 80009ee:	400b      	ands	r3, r1
 80009f0:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 80009f2:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <Update_EXTI+0x1d4>)
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	8812      	ldrh	r2, [r2, #0]
 80009fa:	4611      	mov	r1, r2
 80009fc:	2201      	movs	r2, #1
 80009fe:	408a      	lsls	r2, r1
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	4611      	mov	r1, r2
 8000a04:	4a3c      	ldr	r2, [pc, #240]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a06:	400b      	ands	r3, r1
 8000a08:	60d3      	str	r3, [r2, #12]

	if(EXTI_cfg->Trigger_case == EXTI_TRIGGER_RAISING)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7b1b      	ldrb	r3, [r3, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10b      	bne.n	8000a2a <Update_EXTI+0x106>
	{
		EXTI->RTSR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000a12:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	8812      	ldrh	r2, [r2, #0]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	408a      	lsls	r2, r1
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a35      	ldr	r2, [pc, #212]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6093      	str	r3, [r2, #8]
 8000a28:	e029      	b.n	8000a7e <Update_EXTI+0x15a>
	}
	else if(EXTI_cfg->Trigger_case == EXTI_TRIGGER_FALLING)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7b1b      	ldrb	r3, [r3, #12]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d10b      	bne.n	8000a4a <Update_EXTI+0x126>
	{
		EXTI->FTSR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	8812      	ldrh	r2, [r2, #0]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	408a      	lsls	r2, r1
 8000a40:	4611      	mov	r1, r2
 8000a42:	4a2d      	ldr	r2, [pc, #180]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a44:	430b      	orrs	r3, r1
 8000a46:	60d3      	str	r3, [r2, #12]
 8000a48:	e019      	b.n	8000a7e <Update_EXTI+0x15a>
	}
	else if(EXTI_cfg->Trigger_case == EXTI_TRIGGER_RaisingAndFalling)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7b1b      	ldrb	r3, [r3, #12]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d115      	bne.n	8000a7e <Update_EXTI+0x15a>
	{
		EXTI->RTSR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	8812      	ldrh	r2, [r2, #0]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	408a      	lsls	r2, r1
 8000a60:	4611      	mov	r1, r2
 8000a62:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a64:	430b      	orrs	r3, r1
 8000a66:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	8812      	ldrh	r2, [r2, #0]
 8000a70:	4611      	mov	r1, r2
 8000a72:	2201      	movs	r2, #1
 8000a74:	408a      	lsls	r2, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	60d3      	str	r3, [r2, #12]
	}
	//================================================================

	//Update the IRQ CallBack Function
	GP_IRQ_CallBack[EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber] = EXTI_cfg->P_IRQ_CallBack ;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <Update_EXTI+0x1d8>)
 8000a8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//================================================================

	// Enable or Disable IRQ EXTI and NVIC
	if(EXTI_cfg->IRQ_EN == EXTI_IRQ_ENABLE)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7b5b      	ldrb	r3, [r3, #13]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d110      	bne.n	8000ab8 <Update_EXTI+0x194>
	{
		EXTI->IMR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <Update_EXTI+0x1d4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	8812      	ldrh	r2, [r2, #0]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	408a      	lsls	r2, r1
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <Update_EXTI+0x1d4>)
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fe6b 	bl	800078c <Enable_NVIC>
	else
	{
		EXTI->IMR &= ~(1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
	}
}
 8000ab6:	e010      	b.n	8000ada <Update_EXTI+0x1b6>
		EXTI->IMR &= ~(1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <Update_EXTI+0x1d4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	8812      	ldrh	r2, [r2, #0]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	408a      	lsls	r2, r1
 8000ac6:	43d2      	mvns	r2, r2
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <Update_EXTI+0x1d4>)
 8000acc:	400b      	ands	r3, r1
 8000ace:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff febf 	bl	8000858 <Disable_NVIC>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	40010800 	.word	0x40010800
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40011400 	.word	0x40011400
 8000af8:	40010400 	.word	0x40010400
 8000afc:	20000020 	.word	0x20000020

08000b00 <MCAL_EXTI_GPIO_Update>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				-Also Mandatory to Enable RCC Clock for AFIO and GPIO
 */
void MCAL_EXTI_GPIO_Update(EXTI_PinConfig_t* EXTI_cfg)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_cfg);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff0b 	bl	8000924 <Update_EXTI>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <EXTI0_IRQHandler>:

//-----------------------------
//ISR Functions
//-----------------------------
void EXTI0_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<0);
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <EXTI0_IRQHandler+0x1c>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <EXTI0_IRQHandler+0x1c>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[0]();
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <EXTI0_IRQHandler+0x20>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4798      	blx	r3
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010400 	.word	0x40010400
 8000b38:	20000020 	.word	0x20000020

08000b3c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<1);
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <EXTI1_IRQHandler+0x1c>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <EXTI1_IRQHandler+0x1c>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]();
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <EXTI1_IRQHandler+0x20>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	4798      	blx	r3
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40010400 	.word	0x40010400
 8000b5c:	20000020 	.word	0x20000020

08000b60 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<2);
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <EXTI2_IRQHandler+0x1c>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <EXTI2_IRQHandler+0x1c>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]();
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <EXTI2_IRQHandler+0x20>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4798      	blx	r3
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40010400 	.word	0x40010400
 8000b80:	20000020 	.word	0x20000020

08000b84 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<3);
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <EXTI3_IRQHandler+0x1c>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <EXTI3_IRQHandler+0x1c>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]();
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <EXTI3_IRQHandler+0x20>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	4798      	blx	r3
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	20000020 	.word	0x20000020

08000ba8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<4);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <EXTI4_IRQHandler+0x1c>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <EXTI4_IRQHandler+0x1c>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[4]();
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <EXTI4_IRQHandler+0x20>)
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	4798      	blx	r3
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40010400 	.word	0x40010400
 8000bc8:	20000020 	.word	0x20000020

08000bcc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){ EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	f003 0320 	and.w	r3, r3, #32
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d009      	beq.n	8000bf0 <EXTI9_5_IRQHandler+0x24>
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	4a24      	ldr	r2, [pc, #144]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	6153      	str	r3, [r2, #20]
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <EXTI9_5_IRQHandler+0xac>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	4798      	blx	r3
	else if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
	else if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
	else if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
	else if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
}
 8000bee:	e03e      	b.n	8000c6e <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d009      	beq.n	8000c10 <EXTI9_5_IRQHandler+0x44>
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c06:	6153      	str	r3, [r2, #20]
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <EXTI9_5_IRQHandler+0xac>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4798      	blx	r3
}
 8000c0e:	e02e      	b.n	8000c6e <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d009      	beq.n	8000c30 <EXTI9_5_IRQHandler+0x64>
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c26:	6153      	str	r3, [r2, #20]
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <EXTI9_5_IRQHandler+0xac>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	4798      	blx	r3
}
 8000c2e:	e01e      	b.n	8000c6e <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d009      	beq.n	8000c50 <EXTI9_5_IRQHandler+0x84>
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	6153      	str	r3, [r2, #20]
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <EXTI9_5_IRQHandler+0xac>)
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	4798      	blx	r3
}
 8000c4e:	e00e      	b.n	8000c6e <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d008      	beq.n	8000c6e <EXTI9_5_IRQHandler+0xa2>
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <EXTI9_5_IRQHandler+0xa8>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6153      	str	r3, [r2, #20]
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <EXTI9_5_IRQHandler+0xac>)
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6c:	4798      	blx	r3
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40010400 	.word	0x40010400
 8000c78:	20000020 	.word	0x20000020

08000c7c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){ EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 8000c80:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d009      	beq.n	8000ca0 <EXTI15_10_IRQHandler+0x24>
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a2c      	ldr	r2, [pc, #176]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6153      	str	r3, [r2, #20]
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <EXTI15_10_IRQHandler+0xcc>)
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	4798      	blx	r3
	else if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
	else if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
	else if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
	else if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
	else if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
}
 8000c9e:	e04e      	b.n	8000d3e <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d009      	beq.n	8000cc0 <EXTI15_10_IRQHandler+0x44>
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000cb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb6:	6153      	str	r3, [r2, #20]
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <EXTI15_10_IRQHandler+0xcc>)
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	4798      	blx	r3
}
 8000cbe:	e03e      	b.n	8000d3e <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d009      	beq.n	8000ce0 <EXTI15_10_IRQHandler+0x64>
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd6:	6153      	str	r3, [r2, #20]
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <EXTI15_10_IRQHandler+0xcc>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4798      	blx	r3
}
 8000cde:	e02e      	b.n	8000d3e <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d009      	beq.n	8000d00 <EXTI15_10_IRQHandler+0x84>
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf6:	6153      	str	r3, [r2, #20]
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <EXTI15_10_IRQHandler+0xcc>)
 8000cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfc:	4798      	blx	r3
}
 8000cfe:	e01e      	b.n	8000d3e <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d009      	beq.n	8000d20 <EXTI15_10_IRQHandler+0xa4>
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d16:	6153      	str	r3, [r2, #20]
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <EXTI15_10_IRQHandler+0xcc>)
 8000d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1c:	4798      	blx	r3
}
 8000d1e:	e00e      	b.n	8000d3e <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d008      	beq.n	8000d3e <EXTI15_10_IRQHandler+0xc2>
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <EXTI15_10_IRQHandler+0xc8>)
 8000d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d36:	6153      	str	r3, [r2, #20]
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <EXTI15_10_IRQHandler+0xcc>)
 8000d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3c:	4798      	blx	r3
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40010400 	.word	0x40010400
 8000d48:	20000020 	.word	0x20000020

08000d4c <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX ,  GPIO_PinConfig_t *PinConfig)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32* configregister ;
	uint8 PIN_Config = 0 ;
 8000d56:	2300      	movs	r3, #0
 8000d58:	75fb      	strb	r3, [r7, #23]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d801      	bhi.n	8000d66 <MCAL_GPIO_Init+0x1a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	e001      	b.n	8000d6a <MCAL_GPIO_Init+0x1e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	613b      	str	r3, [r7, #16]

	//Get the position of configuration pins in CRL or CRH
	// CRL (position = pin number * 4)
	// CRH (position = (pinNumber-8)*4)
	uint8 CRLH_Position;
	CRLH_Position = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? (PinConfig->GPIO_PinNumber * 4): ((PinConfig->GPIO_PinNumber -8) * 4) ;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b07      	cmp	r3, #7
 8000d72:	d804      	bhi.n	8000d7e <MCAL_GPIO_Init+0x32>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	e005      	b.n	8000d8a <MCAL_GPIO_Init+0x3e>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3338      	adds	r3, #56	; 0x38
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	73fb      	strb	r3, [r7, #15]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << CRLH_Position);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	210f      	movs	r1, #15
 8000d94:	fa01 f202 	lsl.w	r2, r1, r2
 8000d98:	43d2      	mvns	r2, r2
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_Mode > GPIO_MODE_INPUT_PD) && (PinConfig->GPIO_Mode != GPIO_MODE_AF_INPUT))
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d912      	bls.n	8000dce <MCAL_GPIO_Init+0x82>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	785b      	ldrb	r3, [r3, #1]
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d00e      	beq.n	8000dce <MCAL_GPIO_Init+0x82>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4)<<2)|(PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	785b      	ldrb	r3, [r3, #1]
 8000db4:	3b04      	subs	r3, #4
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	b25a      	sxtb	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	789b      	ldrb	r3, [r3, #2]
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	75fb      	strb	r3, [r7, #23]
 8000dcc:	e032      	b.n	8000e34 <MCAL_GPIO_Init+0xe8>
	}
	//else the pin is input
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_Analog)||(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	785b      	ldrb	r3, [r3, #1]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <MCAL_GPIO_Init+0x92>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	785b      	ldrb	r3, [r3, #1]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d107      	bne.n	8000dee <MCAL_GPIO_Init+0xa2>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((PinConfig->GPIO_Mode)<<2)|0x0) & 0x0f);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	785b      	ldrb	r3, [r3, #1]
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	75fb      	strb	r3, [r7, #23]
 8000dec:	e022      	b.n	8000e34 <MCAL_GPIO_Init+0xe8>
		}
		else if ((PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT))
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	785b      	ldrb	r3, [r3, #1]
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d102      	bne.n	8000dfc <MCAL_GPIO_Init+0xb0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_FLO)<<2)|0x0) & 0x0f);
 8000df6:	2304      	movs	r3, #4
 8000df8:	75fb      	strb	r3, [r7, #23]
 8000dfa:	e01b      	b.n	8000e34 <MCAL_GPIO_Init+0xe8>
		}
		else //PU PD Input
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_PU)<<2)|0x0) & 0x0f);
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	75fb      	strb	r3, [r7, #23]

			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d10a      	bne.n	8000e1e <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOX->ODR |= (1<<PinConfig->GPIO_PinNumber);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	4611      	mov	r1, r2
 8000e12:	2201      	movs	r2, #1
 8000e14:	408a      	lsls	r2, r1
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	e00a      	b.n	8000e34 <MCAL_GPIO_Init+0xe8>
			}
			else
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOX->ODR &= ~(1<<PinConfig->GPIO_PinNumber);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	4611      	mov	r1, r2
 8000e28:	2201      	movs	r2, #1
 8000e2a:	408a      	lsls	r2, r1
 8000e2c:	43d2      	mvns	r2, r2
 8000e2e:	401a      	ands	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << CRLH_Position);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	7df9      	ldrb	r1, [r7, #23]
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	431a      	orrs	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	601a      	str	r2, [r3, #0]

}
 8000e46:	bf00      	nop
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8 MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOX,uint8 PinNumber )
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
	uint8 bitstatus ;
	if(((GPIOX->IDR)&(1<<PinNumber))!= (uint32)GPIO_PIN_RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <MCAL_GPIO_ReadPin+0x24>
	{
		bitstatus = GPIO_PIN_SET ;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	e001      	b.n	8000e78 <MCAL_GPIO_ReadPin+0x28>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET ;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus ;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOX,uint8 PinNumber , uint8 Value)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
 8000e90:	4613      	mov	r3, r2
 8000e92:	70bb      	strb	r3, [r7, #2]
	if(Value != GPIO_PIN_RESET)
 8000e94:	78bb      	ldrb	r3, [r7, #2]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d009      	beq.n	8000eae <MCAL_GPIO_WritePin+0x2a>
	{
		GPIOX->ODR |= (1<<PinNumber);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	78fa      	ldrb	r2, [r7, #3]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOX->ODR &= ~(1<<PinNumber);
	}

}
 8000eac:	e009      	b.n	8000ec2 <MCAL_GPIO_WritePin+0x3e>
		GPIOX->ODR &= ~(1<<PinNumber);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	43d2      	mvns	r2, r2
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <__libc_init_array>:
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	2500      	movs	r5, #0
 8000ed0:	4e0c      	ldr	r6, [pc, #48]	; (8000f04 <__libc_init_array+0x38>)
 8000ed2:	4c0d      	ldr	r4, [pc, #52]	; (8000f08 <__libc_init_array+0x3c>)
 8000ed4:	1ba4      	subs	r4, r4, r6
 8000ed6:	10a4      	asrs	r4, r4, #2
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	d109      	bne.n	8000ef0 <__libc_init_array+0x24>
 8000edc:	f000 f81a 	bl	8000f14 <_init>
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	4e0a      	ldr	r6, [pc, #40]	; (8000f0c <__libc_init_array+0x40>)
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <__libc_init_array+0x44>)
 8000ee6:	1ba4      	subs	r4, r4, r6
 8000ee8:	10a4      	asrs	r4, r4, #2
 8000eea:	42a5      	cmp	r5, r4
 8000eec:	d105      	bne.n	8000efa <__libc_init_array+0x2e>
 8000eee:	bd70      	pop	{r4, r5, r6, pc}
 8000ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ef4:	4798      	blx	r3
 8000ef6:	3501      	adds	r5, #1
 8000ef8:	e7ee      	b.n	8000ed8 <__libc_init_array+0xc>
 8000efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000efe:	4798      	blx	r3
 8000f00:	3501      	adds	r5, #1
 8000f02:	e7f2      	b.n	8000eea <__libc_init_array+0x1e>
 8000f04:	08000f54 	.word	0x08000f54
 8000f08:	08000f54 	.word	0x08000f54
 8000f0c:	08000f54 	.word	0x08000f54
 8000f10:	08000f58 	.word	0x08000f58

08000f14 <_init>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	bf00      	nop
 8000f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1a:	bc08      	pop	{r3}
 8000f1c:	469e      	mov	lr, r3
 8000f1e:	4770      	bx	lr

08000f20 <_fini>:
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f22:	bf00      	nop
 8000f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f26:	bc08      	pop	{r3}
 8000f28:	469e      	mov	lr, r3
 8000f2a:	4770      	bx	lr
