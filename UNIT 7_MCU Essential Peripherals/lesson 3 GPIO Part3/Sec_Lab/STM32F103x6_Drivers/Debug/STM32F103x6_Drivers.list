
STM32F103x6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002444  08002444  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002444  08002444  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002444  08002444  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002448  08002448  00012448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800244c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000080  080024c8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080024c8  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001669  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005b3  00000000  00000000  0002170e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000765  00000000  00000000  00021cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000168  00000000  00000000  00022428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00022590  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000015c7  00000000  00000000  000226a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000010a1  00000000  00000000  00023c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006e18  00000000  00000000  00024d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002bb20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009f8  00000000  00000000  0002bb9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000080 	.word	0x20000080
 800014c:	00000000 	.word	0x00000000
 8000150:	080023e0 	.word	0x080023e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000084 	.word	0x20000084
 800016c:	080023e0 	.word	0x080023e0

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	; 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	d1ed      	bne.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_fmul>:
 8000cd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce0:	bf1e      	ittt	ne
 8000ce2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce6:	ea92 0f0c 	teqne	r2, ip
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d06f      	beq.n	8000dd0 <__aeabi_fmul+0xf8>
 8000cf0:	441a      	add	r2, r3
 8000cf2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf6:	0240      	lsls	r0, r0, #9
 8000cf8:	bf18      	it	ne
 8000cfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfe:	d01e      	beq.n	8000d3e <__aeabi_fmul+0x66>
 8000d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d18:	bf3e      	ittt	cc
 8000d1a:	0049      	lslcc	r1, r1, #1
 8000d1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d20:	005b      	lslcc	r3, r3, #1
 8000d22:	ea40 0001 	orr.w	r0, r0, r1
 8000d26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2a:	2afd      	cmp	r2, #253	; 0xfd
 8000d2c:	d81d      	bhi.n	8000d6a <__aeabi_fmul+0x92>
 8000d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	4770      	bx	lr
 8000d3e:	f090 0f00 	teq	r0, #0
 8000d42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d46:	bf08      	it	eq
 8000d48:	0249      	lsleq	r1, r1, #9
 8000d4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d52:	3a7f      	subs	r2, #127	; 0x7f
 8000d54:	bfc2      	ittt	gt
 8000d56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5e:	4770      	bxgt	lr
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	dc5d      	bgt.n	8000e28 <__aeabi_fmul+0x150>
 8000d6c:	f112 0f19 	cmn.w	r2, #25
 8000d70:	bfdc      	itt	le
 8000d72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d76:	4770      	bxle	lr
 8000d78:	f1c2 0200 	rsb	r2, r2, #0
 8000d7c:	0041      	lsls	r1, r0, #1
 8000d7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d82:	f1c2 0220 	rsb	r2, r2, #32
 8000d86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8e:	f140 0000 	adc.w	r0, r0, #0
 8000d92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d96:	bf08      	it	eq
 8000d98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9c:	4770      	bx	lr
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0040      	lsleq	r0, r0, #1
 8000daa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dae:	3a01      	subeq	r2, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fmul+0xce>
 8000db2:	ea40 000c 	orr.w	r0, r0, ip
 8000db6:	f093 0f00 	teq	r3, #0
 8000dba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dbe:	bf02      	ittt	eq
 8000dc0:	0049      	lsleq	r1, r1, #1
 8000dc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc6:	3b01      	subeq	r3, #1
 8000dc8:	d0f9      	beq.n	8000dbe <__aeabi_fmul+0xe6>
 8000dca:	ea41 010c 	orr.w	r1, r1, ip
 8000dce:	e78f      	b.n	8000cf0 <__aeabi_fmul+0x18>
 8000dd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	bf18      	it	ne
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d00a      	beq.n	8000df6 <__aeabi_fmul+0x11e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1d8      	bne.n	8000d9e <__aeabi_fmul+0xc6>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	bf17      	itett	ne
 8000dfc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e00:	4608      	moveq	r0, r1
 8000e02:	f091 0f00 	teqne	r1, #0
 8000e06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0a:	d014      	beq.n	8000e36 <__aeabi_fmul+0x15e>
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d101      	bne.n	8000e16 <__aeabi_fmul+0x13e>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	d10f      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e16:	ea93 0f0c 	teq	r3, ip
 8000e1a:	d103      	bne.n	8000e24 <__aeabi_fmul+0x14c>
 8000e1c:	024b      	lsls	r3, r1, #9
 8000e1e:	bf18      	it	ne
 8000e20:	4608      	movne	r0, r1
 8000e22:	d108      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e24:	ea80 0001 	eor.w	r0, r0, r1
 8000e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e34:	4770      	bx	lr
 8000e36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3e:	4770      	bx	lr

08000e40 <__aeabi_fdiv>:
 8000e40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e48:	bf1e      	ittt	ne
 8000e4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4e:	ea92 0f0c 	teqne	r2, ip
 8000e52:	ea93 0f0c 	teqne	r3, ip
 8000e56:	d069      	beq.n	8000f2c <__aeabi_fdiv+0xec>
 8000e58:	eba2 0203 	sub.w	r2, r2, r3
 8000e5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e60:	0249      	lsls	r1, r1, #9
 8000e62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e66:	d037      	beq.n	8000ed8 <__aeabi_fdiv+0x98>
 8000e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	bf38      	it	cc
 8000e7c:	005b      	lslcc	r3, r3, #1
 8000e7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e86:	428b      	cmp	r3, r1
 8000e88:	bf24      	itt	cs
 8000e8a:	1a5b      	subcs	r3, r3, r1
 8000e8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e94:	bf24      	itt	cs
 8000e96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea2:	bf24      	itt	cs
 8000ea4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	bf18      	it	ne
 8000ebe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec2:	d1e0      	bne.n	8000e86 <__aeabi_fdiv+0x46>
 8000ec4:	2afd      	cmp	r2, #253	; 0xfd
 8000ec6:	f63f af50 	bhi.w	8000d6a <__aeabi_fmul+0x92>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed0:	bf08      	it	eq
 8000ed2:	f020 0001 	biceq.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000edc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee0:	327f      	adds	r2, #127	; 0x7f
 8000ee2:	bfc2      	ittt	gt
 8000ee4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eec:	4770      	bxgt	lr
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	e737      	b.n	8000d6a <__aeabi_fmul+0x92>
 8000efa:	f092 0f00 	teq	r2, #0
 8000efe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0040      	lsleq	r0, r0, #1
 8000f06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0a:	3a01      	subeq	r2, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fdiv+0xc2>
 8000f0e:	ea40 000c 	orr.w	r0, r0, ip
 8000f12:	f093 0f00 	teq	r3, #0
 8000f16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	bf02      	ittt	eq
 8000f1c:	0049      	lsleq	r1, r1, #1
 8000f1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f22:	3b01      	subeq	r3, #1
 8000f24:	d0f9      	beq.n	8000f1a <__aeabi_fdiv+0xda>
 8000f26:	ea41 010c 	orr.w	r1, r1, ip
 8000f2a:	e795      	b.n	8000e58 <__aeabi_fdiv+0x18>
 8000f2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d108      	bne.n	8000f48 <__aeabi_fdiv+0x108>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	f47f af7d 	bne.w	8000e36 <__aeabi_fmul+0x15e>
 8000f3c:	ea93 0f0c 	teq	r3, ip
 8000f40:	f47f af70 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e776      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	d104      	bne.n	8000f58 <__aeabi_fdiv+0x118>
 8000f4e:	024b      	lsls	r3, r1, #9
 8000f50:	f43f af4c 	beq.w	8000dec <__aeabi_fmul+0x114>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e76e      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f5c:	bf18      	it	ne
 8000f5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f62:	d1ca      	bne.n	8000efa <__aeabi_fdiv+0xba>
 8000f64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f68:	f47f af5c 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f70:	f47f af3c 	bne.w	8000dec <__aeabi_fmul+0x114>
 8000f74:	e75f      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f76:	bf00      	nop

08000f78 <__aeabi_f2uiz>:
 8000f78:	0042      	lsls	r2, r0, #1
 8000f7a:	d20e      	bcs.n	8000f9a <__aeabi_f2uiz+0x22>
 8000f7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f80:	d30b      	bcc.n	8000f9a <__aeabi_f2uiz+0x22>
 8000f82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f8a:	d409      	bmi.n	8000fa0 <__aeabi_f2uiz+0x28>
 8000f8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f94:	fa23 f002 	lsr.w	r0, r3, r2
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0000 	mov.w	r0, #0
 8000f9e:	4770      	bx	lr
 8000fa0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa4:	d101      	bne.n	8000faa <__aeabi_f2uiz+0x32>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	d102      	bne.n	8000fb0 <__aeabi_f2uiz+0x38>
 8000faa:	f04f 30ff 	mov.w	r0, #4294967295
 8000fae:	4770      	bx	lr
 8000fb0:	f04f 0000 	mov.w	r0, #0
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <KEYPAD_init>:
uint8 KEYPAD_ROW[KEYPAD_ROWS] = {KEYPAD_R0,KEYPAD_R1,KEYPAD_R2,KEYPAD_R3};
uint8 KEYPAD_COLUM[KEYPAD_COLUMS] = {KEYPAD_C0,KEYPAD_C1,KEYPAD_C2,KEYPAD_C3};
uint8 keys[KEYPAD_ROWS][KEYPAD_COLUMS]= KEYPAD_keys ;

void KEYPAD_init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	/* Set the ROWS pins  input */
	pinconfg.GPIO_PinNumber = KEYPAD_R0;
 8000fbc:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <KEYPAD_init+0x110>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 8000fc2:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <KEYPAD_init+0x110>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8000fc8:	493f      	ldr	r1, [pc, #252]	; (80010c8 <KEYPAD_init+0x110>)
 8000fca:	4840      	ldr	r0, [pc, #256]	; (80010cc <KEYPAD_init+0x114>)
 8000fcc:	f000 fd0b 	bl	80019e6 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_R1;
 8000fd0:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <KEYPAD_init+0x110>)
 8000fd2:	220d      	movs	r2, #13
 8000fd4:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <KEYPAD_init+0x110>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8000fdc:	493a      	ldr	r1, [pc, #232]	; (80010c8 <KEYPAD_init+0x110>)
 8000fde:	483b      	ldr	r0, [pc, #236]	; (80010cc <KEYPAD_init+0x114>)
 8000fe0:	f000 fd01 	bl	80019e6 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_R2;
 8000fe4:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <KEYPAD_init+0x110>)
 8000fe6:	220e      	movs	r2, #14
 8000fe8:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <KEYPAD_init+0x110>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8000ff0:	4935      	ldr	r1, [pc, #212]	; (80010c8 <KEYPAD_init+0x110>)
 8000ff2:	4836      	ldr	r0, [pc, #216]	; (80010cc <KEYPAD_init+0x114>)
 8000ff4:	f000 fcf7 	bl	80019e6 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_R3;
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <KEYPAD_init+0x110>)
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <KEYPAD_init+0x110>)
 8001000:	2202      	movs	r2, #2
 8001002:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8001004:	4930      	ldr	r1, [pc, #192]	; (80010c8 <KEYPAD_init+0x110>)
 8001006:	4831      	ldr	r0, [pc, #196]	; (80010cc <KEYPAD_init+0x114>)
 8001008:	f000 fced 	bl	80019e6 <MCAL_GPIO_Init>

	/* Set The COLUMS pins Output */
	pinconfg.GPIO_PinNumber = KEYPAD_C0;
 800100c:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <KEYPAD_init+0x110>)
 800100e:	2203      	movs	r2, #3
 8001010:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <KEYPAD_init+0x110>)
 8001014:	2204      	movs	r2, #4
 8001016:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <KEYPAD_init+0x110>)
 800101a:	2201      	movs	r2, #1
 800101c:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 800101e:	492a      	ldr	r1, [pc, #168]	; (80010c8 <KEYPAD_init+0x110>)
 8001020:	482a      	ldr	r0, [pc, #168]	; (80010cc <KEYPAD_init+0x114>)
 8001022:	f000 fce0 	bl	80019e6 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_C1;
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <KEYPAD_init+0x110>)
 8001028:	2204      	movs	r2, #4
 800102a:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <KEYPAD_init+0x110>)
 800102e:	2204      	movs	r2, #4
 8001030:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <KEYPAD_init+0x110>)
 8001034:	2201      	movs	r2, #1
 8001036:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8001038:	4923      	ldr	r1, [pc, #140]	; (80010c8 <KEYPAD_init+0x110>)
 800103a:	4824      	ldr	r0, [pc, #144]	; (80010cc <KEYPAD_init+0x114>)
 800103c:	f000 fcd3 	bl	80019e6 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_C2;
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <KEYPAD_init+0x110>)
 8001042:	2205      	movs	r2, #5
 8001044:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <KEYPAD_init+0x110>)
 8001048:	2204      	movs	r2, #4
 800104a:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <KEYPAD_init+0x110>)
 800104e:	2201      	movs	r2, #1
 8001050:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8001052:	491d      	ldr	r1, [pc, #116]	; (80010c8 <KEYPAD_init+0x110>)
 8001054:	481d      	ldr	r0, [pc, #116]	; (80010cc <KEYPAD_init+0x114>)
 8001056:	f000 fcc6 	bl	80019e6 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_C3;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <KEYPAD_init+0x110>)
 800105c:	2206      	movs	r2, #6
 800105e:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <KEYPAD_init+0x110>)
 8001062:	2204      	movs	r2, #4
 8001064:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <KEYPAD_init+0x110>)
 8001068:	2201      	movs	r2, #1
 800106a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 800106c:	4916      	ldr	r1, [pc, #88]	; (80010c8 <KEYPAD_init+0x110>)
 800106e:	4817      	ldr	r0, [pc, #92]	; (80010cc <KEYPAD_init+0x114>)
 8001070:	f000 fcb9 	bl	80019e6 <MCAL_GPIO_Init>

	/* Set the port of data */
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_R0, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	210c      	movs	r1, #12
 8001078:	4814      	ldr	r0, [pc, #80]	; (80010cc <KEYPAD_init+0x114>)
 800107a:	f000 fd50 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_R1, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	210d      	movs	r1, #13
 8001082:	4812      	ldr	r0, [pc, #72]	; (80010cc <KEYPAD_init+0x114>)
 8001084:	f000 fd4b 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_R2, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	210e      	movs	r1, #14
 800108c:	480f      	ldr	r0, [pc, #60]	; (80010cc <KEYPAD_init+0x114>)
 800108e:	f000 fd46 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_R3, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	210f      	movs	r1, #15
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <KEYPAD_init+0x114>)
 8001098:	f000 fd41 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C0, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2103      	movs	r1, #3
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <KEYPAD_init+0x114>)
 80010a2:	f000 fd3c 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C1, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2104      	movs	r1, #4
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <KEYPAD_init+0x114>)
 80010ac:	f000 fd37 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C2, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2105      	movs	r1, #5
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <KEYPAD_init+0x114>)
 80010b6:	f000 fd32 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C3, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2106      	movs	r1, #6
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <KEYPAD_init+0x114>)
 80010c0:	f000 fd2d 	bl	8001b1e <MCAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000b8 	.word	0x200000b8
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <KEYPAD_GetKey>:
char KEYPAD_GetKey(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
	uint8 i , j ;

	for (i=0 ; i<KEYPAD_COLUMS ; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e044      	b.n	8001166 <KEYPAD_GetKey+0x96>
	{
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C0, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2103      	movs	r1, #3
 80010e0:	4825      	ldr	r0, [pc, #148]	; (8001178 <KEYPAD_GetKey+0xa8>)
 80010e2:	f000 fd1c 	bl	8001b1e <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C1, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2104      	movs	r1, #4
 80010ea:	4823      	ldr	r0, [pc, #140]	; (8001178 <KEYPAD_GetKey+0xa8>)
 80010ec:	f000 fd17 	bl	8001b1e <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C2, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2105      	movs	r1, #5
 80010f4:	4820      	ldr	r0, [pc, #128]	; (8001178 <KEYPAD_GetKey+0xa8>)
 80010f6:	f000 fd12 	bl	8001b1e <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C3, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2106      	movs	r1, #6
 80010fe:	481e      	ldr	r0, [pc, #120]	; (8001178 <KEYPAD_GetKey+0xa8>)
 8001100:	f000 fd0d 	bl	8001b1e <MCAL_GPIO_WritePin>

		/* clear COLUM number i to check the low voltage when click key */
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_COLUM[i], GPIO_PIN_RESET);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4a1d      	ldr	r2, [pc, #116]	; (800117c <KEYPAD_GetKey+0xac>)
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	481a      	ldr	r0, [pc, #104]	; (8001178 <KEYPAD_GetKey+0xa8>)
 8001110:	f000 fd05 	bl	8001b1e <MCAL_GPIO_WritePin>

		/* loop for ROWs */
		for(j= 0 ; j<KEYPAD_ROWS ; j++ )
 8001114:	2300      	movs	r3, #0
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	e01f      	b.n	800115a <KEYPAD_GetKey+0x8a>
		{
			if (!(MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_ROW[j])))
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	4a18      	ldr	r2, [pc, #96]	; (8001180 <KEYPAD_GetKey+0xb0>)
 800111e:	5cd3      	ldrb	r3, [r2, r3]
 8001120:	4619      	mov	r1, r3
 8001122:	4815      	ldr	r0, [pc, #84]	; (8001178 <KEYPAD_GetKey+0xa8>)
 8001124:	f000 fce1 	bl	8001aea <MCAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d112      	bne.n	8001154 <KEYPAD_GetKey+0x84>
			{
				while(!(MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_ROW[j])));
 800112e:	bf00      	nop
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <KEYPAD_GetKey+0xb0>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	4619      	mov	r1, r3
 8001138:	480f      	ldr	r0, [pc, #60]	; (8001178 <KEYPAD_GetKey+0xa8>)
 800113a:	f000 fcd6 	bl	8001aea <MCAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f5      	beq.n	8001130 <KEYPAD_GetKey+0x60>
				return keys[j][i];
 8001144:	79ba      	ldrb	r2, [r7, #6]
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	490e      	ldr	r1, [pc, #56]	; (8001184 <KEYPAD_GetKey+0xb4>)
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	440a      	add	r2, r1
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	e00c      	b.n	800116e <KEYPAD_GetKey+0x9e>
		for(j= 0 ; j<KEYPAD_ROWS ; j++ )
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	3301      	adds	r3, #1
 8001158:	71bb      	strb	r3, [r7, #6]
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d9dc      	bls.n	800111a <KEYPAD_GetKey+0x4a>
	for (i=0 ; i<KEYPAD_COLUMS ; i++)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3301      	adds	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d9b7      	bls.n	80010dc <KEYPAD_GetKey+0xc>
			}
		}
	}

	return 0 ;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40010c00 	.word	0x40010c00
 800117c:	20000004 	.word	0x20000004
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008

08001188 <wait_ms>:
// global variables
GPIO_PinConfig_t pincofg  ;

// LCD global functions
void wait_ms(uint32 time )
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint32 i,j;
	for(i=0 ; i<time ; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e00b      	b.n	80011ae <wait_ms+0x26>
		for(j=0 ; j<255 ; j++);
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	e002      	b.n	80011a2 <wait_ms+0x1a>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	3301      	adds	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2bfe      	cmp	r3, #254	; 0xfe
 80011a6:	d9f9      	bls.n	800119c <wait_ms+0x14>
	for(i=0 ; i<time ; i++)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3301      	adds	r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d3ef      	bcc.n	8001196 <wait_ms+0xe>
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <LCD_EN_Pluse>:
void LCD_EN_Pluse(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_EN_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	210a      	movs	r1, #10
 80011c8:	4806      	ldr	r0, [pc, #24]	; (80011e4 <LCD_EN_Pluse+0x24>)
 80011ca:	f000 fca8 	bl	8001b1e <MCAL_GPIO_WritePin>
	wait_ms(50);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f7ff ffda 	bl	8001188 <wait_ms>
	MCAL_GPIO_WritePin(LCD_EN_PORT, LCD_EN_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	210a      	movs	r1, #10
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <LCD_EN_Pluse+0x24>)
 80011da:	f000 fca0 	bl	8001b1e <MCAL_GPIO_WritePin>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40010c00 	.word	0x40010c00

080011e8 <LCD_init>:

/* LCD APIS */
void LCD_init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	wait_ms(20);
 80011ec:	2014      	movs	r0, #20
 80011ee:	f7ff ffcb 	bl	8001188 <wait_ms>

	// Set LCD Data Port output
	pincofg.GPIO_PinNumber = LCD_D0_PIN;
 80011f2:	4b5a      	ldr	r3, [pc, #360]	; (800135c <LCD_init+0x174>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	4b58      	ldr	r3, [pc, #352]	; (800135c <LCD_init+0x174>)
 80011fa:	2204      	movs	r2, #4
 80011fc:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <LCD_init+0x174>)
 8001200:	2201      	movs	r2, #1
 8001202:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8001204:	4955      	ldr	r1, [pc, #340]	; (800135c <LCD_init+0x174>)
 8001206:	4856      	ldr	r0, [pc, #344]	; (8001360 <LCD_init+0x178>)
 8001208:	f000 fbed 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D1_PIN;
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <LCD_init+0x174>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	4b52      	ldr	r3, [pc, #328]	; (800135c <LCD_init+0x174>)
 8001214:	2204      	movs	r2, #4
 8001216:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <LCD_init+0x174>)
 800121a:	2201      	movs	r2, #1
 800121c:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 800121e:	494f      	ldr	r1, [pc, #316]	; (800135c <LCD_init+0x174>)
 8001220:	484f      	ldr	r0, [pc, #316]	; (8001360 <LCD_init+0x178>)
 8001222:	f000 fbe0 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D2_PIN;
 8001226:	4b4d      	ldr	r3, [pc, #308]	; (800135c <LCD_init+0x174>)
 8001228:	2202      	movs	r2, #2
 800122a:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <LCD_init+0x174>)
 800122e:	2204      	movs	r2, #4
 8001230:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <LCD_init+0x174>)
 8001234:	2201      	movs	r2, #1
 8001236:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8001238:	4948      	ldr	r1, [pc, #288]	; (800135c <LCD_init+0x174>)
 800123a:	4849      	ldr	r0, [pc, #292]	; (8001360 <LCD_init+0x178>)
 800123c:	f000 fbd3 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D3_PIN;
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <LCD_init+0x174>)
 8001242:	2203      	movs	r2, #3
 8001244:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <LCD_init+0x174>)
 8001248:	2204      	movs	r2, #4
 800124a:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800124c:	4b43      	ldr	r3, [pc, #268]	; (800135c <LCD_init+0x174>)
 800124e:	2201      	movs	r2, #1
 8001250:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8001252:	4942      	ldr	r1, [pc, #264]	; (800135c <LCD_init+0x174>)
 8001254:	4842      	ldr	r0, [pc, #264]	; (8001360 <LCD_init+0x178>)
 8001256:	f000 fbc6 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D4_PIN;
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <LCD_init+0x174>)
 800125c:	2204      	movs	r2, #4
 800125e:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	4b3e      	ldr	r3, [pc, #248]	; (800135c <LCD_init+0x174>)
 8001262:	2204      	movs	r2, #4
 8001264:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <LCD_init+0x174>)
 8001268:	2201      	movs	r2, #1
 800126a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 800126c:	493b      	ldr	r1, [pc, #236]	; (800135c <LCD_init+0x174>)
 800126e:	483c      	ldr	r0, [pc, #240]	; (8001360 <LCD_init+0x178>)
 8001270:	f000 fbb9 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D5_PIN;
 8001274:	4b39      	ldr	r3, [pc, #228]	; (800135c <LCD_init+0x174>)
 8001276:	2205      	movs	r2, #5
 8001278:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <LCD_init+0x174>)
 800127c:	2204      	movs	r2, #4
 800127e:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <LCD_init+0x174>)
 8001282:	2201      	movs	r2, #1
 8001284:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8001286:	4935      	ldr	r1, [pc, #212]	; (800135c <LCD_init+0x174>)
 8001288:	4835      	ldr	r0, [pc, #212]	; (8001360 <LCD_init+0x178>)
 800128a:	f000 fbac 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D6_PIN;
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <LCD_init+0x174>)
 8001290:	2206      	movs	r2, #6
 8001292:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <LCD_init+0x174>)
 8001296:	2204      	movs	r2, #4
 8001298:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <LCD_init+0x174>)
 800129c:	2201      	movs	r2, #1
 800129e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 80012a0:	492e      	ldr	r1, [pc, #184]	; (800135c <LCD_init+0x174>)
 80012a2:	482f      	ldr	r0, [pc, #188]	; (8001360 <LCD_init+0x178>)
 80012a4:	f000 fb9f 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_D7_PIN;
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <LCD_init+0x174>)
 80012aa:	2207      	movs	r2, #7
 80012ac:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <LCD_init+0x174>)
 80012b0:	2204      	movs	r2, #4
 80012b2:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <LCD_init+0x174>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 80012ba:	4928      	ldr	r1, [pc, #160]	; (800135c <LCD_init+0x174>)
 80012bc:	4828      	ldr	r0, [pc, #160]	; (8001360 <LCD_init+0x178>)
 80012be:	f000 fb92 	bl	80019e6 <MCAL_GPIO_Init>

	// SET control pins output (Rs , RW , EN)
	pincofg.GPIO_PinNumber = LCD_RS_PIN;
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <LCD_init+0x174>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <LCD_init+0x174>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <LCD_init+0x174>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_RS_PORT, &pincofg);
 80012d4:	4921      	ldr	r1, [pc, #132]	; (800135c <LCD_init+0x174>)
 80012d6:	4823      	ldr	r0, [pc, #140]	; (8001364 <LCD_init+0x17c>)
 80012d8:	f000 fb85 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_RW_PIN;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <LCD_init+0x174>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <LCD_init+0x174>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <LCD_init+0x174>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_RW_PORT, &pincofg);
 80012ee:	491b      	ldr	r1, [pc, #108]	; (800135c <LCD_init+0x174>)
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <LCD_init+0x17c>)
 80012f2:	f000 fb78 	bl	80019e6 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = LCD_EN_PIN;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <LCD_init+0x174>)
 80012f8:	220a      	movs	r2, #10
 80012fa:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <LCD_init+0x174>)
 80012fe:	2204      	movs	r2, #4
 8001300:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <LCD_init+0x174>)
 8001304:	2201      	movs	r2, #1
 8001306:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_EN_PORT, &pincofg);
 8001308:	4914      	ldr	r1, [pc, #80]	; (800135c <LCD_init+0x174>)
 800130a:	4816      	ldr	r0, [pc, #88]	; (8001364 <LCD_init+0x17c>)
 800130c:	f000 fb6b 	bl	80019e6 <MCAL_GPIO_Init>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <LCD_init+0x17c>)
 8001316:	f000 fc02 	bl	8001b1e <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <LCD_init+0x17c>)
 8001320:	f000 fbfd 	bl	8001b1e <MCAL_GPIO_WritePin>

	// EN off
	MCAL_GPIO_WritePin(LCD_EN_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	210a      	movs	r1, #10
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <LCD_init+0x17c>)
 800132a:	f000 fbf8 	bl	8001b1e <MCAL_GPIO_WritePin>

	wait_ms(15);
 800132e:	200f      	movs	r0, #15
 8001330:	f7ff ff2a 	bl	8001188 <wait_ms>
	LCD_Clear_Screen();
 8001334:	f000 f969 	bl	800160a <LCD_Clear_Screen>
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINE);

	/*4_BIT_MODE_INIT*/
#elif LCD_MODE == LCD_4_BIT_MODE

	LCD_Send_Command(0x02);
 8001338:	2002      	movs	r0, #2
 800133a:	f000 f84f 	bl	80013dc <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINE);
 800133e:	2028      	movs	r0, #40	; 0x28
 8001340:	f000 f84c 	bl	80013dc <LCD_Send_Command>

#endif


	LCD_Send_Command(LCD_ENTRY_MODE);
 8001344:	2006      	movs	r0, #6
 8001346:	f000 f849 	bl	80013dc <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 800134a:	2080      	movs	r0, #128	; 0x80
 800134c:	f000 f846 	bl	80013dc <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 8001350:	200f      	movs	r0, #15
 8001352:	f000 f843 	bl	80013dc <LCD_Send_Command>

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000bc 	.word	0x200000bc
 8001360:	40010800 	.word	0x40010800
 8001364:	40010c00 	.word	0x40010c00

08001368 <LCD_Is_Busy>:
void LCD_Is_Busy(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	// set pin connected to D7 to receive data (Data direction as input).
	pincofg.GPIO_PinNumber = LCD_D7_PIN;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <LCD_Is_Busy+0x68>)
 800136e:	2207      	movs	r2, #7
 8001370:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <LCD_Is_Busy+0x68>)
 8001374:	2201      	movs	r2, #1
 8001376:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 8001378:	4915      	ldr	r1, [pc, #84]	; (80013d0 <LCD_Is_Busy+0x68>)
 800137a:	4816      	ldr	r0, [pc, #88]	; (80013d4 <LCD_Is_Busy+0x6c>)
 800137c:	f000 fb33 	bl	80019e6 <MCAL_GPIO_Init>

	// put the LCD in read mode (RW =1 on)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2101      	movs	r1, #1
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <LCD_Is_Busy+0x70>)
 8001386:	f000 fbca 	bl	8001b1e <MCAL_GPIO_WritePin>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <LCD_Is_Busy+0x70>)
 8001390:	f000 fbc5 	bl	8001b1e <MCAL_GPIO_WritePin>

	while (((MCAL_GPIO_ReadPin(LCD_DATA_PORT, LCD_D7_PIN))&1));
 8001394:	bf00      	nop
 8001396:	2107      	movs	r1, #7
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <LCD_Is_Busy+0x6c>)
 800139a:	f000 fba6 	bl	8001aea <MCAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f6      	bne.n	8001396 <LCD_Is_Busy+0x2e>

	// set  D7 to receive data (Data direction as output).
	pincofg.GPIO_PinNumber = LCD_D7_PIN;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <LCD_Is_Busy+0x68>)
 80013aa:	2207      	movs	r2, #7
 80013ac:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LCD_Is_Busy+0x68>)
 80013b0:	2204      	movs	r2, #4
 80013b2:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <LCD_Is_Busy+0x68>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pincofg);
 80013ba:	4905      	ldr	r1, [pc, #20]	; (80013d0 <LCD_Is_Busy+0x68>)
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <LCD_Is_Busy+0x6c>)
 80013be:	f000 fb12 	bl	80019e6 <MCAL_GPIO_Init>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	4804      	ldr	r0, [pc, #16]	; (80013d8 <LCD_Is_Busy+0x70>)
 80013c8:	f000 fba9 	bl	8001b1e <MCAL_GPIO_WritePin>

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000bc 	.word	0x200000bc
 80013d4:	40010800 	.word	0x40010800
 80013d8:	40010c00 	.word	0x40010c00

080013dc <LCD_Send_Command>:
void LCD_Send_Command(uint8 command)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	// Check if LCD is busy
	LCD_Is_Busy();
 80013e6:	f7ff ffbf 	bl	8001368 <LCD_Is_Busy>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	4834      	ldr	r0, [pc, #208]	; (80014c0 <LCD_Send_Command+0xe4>)
 80013f0:	f000 fb95 	bl	8001b1e <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW off)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2101      	movs	r1, #1
 80013f8:	4831      	ldr	r0, [pc, #196]	; (80014c0 <LCD_Send_Command+0xe4>)
 80013fa:	f000 fb90 	bl	8001b1e <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of command on Data Pins
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, ((command >>LCD_D4_PIN) & 1));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	2104      	movs	r1, #4
 800140e:	482d      	ldr	r0, [pc, #180]	; (80014c4 <LCD_Send_Command+0xe8>)
 8001410:	f000 fb85 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, ((command >>LCD_D5_PIN) & 1));
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	2105      	movs	r1, #5
 8001424:	4827      	ldr	r0, [pc, #156]	; (80014c4 <LCD_Send_Command+0xe8>)
 8001426:	f000 fb7a 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, ((command >>LCD_D6_PIN) & 1));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	2106      	movs	r1, #6
 800143a:	4822      	ldr	r0, [pc, #136]	; (80014c4 <LCD_Send_Command+0xe8>)
 800143c:	f000 fb6f 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, ((command >>LCD_D7_PIN) & 1));
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	09db      	lsrs	r3, r3, #7
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	2107      	movs	r1, #7
 800144a:	481e      	ldr	r0, [pc, #120]	; (80014c4 <LCD_Send_Command+0xe8>)
 800144c:	f000 fb67 	bl	8001b1e <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();
 8001450:	f7ff feb6 	bl	80011c0 <LCD_EN_Pluse>

	// Write The Least 4 bits Of command on Data Pins
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, (((command<<4) >>LCD_D4_PIN) & 1));
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	111b      	asrs	r3, r3, #4
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	2104      	movs	r1, #4
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <LCD_Send_Command+0xe8>)
 8001468:	f000 fb59 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, (((command<<4) >>LCD_D5_PIN) & 1));
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	115b      	asrs	r3, r3, #5
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	2105      	movs	r1, #5
 800147e:	4811      	ldr	r0, [pc, #68]	; (80014c4 <LCD_Send_Command+0xe8>)
 8001480:	f000 fb4d 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, (((command<<4) >>LCD_D6_PIN) & 1));
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	119b      	asrs	r3, r3, #6
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	2106      	movs	r1, #6
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <LCD_Send_Command+0xe8>)
 8001498:	f000 fb41 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, (((command<<4) >>LCD_D7_PIN) & 1));
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	11db      	asrs	r3, r3, #7
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	2107      	movs	r1, #7
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <LCD_Send_Command+0xe8>)
 80014b0:	f000 fb35 	bl	8001b1e <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();
 80014b4:	f7ff fe84 	bl	80011c0 <LCD_EN_Pluse>

#endif


}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	40010800 	.word	0x40010800

080014c8 <LCD_Send_Character>:
void LCD_Send_Character(uint8 character)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	//put the LCD in Data mode (RS=1 on)
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2100      	movs	r1, #0
 80014d6:	4834      	ldr	r0, [pc, #208]	; (80015a8 <LCD_Send_Character+0xe0>)
 80014d8:	f000 fb21 	bl	8001b1e <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2101      	movs	r1, #1
 80014e0:	4831      	ldr	r0, [pc, #196]	; (80015a8 <LCD_Send_Character+0xe0>)
 80014e2:	f000 fb1c 	bl	8001b1e <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of data on Data Pins
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, ((character >>LCD_D4_PIN) & 1));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	2104      	movs	r1, #4
 80014f6:	482d      	ldr	r0, [pc, #180]	; (80015ac <LCD_Send_Character+0xe4>)
 80014f8:	f000 fb11 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, ((character >>LCD_D5_PIN) & 1));
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	2105      	movs	r1, #5
 800150c:	4827      	ldr	r0, [pc, #156]	; (80015ac <LCD_Send_Character+0xe4>)
 800150e:	f000 fb06 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, ((character >>LCD_D6_PIN) & 1));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	2106      	movs	r1, #6
 8001522:	4822      	ldr	r0, [pc, #136]	; (80015ac <LCD_Send_Character+0xe4>)
 8001524:	f000 fafb 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, ((character >>LCD_D7_PIN) & 1));
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	09db      	lsrs	r3, r3, #7
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	2107      	movs	r1, #7
 8001532:	481e      	ldr	r0, [pc, #120]	; (80015ac <LCD_Send_Character+0xe4>)
 8001534:	f000 faf3 	bl	8001b1e <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();
 8001538:	f7ff fe42 	bl	80011c0 <LCD_EN_Pluse>

	// Write The Least 4 bits Of data on Data Pins
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, (((character<<4) >>LCD_D4_PIN) & 1));
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	111b      	asrs	r3, r3, #4
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	2104      	movs	r1, #4
 800154e:	4817      	ldr	r0, [pc, #92]	; (80015ac <LCD_Send_Character+0xe4>)
 8001550:	f000 fae5 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, (((character<<4) >>LCD_D5_PIN) & 1));
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	115b      	asrs	r3, r3, #5
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	2105      	movs	r1, #5
 8001566:	4811      	ldr	r0, [pc, #68]	; (80015ac <LCD_Send_Character+0xe4>)
 8001568:	f000 fad9 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, (((character<<4) >>LCD_D6_PIN) & 1));
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	119b      	asrs	r3, r3, #6
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	2106      	movs	r1, #6
 800157e:	480b      	ldr	r0, [pc, #44]	; (80015ac <LCD_Send_Character+0xe4>)
 8001580:	f000 facd 	bl	8001b1e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, (((character<<4) >>LCD_D7_PIN) & 1));
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	11db      	asrs	r3, r3, #7
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	2107      	movs	r1, #7
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <LCD_Send_Character+0xe4>)
 8001598:	f000 fac1 	bl	8001b1e <MCAL_GPIO_WritePin>
	LCD_EN_Pluse();
 800159c:	f7ff fe10 	bl	80011c0 <LCD_EN_Pluse>

#endif

}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010c00 	.word	0x40010c00
 80015ac:	40010800 	.word	0x40010800

080015b0 <LCD_Send_string>:
void LCD_Send_string(uint8* string)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	uint8 counter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
	while( *string !='\0')
 80015bc:	e01d      	b.n	80015fa <LCD_Send_string+0x4a>
	{
		counter++;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3301      	adds	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
		LCD_Send_Character(*string);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff7d 	bl	80014c8 <LCD_Send_Character>
		string++;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3301      	adds	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]

		if(counter == 16)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	d104      	bne.n	80015e4 <LCD_Send_string+0x34>
		{
			LCD_SET_Cursor(2, 0);
 80015da:	2100      	movs	r1, #0
 80015dc:	2002      	movs	r0, #2
 80015de:	f000 f81b 	bl	8001618 <LCD_SET_Cursor>
 80015e2:	e00a      	b.n	80015fa <LCD_Send_string+0x4a>
		}
		else if(counter == 32)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	d107      	bne.n	80015fa <LCD_Send_string+0x4a>
		{
			LCD_Clear_Screen();
 80015ea:	f000 f80e 	bl	800160a <LCD_Clear_Screen>
			LCD_SET_Cursor(1, 0);
 80015ee:	2100      	movs	r1, #0
 80015f0:	2001      	movs	r0, #1
 80015f2:	f000 f811 	bl	8001618 <LCD_SET_Cursor>
			counter =0 ;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
	while( *string !='\0')
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1dd      	bne.n	80015be <LCD_Send_string+0xe>
		}
	}
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <LCD_Clear_Screen>:
void LCD_Clear_Screen(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fee4 	bl	80013dc <LCD_Send_Command>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <LCD_SET_Cursor>:
void LCD_SET_Cursor(uint8 line , uint8 position )
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d109      	bne.n	8001642 <LCD_SET_Cursor+0x2a>
	{
		if(position<16)
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d812      	bhi.n	800165a <LCD_SET_Cursor+0x42>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW + position);
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	3b80      	subs	r3, #128	; 0x80
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fece 	bl	80013dc <LCD_Send_Command>
	else if (line == 2)
	{
		if(position<16)
		LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW + position);
	}
}
 8001640:	e00b      	b.n	800165a <LCD_SET_Cursor+0x42>
	else if (line == 2)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d108      	bne.n	800165a <LCD_SET_Cursor+0x42>
		if(position<16)
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	2b0f      	cmp	r3, #15
 800164c:	d805      	bhi.n	800165a <LCD_SET_Cursor+0x42>
		LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW + position);
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	3b40      	subs	r3, #64	; 0x40
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fec1 	bl	80013dc <LCD_Send_Command>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <LCD_Display_Real_Number>:
	uint8 str[7];
	sprintf(str,"%d",number);
	LCD_Send_string(str);
}
void LCD_Display_Real_Number(double number)
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b08c      	sub	sp, #48	; 0x30
 8001668:	af02      	add	r7, sp, #8
 800166a:	e9c7 0100 	strd	r0, r1, [r7]
	uint8 str[16];

	uint8 sign = (number<0)? "-":"";
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167a:	f7ff f9a7 	bl	80009cc <__aeabi_dcmplt>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <LCD_Display_Real_Number+0x26>
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <LCD_Display_Real_Number+0xb4>)
 8001686:	b2db      	uxtb	r3, r3
 8001688:	e001      	b.n	800168e <LCD_Display_Real_Number+0x2a>
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <LCD_Display_Real_Number+0xb8>)
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float Temp = (number<0)? -number:number;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169e:	f7ff f995 	bl	80009cc <__aeabi_dcmplt>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <LCD_Display_Real_Number+0x4e>
 80016a8:	683c      	ldr	r4, [r7, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016b0:	e001      	b.n	80016b6 <LCD_Display_Real_Number+0x52>
 80016b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7ff f9af 	bl	8000a1c <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	623b      	str	r3, [r7, #32]

	uint32 temp1 = Temp;
 80016c2:	6a38      	ldr	r0, [r7, #32]
 80016c4:	f7ff fc58 	bl	8000f78 <__aeabi_f2uiz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	61fb      	str	r3, [r7, #28]
	uint32 temp2 = (Temp - temp1) *10000 ;
 80016cc:	69f8      	ldr	r0, [r7, #28]
 80016ce:	f7ff faab 	bl	8000c28 <__aeabi_ui2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4619      	mov	r1, r3
 80016d6:	6a38      	ldr	r0, [r7, #32]
 80016d8:	f7ff f9f4 	bl	8000ac4 <__aeabi_fsub>
 80016dc:	4603      	mov	r3, r0
 80016de:	4910      	ldr	r1, [pc, #64]	; (8001720 <LCD_Display_Real_Number+0xbc>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff faf9 	bl	8000cd8 <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fc45 	bl	8000f78 <__aeabi_f2uiz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	61bb      	str	r3, [r7, #24]
	sprintf(str,"%s%d.%04d",sign , temp1, temp2);
 80016f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016f6:	f107 0008 	add.w	r0, r7, #8
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	4908      	ldr	r1, [pc, #32]	; (8001724 <LCD_Display_Real_Number+0xc0>)
 8001702:	f000 fa5b 	bl	8001bbc <siprintf>
	LCD_Send_string(str);
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff50 	bl	80015b0 <LCD_Send_string>
}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bdb0      	pop	{r4, r5, r7, pc}
 8001718:	080023fc 	.word	0x080023fc
 800171c:	08002400 	.word	0x08002400
 8001720:	461c4000 	.word	0x461c4000
 8001724:	08002404 	.word	0x08002404

08001728 <clock_init>:
#include "LCD_Config.h"
#include "LCD_interface.h"


void clock_init()
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	// Enable IO port A clock
	RCC_GPIOA_CLK_EN();
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <clock_init+0x24>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <clock_init+0x24>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6193      	str	r3, [r2, #24]
	// Enable IO Port B clock
	RCC_GPIOB_CLK_EN();
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <clock_init+0x24>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <clock_init+0x24>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6193      	str	r3, [r2, #24]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000

08001750 <main>:

/*Calculator APIS */
void DO_Operation(uint8 opp);

int main()
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	clock_init();
 8001756:	f7ff ffe7 	bl	8001728 <clock_init>
	LCD_init();
 800175a:	f7ff fd45 	bl	80011e8 <LCD_init>
	KEYPAD_init();
 800175e:	f7ff fc2b 	bl	8000fb8 <KEYPAD_init>
	uint8 pressed_key ;

	while(1)
	{
		pressed_key=KEYPAD_GetKey();
 8001762:	f7ff fcb5 	bl	80010d0 <KEYPAD_GetKey>
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
		if (pressed_key != 0)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f8      	beq.n	8001762 <main+0x12>
		{
			LCD_Send_Character(pressed_key);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fea8 	bl	80014c8 <LCD_Send_Character>
			if(pressed_key == '/' || pressed_key == '*' || pressed_key == '-' || pressed_key == '+')
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b2f      	cmp	r3, #47	; 0x2f
 800177c:	d008      	beq.n	8001790 <main+0x40>
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b2a      	cmp	r3, #42	; 0x2a
 8001782:	d005      	beq.n	8001790 <main+0x40>
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b2d      	cmp	r3, #45	; 0x2d
 8001788:	d002      	beq.n	8001790 <main+0x40>
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b2b      	cmp	r3, #43	; 0x2b
 800178e:	d120      	bne.n	80017d2 <main+0x82>
			{
				if (operation == 0 )
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <main+0xf8>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d110      	bne.n	80017ba <main+0x6a>
				{
				result = number ;
 8001798:	4b2c      	ldr	r3, [pc, #176]	; (800184c <main+0xfc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fe29 	bl	80003f4 <__aeabi_ui2d>
 80017a2:	4603      	mov	r3, r0
 80017a4:	460c      	mov	r4, r1
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <main+0x100>)
 80017a8:	e9c2 3400 	strd	r3, r4, [r2]
				operation = pressed_key ;
 80017ac:	4a26      	ldr	r2, [pc, #152]	; (8001848 <main+0xf8>)
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	7013      	strb	r3, [r2, #0]
				number =0 ;
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <main+0xfc>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
				if (operation == 0 )
 80017b8:	e045      	b.n	8001846 <main+0xf6>
				}
				else
				{
					DO_Operation(operation);
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <main+0xf8>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f848 	bl	8001854 <DO_Operation>
					operation = pressed_key ;
 80017c4:	4a20      	ldr	r2, [pc, #128]	; (8001848 <main+0xf8>)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	7013      	strb	r3, [r2, #0]
					number = 0;
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <main+0xfc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
				if (operation == 0 )
 80017d0:	e039      	b.n	8001846 <main+0xf6>
				}
			}
			else if (pressed_key == '=')
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b3d      	cmp	r3, #61	; 0x3d
 80017d6:	d11a      	bne.n	800180e <main+0xbe>
			{
				DO_Operation(operation);
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <main+0xf8>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f839 	bl	8001854 <DO_Operation>
				LCD_Clear_Screen();
 80017e2:	f7ff ff12 	bl	800160a <LCD_Clear_Screen>
				LCD_Display_Real_Number(result);
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <main+0x100>)
 80017e8:	cb18      	ldmia	r3, {r3, r4}
 80017ea:	4618      	mov	r0, r3
 80017ec:	4621      	mov	r1, r4
 80017ee:	f7ff ff39 	bl	8001664 <LCD_Display_Real_Number>
				result =0 ;
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <main+0x100>)
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	f04f 0400 	mov.w	r4, #0
 80017fc:	e9c2 3400 	strd	r3, r4, [r2]
				number =0 ;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <main+0xfc>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
				operation =0 ;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <main+0xf8>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e7a9      	b.n	8001762 <main+0x12>
			}
			else if(pressed_key == 'C')
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b43      	cmp	r3, #67	; 0x43
 8001812:	d10c      	bne.n	800182e <main+0xde>
			{
				result =0 ;
 8001814:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <main+0x100>)
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	f04f 0400 	mov.w	r4, #0
 800181e:	e9c2 3400 	strd	r3, r4, [r2]
				number =0 ;
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <main+0xfc>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
				LCD_Clear_Screen();
 8001828:	f7ff feef 	bl	800160a <LCD_Clear_Screen>
 800182c:	e799      	b.n	8001762 <main+0x12>
			}
			else
			{
				number = (number*10)+ (pressed_key - '0');
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <main+0xfc>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	461a      	mov	r2, r3
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4413      	add	r3, r2
 8001840:	3b30      	subs	r3, #48	; 0x30
 8001842:	4a02      	ldr	r2, [pc, #8]	; (800184c <main+0xfc>)
 8001844:	6013      	str	r3, [r2, #0]
		pressed_key=KEYPAD_GetKey();
 8001846:	e78c      	b.n	8001762 <main+0x12>
 8001848:	200000a8 	.word	0x200000a8
 800184c:	2000009c 	.word	0x2000009c
 8001850:	200000a0 	.word	0x200000a0

08001854 <DO_Operation>:


	}
}
void DO_Operation(uint8 opp)
{
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	switch(opp)
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	3b2a      	subs	r3, #42	; 0x2a
 8001862:	2b05      	cmp	r3, #5
 8001864:	d858      	bhi.n	8001918 <DO_Operation+0xc4>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <DO_Operation+0x18>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	080018ad 	.word	0x080018ad
 8001870:	080018f7 	.word	0x080018f7
 8001874:	08001919 	.word	0x08001919
 8001878:	080018cf 	.word	0x080018cf
 800187c:	08001919 	.word	0x08001919
 8001880:	08001885 	.word	0x08001885
	{
	case '/' :
		result /= number ;
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <DO_Operation+0xcc>)
 8001886:	e9d3 4500 	ldrd	r4, r5, [r3]
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <DO_Operation+0xd0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdb0 	bl	80003f4 <__aeabi_ui2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe ff4e 	bl	800073c <__aeabi_ddiv>
 80018a0:	4603      	mov	r3, r0
 80018a2:	460c      	mov	r4, r1
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <DO_Operation+0xcc>)
 80018a6:	e9c2 3400 	strd	r3, r4, [r2]
		break ;
 80018aa:	e035      	b.n	8001918 <DO_Operation+0xc4>
	case '*':
		result *= number ;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <DO_Operation+0xd0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fd9f 	bl	80003f4 <__aeabi_ui2d>
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <DO_Operation+0xcc>)
 80018b8:	cb18      	ldmia	r3, {r3, r4}
 80018ba:	461a      	mov	r2, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	f7fe fe13 	bl	80004e8 <__aeabi_dmul>
 80018c2:	4603      	mov	r3, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <DO_Operation+0xcc>)
 80018c8:	e9c2 3400 	strd	r3, r4, [r2]
		break;
 80018cc:	e024      	b.n	8001918 <DO_Operation+0xc4>
	case '-' :
		result -= number ;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <DO_Operation+0xcc>)
 80018d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <DO_Operation+0xd0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fd8b 	bl	80003f4 <__aeabi_ui2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fc47 	bl	8000178 <__aeabi_dsub>
 80018ea:	4603      	mov	r3, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <DO_Operation+0xcc>)
 80018f0:	e9c2 3400 	strd	r3, r4, [r2]
		break ;
 80018f4:	e010      	b.n	8001918 <DO_Operation+0xc4>
	case '+' :
		result += number ;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <DO_Operation+0xd0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fd7a 	bl	80003f4 <__aeabi_ui2d>
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <DO_Operation+0xcc>)
 8001902:	cb18      	ldmia	r3, {r3, r4}
 8001904:	461a      	mov	r2, r3
 8001906:	4623      	mov	r3, r4
 8001908:	f7fe fc38 	bl	800017c <__adddf3>
 800190c:	4603      	mov	r3, r0
 800190e:	460c      	mov	r4, r1
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <DO_Operation+0xcc>)
 8001912:	e9c2 3400 	strd	r3, r4, [r2]
		break;
 8001916:	bf00      	nop
	}

}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bdb0      	pop	{r4, r5, r7, pc}
 8001920:	200000a0 	.word	0x200000a0
 8001924:	2000009c 	.word	0x2000009c

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f000 f906 	bl	8001b68 <__errno>
 800195c:	4602      	mov	r2, r0
 800195e:	230c      	movs	r3, #12
 8001960:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20002800 	.word	0x20002800
 8001988:	00000400 	.word	0x00000400
 800198c:	200000ac 	.word	0x200000ac
 8001990:	200000c8 	.word	0x200000c8

08001994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001996:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001998:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	; (80019d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <LoopForever+0xe>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	; (80019e0 <LoopForever+0x16>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019c2:	f000 f8d7 	bl	8001b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019c6:	f7ff fec3 	bl	8001750 <main>

080019ca <LoopForever>:

LoopForever:
    b LoopForever
 80019ca:	e7fe      	b.n	80019ca <LoopForever>
  ldr   r0, =_estack
 80019cc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019d8:	0800244c 	.word	0x0800244c
  ldr r2, =_sbss
 80019dc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80019e0:	200000c4 	.word	0x200000c4

080019e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC1_2_IRQHandler>

080019e6 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX ,  GPIO_PinConfig_t *PinConfig)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b087      	sub	sp, #28
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32* configregister ;
	uint8 PIN_Config = 0 ;
 80019f0:	2300      	movs	r3, #0
 80019f2:	75fb      	strb	r3, [r7, #23]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d801      	bhi.n	8001a00 <MCAL_GPIO_Init+0x1a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	e001      	b.n	8001a04 <MCAL_GPIO_Init+0x1e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	613b      	str	r3, [r7, #16]

	//Get the position of configuration pins in CRL or CRH
	// CRL (position = pin number * 4)
	// CRH (position = (pinNumber-8)*4)
	uint8 CRLH_Position;
	CRLH_Position = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? (PinConfig->GPIO_PinNumber * 4): ((PinConfig->GPIO_PinNumber -8) * 4) ;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	d804      	bhi.n	8001a18 <MCAL_GPIO_Init+0x32>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	e005      	b.n	8001a24 <MCAL_GPIO_Init+0x3e>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	3338      	adds	r3, #56	; 0x38
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	73fb      	strb	r3, [r7, #15]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << CRLH_Position);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	43d2      	mvns	r2, r2
 8001a34:	401a      	ands	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_Mode > GPIO_MODE_INPUT_PD) && (PinConfig->GPIO_Mode != GPIO_MODE_AF_INPUT))
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d912      	bls.n	8001a68 <MCAL_GPIO_Init+0x82>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d00e      	beq.n	8001a68 <MCAL_GPIO_Init+0x82>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4)<<2)|(PinConfig->GPIO_Output_Speed)) & 0x0f);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	785b      	ldrb	r3, [r3, #1]
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	b25a      	sxtb	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	789b      	ldrb	r3, [r3, #2]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	75fb      	strb	r3, [r7, #23]
 8001a66:	e032      	b.n	8001ace <MCAL_GPIO_Init+0xe8>
	}
	//else the pin is input
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_Analog)||(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	785b      	ldrb	r3, [r3, #1]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <MCAL_GPIO_Init+0x92>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <MCAL_GPIO_Init+0xa2>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((PinConfig->GPIO_Mode)<<2)|0x0) & 0x0f);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	75fb      	strb	r3, [r7, #23]
 8001a86:	e022      	b.n	8001ace <MCAL_GPIO_Init+0xe8>
		}
		else if ((PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d102      	bne.n	8001a96 <MCAL_GPIO_Init+0xb0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_FLO)<<2)|0x0) & 0x0f);
 8001a90:	2304      	movs	r3, #4
 8001a92:	75fb      	strb	r3, [r7, #23]
 8001a94:	e01b      	b.n	8001ace <MCAL_GPIO_Init+0xe8>
		}
		else //PU PD Input
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_PU)<<2)|0x0) & 0x0f);
 8001a96:	2308      	movs	r3, #8
 8001a98:	75fb      	strb	r3, [r7, #23]

			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d10a      	bne.n	8001ab8 <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOX->ODR |= (1<<PinConfig->GPIO_PinNumber);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	2201      	movs	r2, #1
 8001aae:	408a      	lsls	r2, r1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	e00a      	b.n	8001ace <MCAL_GPIO_Init+0xe8>
			}
			else
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOX->ODR &= ~(1<<PinConfig->GPIO_PinNumber);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	408a      	lsls	r2, r1
 8001ac6:	43d2      	mvns	r2, r2
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << CRLH_Position);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	7df9      	ldrb	r1, [r7, #23]
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	431a      	orrs	r2, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	601a      	str	r2, [r3, #0]

}
 8001ae0:	bf00      	nop
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8 MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOX,uint8 PinNumber )
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
	uint8 bitstatus ;
	if(((GPIOX->IDR)&(1<<PinNumber))!= (uint32)GPIO_PIN_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f202 	lsl.w	r2, r1, r2
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <MCAL_GPIO_ReadPin+0x24>
	{
		bitstatus = GPIO_PIN_SET ;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e001      	b.n	8001b12 <MCAL_GPIO_ReadPin+0x28>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET ;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus ;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOX,uint8 PinNumber , uint8 Value)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	70fb      	strb	r3, [r7, #3]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	70bb      	strb	r3, [r7, #2]
	if(Value != GPIO_PIN_RESET)
 8001b2e:	78bb      	ldrb	r3, [r7, #2]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <MCAL_GPIO_WritePin+0x2a>
	{
		GPIOX->ODR |= (1<<PinNumber);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOX->ODR &= ~(1<<PinNumber);
	}

}
 8001b46:	e009      	b.n	8001b5c <MCAL_GPIO_WritePin+0x3e>
		GPIOX->ODR &= ~(1<<PinNumber);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	2101      	movs	r1, #1
 8001b50:	fa01 f202 	lsl.w	r2, r1, r2
 8001b54:	43d2      	mvns	r2, r2
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60da      	str	r2, [r3, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
	...

08001b68 <__errno>:
 8001b68:	4b01      	ldr	r3, [pc, #4]	; (8001b70 <__errno+0x8>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000018 	.word	0x20000018

08001b74 <__libc_init_array>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	2500      	movs	r5, #0
 8001b78:	4e0c      	ldr	r6, [pc, #48]	; (8001bac <__libc_init_array+0x38>)
 8001b7a:	4c0d      	ldr	r4, [pc, #52]	; (8001bb0 <__libc_init_array+0x3c>)
 8001b7c:	1ba4      	subs	r4, r4, r6
 8001b7e:	10a4      	asrs	r4, r4, #2
 8001b80:	42a5      	cmp	r5, r4
 8001b82:	d109      	bne.n	8001b98 <__libc_init_array+0x24>
 8001b84:	f000 fc2c 	bl	80023e0 <_init>
 8001b88:	2500      	movs	r5, #0
 8001b8a:	4e0a      	ldr	r6, [pc, #40]	; (8001bb4 <__libc_init_array+0x40>)
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <__libc_init_array+0x44>)
 8001b8e:	1ba4      	subs	r4, r4, r6
 8001b90:	10a4      	asrs	r4, r4, #2
 8001b92:	42a5      	cmp	r5, r4
 8001b94:	d105      	bne.n	8001ba2 <__libc_init_array+0x2e>
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b9c:	4798      	blx	r3
 8001b9e:	3501      	adds	r5, #1
 8001ba0:	e7ee      	b.n	8001b80 <__libc_init_array+0xc>
 8001ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba6:	4798      	blx	r3
 8001ba8:	3501      	adds	r5, #1
 8001baa:	e7f2      	b.n	8001b92 <__libc_init_array+0x1e>
 8001bac:	08002444 	.word	0x08002444
 8001bb0:	08002444 	.word	0x08002444
 8001bb4:	08002444 	.word	0x08002444
 8001bb8:	08002448 	.word	0x08002448

08001bbc <siprintf>:
 8001bbc:	b40e      	push	{r1, r2, r3}
 8001bbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001bc2:	b500      	push	{lr}
 8001bc4:	b09c      	sub	sp, #112	; 0x70
 8001bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8001bc8:	9002      	str	r0, [sp, #8]
 8001bca:	9006      	str	r0, [sp, #24]
 8001bcc:	9107      	str	r1, [sp, #28]
 8001bce:	9104      	str	r1, [sp, #16]
 8001bd0:	4808      	ldr	r0, [pc, #32]	; (8001bf4 <siprintf+0x38>)
 8001bd2:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <siprintf+0x3c>)
 8001bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bd8:	9105      	str	r1, [sp, #20]
 8001bda:	6800      	ldr	r0, [r0, #0]
 8001bdc:	a902      	add	r1, sp, #8
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	f000 f866 	bl	8001cb0 <_svfiprintf_r>
 8001be4:	2200      	movs	r2, #0
 8001be6:	9b02      	ldr	r3, [sp, #8]
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	b01c      	add	sp, #112	; 0x70
 8001bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bf0:	b003      	add	sp, #12
 8001bf2:	4770      	bx	lr
 8001bf4:	20000018 	.word	0x20000018
 8001bf8:	ffff0208 	.word	0xffff0208

08001bfc <__ssputs_r>:
 8001bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c00:	688e      	ldr	r6, [r1, #8]
 8001c02:	4682      	mov	sl, r0
 8001c04:	429e      	cmp	r6, r3
 8001c06:	460c      	mov	r4, r1
 8001c08:	4690      	mov	r8, r2
 8001c0a:	4699      	mov	r9, r3
 8001c0c:	d837      	bhi.n	8001c7e <__ssputs_r+0x82>
 8001c0e:	898a      	ldrh	r2, [r1, #12]
 8001c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c14:	d031      	beq.n	8001c7a <__ssputs_r+0x7e>
 8001c16:	2302      	movs	r3, #2
 8001c18:	6825      	ldr	r5, [r4, #0]
 8001c1a:	6909      	ldr	r1, [r1, #16]
 8001c1c:	1a6f      	subs	r7, r5, r1
 8001c1e:	6965      	ldr	r5, [r4, #20]
 8001c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c24:	fb95 f5f3 	sdiv	r5, r5, r3
 8001c28:	f109 0301 	add.w	r3, r9, #1
 8001c2c:	443b      	add	r3, r7
 8001c2e:	429d      	cmp	r5, r3
 8001c30:	bf38      	it	cc
 8001c32:	461d      	movcc	r5, r3
 8001c34:	0553      	lsls	r3, r2, #21
 8001c36:	d530      	bpl.n	8001c9a <__ssputs_r+0x9e>
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f000 fb37 	bl	80022ac <_malloc_r>
 8001c3e:	4606      	mov	r6, r0
 8001c40:	b950      	cbnz	r0, 8001c58 <__ssputs_r+0x5c>
 8001c42:	230c      	movs	r3, #12
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f8ca 3000 	str.w	r3, [sl]
 8001c4c:	89a3      	ldrh	r3, [r4, #12]
 8001c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c52:	81a3      	strh	r3, [r4, #12]
 8001c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c58:	463a      	mov	r2, r7
 8001c5a:	6921      	ldr	r1, [r4, #16]
 8001c5c:	f000 fab6 	bl	80021cc <memcpy>
 8001c60:	89a3      	ldrh	r3, [r4, #12]
 8001c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6a:	81a3      	strh	r3, [r4, #12]
 8001c6c:	6126      	str	r6, [r4, #16]
 8001c6e:	443e      	add	r6, r7
 8001c70:	6026      	str	r6, [r4, #0]
 8001c72:	464e      	mov	r6, r9
 8001c74:	6165      	str	r5, [r4, #20]
 8001c76:	1bed      	subs	r5, r5, r7
 8001c78:	60a5      	str	r5, [r4, #8]
 8001c7a:	454e      	cmp	r6, r9
 8001c7c:	d900      	bls.n	8001c80 <__ssputs_r+0x84>
 8001c7e:	464e      	mov	r6, r9
 8001c80:	4632      	mov	r2, r6
 8001c82:	4641      	mov	r1, r8
 8001c84:	6820      	ldr	r0, [r4, #0]
 8001c86:	f000 faac 	bl	80021e2 <memmove>
 8001c8a:	68a3      	ldr	r3, [r4, #8]
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	1b9b      	subs	r3, r3, r6
 8001c90:	60a3      	str	r3, [r4, #8]
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	441e      	add	r6, r3
 8001c96:	6026      	str	r6, [r4, #0]
 8001c98:	e7dc      	b.n	8001c54 <__ssputs_r+0x58>
 8001c9a:	462a      	mov	r2, r5
 8001c9c:	f000 fb60 	bl	8002360 <_realloc_r>
 8001ca0:	4606      	mov	r6, r0
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d1e2      	bne.n	8001c6c <__ssputs_r+0x70>
 8001ca6:	6921      	ldr	r1, [r4, #16]
 8001ca8:	4650      	mov	r0, sl
 8001caa:	f000 fab3 	bl	8002214 <_free_r>
 8001cae:	e7c8      	b.n	8001c42 <__ssputs_r+0x46>

08001cb0 <_svfiprintf_r>:
 8001cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cb4:	461d      	mov	r5, r3
 8001cb6:	898b      	ldrh	r3, [r1, #12]
 8001cb8:	b09d      	sub	sp, #116	; 0x74
 8001cba:	061f      	lsls	r7, r3, #24
 8001cbc:	4680      	mov	r8, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4616      	mov	r6, r2
 8001cc2:	d50f      	bpl.n	8001ce4 <_svfiprintf_r+0x34>
 8001cc4:	690b      	ldr	r3, [r1, #16]
 8001cc6:	b96b      	cbnz	r3, 8001ce4 <_svfiprintf_r+0x34>
 8001cc8:	2140      	movs	r1, #64	; 0x40
 8001cca:	f000 faef 	bl	80022ac <_malloc_r>
 8001cce:	6020      	str	r0, [r4, #0]
 8001cd0:	6120      	str	r0, [r4, #16]
 8001cd2:	b928      	cbnz	r0, 8001ce0 <_svfiprintf_r+0x30>
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	f8c8 3000 	str.w	r3, [r8]
 8001cda:	f04f 30ff 	mov.w	r0, #4294967295
 8001cde:	e0c8      	b.n	8001e72 <_svfiprintf_r+0x1c2>
 8001ce0:	2340      	movs	r3, #64	; 0x40
 8001ce2:	6163      	str	r3, [r4, #20]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ce8:	2320      	movs	r3, #32
 8001cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cee:	2330      	movs	r3, #48	; 0x30
 8001cf0:	f04f 0b01 	mov.w	fp, #1
 8001cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cf8:	9503      	str	r5, [sp, #12]
 8001cfa:	4637      	mov	r7, r6
 8001cfc:	463d      	mov	r5, r7
 8001cfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001d02:	b10b      	cbz	r3, 8001d08 <_svfiprintf_r+0x58>
 8001d04:	2b25      	cmp	r3, #37	; 0x25
 8001d06:	d13e      	bne.n	8001d86 <_svfiprintf_r+0xd6>
 8001d08:	ebb7 0a06 	subs.w	sl, r7, r6
 8001d0c:	d00b      	beq.n	8001d26 <_svfiprintf_r+0x76>
 8001d0e:	4653      	mov	r3, sl
 8001d10:	4632      	mov	r2, r6
 8001d12:	4621      	mov	r1, r4
 8001d14:	4640      	mov	r0, r8
 8001d16:	f7ff ff71 	bl	8001bfc <__ssputs_r>
 8001d1a:	3001      	adds	r0, #1
 8001d1c:	f000 80a4 	beq.w	8001e68 <_svfiprintf_r+0x1b8>
 8001d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d22:	4453      	add	r3, sl
 8001d24:	9309      	str	r3, [sp, #36]	; 0x24
 8001d26:	783b      	ldrb	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 809d 	beq.w	8001e68 <_svfiprintf_r+0x1b8>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d38:	9304      	str	r3, [sp, #16]
 8001d3a:	9307      	str	r3, [sp, #28]
 8001d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d40:	931a      	str	r3, [sp, #104]	; 0x68
 8001d42:	462f      	mov	r7, r5
 8001d44:	2205      	movs	r2, #5
 8001d46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001d4a:	4850      	ldr	r0, [pc, #320]	; (8001e8c <_svfiprintf_r+0x1dc>)
 8001d4c:	f000 fa30 	bl	80021b0 <memchr>
 8001d50:	9b04      	ldr	r3, [sp, #16]
 8001d52:	b9d0      	cbnz	r0, 8001d8a <_svfiprintf_r+0xda>
 8001d54:	06d9      	lsls	r1, r3, #27
 8001d56:	bf44      	itt	mi
 8001d58:	2220      	movmi	r2, #32
 8001d5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d5e:	071a      	lsls	r2, r3, #28
 8001d60:	bf44      	itt	mi
 8001d62:	222b      	movmi	r2, #43	; 0x2b
 8001d64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d68:	782a      	ldrb	r2, [r5, #0]
 8001d6a:	2a2a      	cmp	r2, #42	; 0x2a
 8001d6c:	d015      	beq.n	8001d9a <_svfiprintf_r+0xea>
 8001d6e:	462f      	mov	r7, r5
 8001d70:	2000      	movs	r0, #0
 8001d72:	250a      	movs	r5, #10
 8001d74:	9a07      	ldr	r2, [sp, #28]
 8001d76:	4639      	mov	r1, r7
 8001d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d7c:	3b30      	subs	r3, #48	; 0x30
 8001d7e:	2b09      	cmp	r3, #9
 8001d80:	d94d      	bls.n	8001e1e <_svfiprintf_r+0x16e>
 8001d82:	b1b8      	cbz	r0, 8001db4 <_svfiprintf_r+0x104>
 8001d84:	e00f      	b.n	8001da6 <_svfiprintf_r+0xf6>
 8001d86:	462f      	mov	r7, r5
 8001d88:	e7b8      	b.n	8001cfc <_svfiprintf_r+0x4c>
 8001d8a:	4a40      	ldr	r2, [pc, #256]	; (8001e8c <_svfiprintf_r+0x1dc>)
 8001d8c:	463d      	mov	r5, r7
 8001d8e:	1a80      	subs	r0, r0, r2
 8001d90:	fa0b f000 	lsl.w	r0, fp, r0
 8001d94:	4318      	orrs	r0, r3
 8001d96:	9004      	str	r0, [sp, #16]
 8001d98:	e7d3      	b.n	8001d42 <_svfiprintf_r+0x92>
 8001d9a:	9a03      	ldr	r2, [sp, #12]
 8001d9c:	1d11      	adds	r1, r2, #4
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	9103      	str	r1, [sp, #12]
 8001da2:	2a00      	cmp	r2, #0
 8001da4:	db01      	blt.n	8001daa <_svfiprintf_r+0xfa>
 8001da6:	9207      	str	r2, [sp, #28]
 8001da8:	e004      	b.n	8001db4 <_svfiprintf_r+0x104>
 8001daa:	4252      	negs	r2, r2
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	9207      	str	r2, [sp, #28]
 8001db2:	9304      	str	r3, [sp, #16]
 8001db4:	783b      	ldrb	r3, [r7, #0]
 8001db6:	2b2e      	cmp	r3, #46	; 0x2e
 8001db8:	d10c      	bne.n	8001dd4 <_svfiprintf_r+0x124>
 8001dba:	787b      	ldrb	r3, [r7, #1]
 8001dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8001dbe:	d133      	bne.n	8001e28 <_svfiprintf_r+0x178>
 8001dc0:	9b03      	ldr	r3, [sp, #12]
 8001dc2:	3702      	adds	r7, #2
 8001dc4:	1d1a      	adds	r2, r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	9203      	str	r2, [sp, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bfb8      	it	lt
 8001dce:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dd2:	9305      	str	r3, [sp, #20]
 8001dd4:	4d2e      	ldr	r5, [pc, #184]	; (8001e90 <_svfiprintf_r+0x1e0>)
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	7839      	ldrb	r1, [r7, #0]
 8001dda:	4628      	mov	r0, r5
 8001ddc:	f000 f9e8 	bl	80021b0 <memchr>
 8001de0:	b138      	cbz	r0, 8001df2 <_svfiprintf_r+0x142>
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	1b40      	subs	r0, r0, r5
 8001de6:	fa03 f000 	lsl.w	r0, r3, r0
 8001dea:	9b04      	ldr	r3, [sp, #16]
 8001dec:	3701      	adds	r7, #1
 8001dee:	4303      	orrs	r3, r0
 8001df0:	9304      	str	r3, [sp, #16]
 8001df2:	7839      	ldrb	r1, [r7, #0]
 8001df4:	2206      	movs	r2, #6
 8001df6:	4827      	ldr	r0, [pc, #156]	; (8001e94 <_svfiprintf_r+0x1e4>)
 8001df8:	1c7e      	adds	r6, r7, #1
 8001dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dfe:	f000 f9d7 	bl	80021b0 <memchr>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d038      	beq.n	8001e78 <_svfiprintf_r+0x1c8>
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <_svfiprintf_r+0x1e8>)
 8001e08:	bb13      	cbnz	r3, 8001e50 <_svfiprintf_r+0x1a0>
 8001e0a:	9b03      	ldr	r3, [sp, #12]
 8001e0c:	3307      	adds	r3, #7
 8001e0e:	f023 0307 	bic.w	r3, r3, #7
 8001e12:	3308      	adds	r3, #8
 8001e14:	9303      	str	r3, [sp, #12]
 8001e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e18:	444b      	add	r3, r9
 8001e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e1c:	e76d      	b.n	8001cfa <_svfiprintf_r+0x4a>
 8001e1e:	fb05 3202 	mla	r2, r5, r2, r3
 8001e22:	2001      	movs	r0, #1
 8001e24:	460f      	mov	r7, r1
 8001e26:	e7a6      	b.n	8001d76 <_svfiprintf_r+0xc6>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	250a      	movs	r5, #10
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	3701      	adds	r7, #1
 8001e30:	9305      	str	r3, [sp, #20]
 8001e32:	4638      	mov	r0, r7
 8001e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e38:	3a30      	subs	r2, #48	; 0x30
 8001e3a:	2a09      	cmp	r2, #9
 8001e3c:	d903      	bls.n	8001e46 <_svfiprintf_r+0x196>
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0c8      	beq.n	8001dd4 <_svfiprintf_r+0x124>
 8001e42:	9105      	str	r1, [sp, #20]
 8001e44:	e7c6      	b.n	8001dd4 <_svfiprintf_r+0x124>
 8001e46:	fb05 2101 	mla	r1, r5, r1, r2
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	4607      	mov	r7, r0
 8001e4e:	e7f0      	b.n	8001e32 <_svfiprintf_r+0x182>
 8001e50:	ab03      	add	r3, sp, #12
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	4622      	mov	r2, r4
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_svfiprintf_r+0x1ec>)
 8001e58:	a904      	add	r1, sp, #16
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	f3af 8000 	nop.w
 8001e60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e64:	4681      	mov	r9, r0
 8001e66:	d1d6      	bne.n	8001e16 <_svfiprintf_r+0x166>
 8001e68:	89a3      	ldrh	r3, [r4, #12]
 8001e6a:	065b      	lsls	r3, r3, #25
 8001e6c:	f53f af35 	bmi.w	8001cda <_svfiprintf_r+0x2a>
 8001e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e72:	b01d      	add	sp, #116	; 0x74
 8001e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e78:	ab03      	add	r3, sp, #12
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	4622      	mov	r2, r4
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_svfiprintf_r+0x1ec>)
 8001e80:	a904      	add	r1, sp, #16
 8001e82:	4640      	mov	r0, r8
 8001e84:	f000 f882 	bl	8001f8c <_printf_i>
 8001e88:	e7ea      	b.n	8001e60 <_svfiprintf_r+0x1b0>
 8001e8a:	bf00      	nop
 8001e8c:	0800240e 	.word	0x0800240e
 8001e90:	08002414 	.word	0x08002414
 8001e94:	08002418 	.word	0x08002418
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	08001bfd 	.word	0x08001bfd

08001ea0 <_printf_common>:
 8001ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea4:	4691      	mov	r9, r2
 8001ea6:	461f      	mov	r7, r3
 8001ea8:	688a      	ldr	r2, [r1, #8]
 8001eaa:	690b      	ldr	r3, [r1, #16]
 8001eac:	4606      	mov	r6, r0
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	bfb8      	it	lt
 8001eb2:	4613      	movlt	r3, r2
 8001eb4:	f8c9 3000 	str.w	r3, [r9]
 8001eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ec2:	b112      	cbz	r2, 8001eca <_printf_common+0x2a>
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f8c9 3000 	str.w	r3, [r9]
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	0699      	lsls	r1, r3, #26
 8001ece:	bf42      	ittt	mi
 8001ed0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ed4:	3302      	addmi	r3, #2
 8001ed6:	f8c9 3000 	strmi.w	r3, [r9]
 8001eda:	6825      	ldr	r5, [r4, #0]
 8001edc:	f015 0506 	ands.w	r5, r5, #6
 8001ee0:	d107      	bne.n	8001ef2 <_printf_common+0x52>
 8001ee2:	f104 0a19 	add.w	sl, r4, #25
 8001ee6:	68e3      	ldr	r3, [r4, #12]
 8001ee8:	f8d9 2000 	ldr.w	r2, [r9]
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	42ab      	cmp	r3, r5
 8001ef0:	dc29      	bgt.n	8001f46 <_printf_common+0xa6>
 8001ef2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	3300      	adds	r3, #0
 8001efa:	bf18      	it	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	0692      	lsls	r2, r2, #26
 8001f00:	d42e      	bmi.n	8001f60 <_printf_common+0xc0>
 8001f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f06:	4639      	mov	r1, r7
 8001f08:	4630      	mov	r0, r6
 8001f0a:	47c0      	blx	r8
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d021      	beq.n	8001f54 <_printf_common+0xb4>
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	68e5      	ldr	r5, [r4, #12]
 8001f14:	f003 0306 	and.w	r3, r3, #6
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	bf18      	it	ne
 8001f1c:	2500      	movne	r5, #0
 8001f1e:	f8d9 2000 	ldr.w	r2, [r9]
 8001f22:	f04f 0900 	mov.w	r9, #0
 8001f26:	bf08      	it	eq
 8001f28:	1aad      	subeq	r5, r5, r2
 8001f2a:	68a3      	ldr	r3, [r4, #8]
 8001f2c:	6922      	ldr	r2, [r4, #16]
 8001f2e:	bf08      	it	eq
 8001f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bfc4      	itt	gt
 8001f38:	1a9b      	subgt	r3, r3, r2
 8001f3a:	18ed      	addgt	r5, r5, r3
 8001f3c:	341a      	adds	r4, #26
 8001f3e:	454d      	cmp	r5, r9
 8001f40:	d11a      	bne.n	8001f78 <_printf_common+0xd8>
 8001f42:	2000      	movs	r0, #0
 8001f44:	e008      	b.n	8001f58 <_printf_common+0xb8>
 8001f46:	2301      	movs	r3, #1
 8001f48:	4652      	mov	r2, sl
 8001f4a:	4639      	mov	r1, r7
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	47c0      	blx	r8
 8001f50:	3001      	adds	r0, #1
 8001f52:	d103      	bne.n	8001f5c <_printf_common+0xbc>
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5c:	3501      	adds	r5, #1
 8001f5e:	e7c2      	b.n	8001ee6 <_printf_common+0x46>
 8001f60:	2030      	movs	r0, #48	; 0x30
 8001f62:	18e1      	adds	r1, r4, r3
 8001f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f6e:	4422      	add	r2, r4
 8001f70:	3302      	adds	r3, #2
 8001f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f76:	e7c4      	b.n	8001f02 <_printf_common+0x62>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	4639      	mov	r1, r7
 8001f7e:	4630      	mov	r0, r6
 8001f80:	47c0      	blx	r8
 8001f82:	3001      	adds	r0, #1
 8001f84:	d0e6      	beq.n	8001f54 <_printf_common+0xb4>
 8001f86:	f109 0901 	add.w	r9, r9, #1
 8001f8a:	e7d8      	b.n	8001f3e <_printf_common+0x9e>

08001f8c <_printf_i>:
 8001f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f94:	460c      	mov	r4, r1
 8001f96:	7e09      	ldrb	r1, [r1, #24]
 8001f98:	b085      	sub	sp, #20
 8001f9a:	296e      	cmp	r1, #110	; 0x6e
 8001f9c:	4617      	mov	r7, r2
 8001f9e:	4606      	mov	r6, r0
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001fa4:	f000 80b3 	beq.w	800210e <_printf_i+0x182>
 8001fa8:	d822      	bhi.n	8001ff0 <_printf_i+0x64>
 8001faa:	2963      	cmp	r1, #99	; 0x63
 8001fac:	d036      	beq.n	800201c <_printf_i+0x90>
 8001fae:	d80a      	bhi.n	8001fc6 <_printf_i+0x3a>
 8001fb0:	2900      	cmp	r1, #0
 8001fb2:	f000 80b9 	beq.w	8002128 <_printf_i+0x19c>
 8001fb6:	2958      	cmp	r1, #88	; 0x58
 8001fb8:	f000 8083 	beq.w	80020c2 <_printf_i+0x136>
 8001fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001fc4:	e032      	b.n	800202c <_printf_i+0xa0>
 8001fc6:	2964      	cmp	r1, #100	; 0x64
 8001fc8:	d001      	beq.n	8001fce <_printf_i+0x42>
 8001fca:	2969      	cmp	r1, #105	; 0x69
 8001fcc:	d1f6      	bne.n	8001fbc <_printf_i+0x30>
 8001fce:	6820      	ldr	r0, [r4, #0]
 8001fd0:	6813      	ldr	r3, [r2, #0]
 8001fd2:	0605      	lsls	r5, r0, #24
 8001fd4:	f103 0104 	add.w	r1, r3, #4
 8001fd8:	d52a      	bpl.n	8002030 <_printf_i+0xa4>
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6011      	str	r1, [r2, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da03      	bge.n	8001fea <_printf_i+0x5e>
 8001fe2:	222d      	movs	r2, #45	; 0x2d
 8001fe4:	425b      	negs	r3, r3
 8001fe6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fea:	486f      	ldr	r0, [pc, #444]	; (80021a8 <_printf_i+0x21c>)
 8001fec:	220a      	movs	r2, #10
 8001fee:	e039      	b.n	8002064 <_printf_i+0xd8>
 8001ff0:	2973      	cmp	r1, #115	; 0x73
 8001ff2:	f000 809d 	beq.w	8002130 <_printf_i+0x1a4>
 8001ff6:	d808      	bhi.n	800200a <_printf_i+0x7e>
 8001ff8:	296f      	cmp	r1, #111	; 0x6f
 8001ffa:	d020      	beq.n	800203e <_printf_i+0xb2>
 8001ffc:	2970      	cmp	r1, #112	; 0x70
 8001ffe:	d1dd      	bne.n	8001fbc <_printf_i+0x30>
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	f043 0320 	orr.w	r3, r3, #32
 8002006:	6023      	str	r3, [r4, #0]
 8002008:	e003      	b.n	8002012 <_printf_i+0x86>
 800200a:	2975      	cmp	r1, #117	; 0x75
 800200c:	d017      	beq.n	800203e <_printf_i+0xb2>
 800200e:	2978      	cmp	r1, #120	; 0x78
 8002010:	d1d4      	bne.n	8001fbc <_printf_i+0x30>
 8002012:	2378      	movs	r3, #120	; 0x78
 8002014:	4865      	ldr	r0, [pc, #404]	; (80021ac <_printf_i+0x220>)
 8002016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800201a:	e055      	b.n	80020c8 <_printf_i+0x13c>
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002022:	1d19      	adds	r1, r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6011      	str	r1, [r2, #0]
 8002028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800202c:	2301      	movs	r3, #1
 800202e:	e08c      	b.n	800214a <_printf_i+0x1be>
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002036:	6011      	str	r1, [r2, #0]
 8002038:	bf18      	it	ne
 800203a:	b21b      	sxthne	r3, r3
 800203c:	e7cf      	b.n	8001fde <_printf_i+0x52>
 800203e:	6813      	ldr	r3, [r2, #0]
 8002040:	6825      	ldr	r5, [r4, #0]
 8002042:	1d18      	adds	r0, r3, #4
 8002044:	6010      	str	r0, [r2, #0]
 8002046:	0628      	lsls	r0, r5, #24
 8002048:	d501      	bpl.n	800204e <_printf_i+0xc2>
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e002      	b.n	8002054 <_printf_i+0xc8>
 800204e:	0668      	lsls	r0, r5, #25
 8002050:	d5fb      	bpl.n	800204a <_printf_i+0xbe>
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	296f      	cmp	r1, #111	; 0x6f
 8002056:	bf14      	ite	ne
 8002058:	220a      	movne	r2, #10
 800205a:	2208      	moveq	r2, #8
 800205c:	4852      	ldr	r0, [pc, #328]	; (80021a8 <_printf_i+0x21c>)
 800205e:	2100      	movs	r1, #0
 8002060:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002064:	6865      	ldr	r5, [r4, #4]
 8002066:	2d00      	cmp	r5, #0
 8002068:	60a5      	str	r5, [r4, #8]
 800206a:	f2c0 8095 	blt.w	8002198 <_printf_i+0x20c>
 800206e:	6821      	ldr	r1, [r4, #0]
 8002070:	f021 0104 	bic.w	r1, r1, #4
 8002074:	6021      	str	r1, [r4, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d13d      	bne.n	80020f6 <_printf_i+0x16a>
 800207a:	2d00      	cmp	r5, #0
 800207c:	f040 808e 	bne.w	800219c <_printf_i+0x210>
 8002080:	4665      	mov	r5, ip
 8002082:	2a08      	cmp	r2, #8
 8002084:	d10b      	bne.n	800209e <_printf_i+0x112>
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	07db      	lsls	r3, r3, #31
 800208a:	d508      	bpl.n	800209e <_printf_i+0x112>
 800208c:	6923      	ldr	r3, [r4, #16]
 800208e:	6862      	ldr	r2, [r4, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	bfde      	ittt	le
 8002094:	2330      	movle	r3, #48	; 0x30
 8002096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800209a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800209e:	ebac 0305 	sub.w	r3, ip, r5
 80020a2:	6123      	str	r3, [r4, #16]
 80020a4:	f8cd 8000 	str.w	r8, [sp]
 80020a8:	463b      	mov	r3, r7
 80020aa:	aa03      	add	r2, sp, #12
 80020ac:	4621      	mov	r1, r4
 80020ae:	4630      	mov	r0, r6
 80020b0:	f7ff fef6 	bl	8001ea0 <_printf_common>
 80020b4:	3001      	adds	r0, #1
 80020b6:	d14d      	bne.n	8002154 <_printf_i+0x1c8>
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	b005      	add	sp, #20
 80020be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020c2:	4839      	ldr	r0, [pc, #228]	; (80021a8 <_printf_i+0x21c>)
 80020c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80020c8:	6813      	ldr	r3, [r2, #0]
 80020ca:	6821      	ldr	r1, [r4, #0]
 80020cc:	1d1d      	adds	r5, r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6015      	str	r5, [r2, #0]
 80020d2:	060a      	lsls	r2, r1, #24
 80020d4:	d50b      	bpl.n	80020ee <_printf_i+0x162>
 80020d6:	07ca      	lsls	r2, r1, #31
 80020d8:	bf44      	itt	mi
 80020da:	f041 0120 	orrmi.w	r1, r1, #32
 80020de:	6021      	strmi	r1, [r4, #0]
 80020e0:	b91b      	cbnz	r3, 80020ea <_printf_i+0x15e>
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	f022 0220 	bic.w	r2, r2, #32
 80020e8:	6022      	str	r2, [r4, #0]
 80020ea:	2210      	movs	r2, #16
 80020ec:	e7b7      	b.n	800205e <_printf_i+0xd2>
 80020ee:	064d      	lsls	r5, r1, #25
 80020f0:	bf48      	it	mi
 80020f2:	b29b      	uxthmi	r3, r3
 80020f4:	e7ef      	b.n	80020d6 <_printf_i+0x14a>
 80020f6:	4665      	mov	r5, ip
 80020f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80020fc:	fb02 3311 	mls	r3, r2, r1, r3
 8002100:	5cc3      	ldrb	r3, [r0, r3]
 8002102:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002106:	460b      	mov	r3, r1
 8002108:	2900      	cmp	r1, #0
 800210a:	d1f5      	bne.n	80020f8 <_printf_i+0x16c>
 800210c:	e7b9      	b.n	8002082 <_printf_i+0xf6>
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	6825      	ldr	r5, [r4, #0]
 8002112:	1d18      	adds	r0, r3, #4
 8002114:	6961      	ldr	r1, [r4, #20]
 8002116:	6010      	str	r0, [r2, #0]
 8002118:	0628      	lsls	r0, r5, #24
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	d501      	bpl.n	8002122 <_printf_i+0x196>
 800211e:	6019      	str	r1, [r3, #0]
 8002120:	e002      	b.n	8002128 <_printf_i+0x19c>
 8002122:	066a      	lsls	r2, r5, #25
 8002124:	d5fb      	bpl.n	800211e <_printf_i+0x192>
 8002126:	8019      	strh	r1, [r3, #0]
 8002128:	2300      	movs	r3, #0
 800212a:	4665      	mov	r5, ip
 800212c:	6123      	str	r3, [r4, #16]
 800212e:	e7b9      	b.n	80020a4 <_printf_i+0x118>
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	1d19      	adds	r1, r3, #4
 8002134:	6011      	str	r1, [r2, #0]
 8002136:	681d      	ldr	r5, [r3, #0]
 8002138:	6862      	ldr	r2, [r4, #4]
 800213a:	2100      	movs	r1, #0
 800213c:	4628      	mov	r0, r5
 800213e:	f000 f837 	bl	80021b0 <memchr>
 8002142:	b108      	cbz	r0, 8002148 <_printf_i+0x1bc>
 8002144:	1b40      	subs	r0, r0, r5
 8002146:	6060      	str	r0, [r4, #4]
 8002148:	6863      	ldr	r3, [r4, #4]
 800214a:	6123      	str	r3, [r4, #16]
 800214c:	2300      	movs	r3, #0
 800214e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002152:	e7a7      	b.n	80020a4 <_printf_i+0x118>
 8002154:	6923      	ldr	r3, [r4, #16]
 8002156:	462a      	mov	r2, r5
 8002158:	4639      	mov	r1, r7
 800215a:	4630      	mov	r0, r6
 800215c:	47c0      	blx	r8
 800215e:	3001      	adds	r0, #1
 8002160:	d0aa      	beq.n	80020b8 <_printf_i+0x12c>
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	079b      	lsls	r3, r3, #30
 8002166:	d413      	bmi.n	8002190 <_printf_i+0x204>
 8002168:	68e0      	ldr	r0, [r4, #12]
 800216a:	9b03      	ldr	r3, [sp, #12]
 800216c:	4298      	cmp	r0, r3
 800216e:	bfb8      	it	lt
 8002170:	4618      	movlt	r0, r3
 8002172:	e7a3      	b.n	80020bc <_printf_i+0x130>
 8002174:	2301      	movs	r3, #1
 8002176:	464a      	mov	r2, r9
 8002178:	4639      	mov	r1, r7
 800217a:	4630      	mov	r0, r6
 800217c:	47c0      	blx	r8
 800217e:	3001      	adds	r0, #1
 8002180:	d09a      	beq.n	80020b8 <_printf_i+0x12c>
 8002182:	3501      	adds	r5, #1
 8002184:	68e3      	ldr	r3, [r4, #12]
 8002186:	9a03      	ldr	r2, [sp, #12]
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	42ab      	cmp	r3, r5
 800218c:	dcf2      	bgt.n	8002174 <_printf_i+0x1e8>
 800218e:	e7eb      	b.n	8002168 <_printf_i+0x1dc>
 8002190:	2500      	movs	r5, #0
 8002192:	f104 0919 	add.w	r9, r4, #25
 8002196:	e7f5      	b.n	8002184 <_printf_i+0x1f8>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ac      	bne.n	80020f6 <_printf_i+0x16a>
 800219c:	7803      	ldrb	r3, [r0, #0]
 800219e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021a6:	e76c      	b.n	8002082 <_printf_i+0xf6>
 80021a8:	0800241f 	.word	0x0800241f
 80021ac:	08002430 	.word	0x08002430

080021b0 <memchr>:
 80021b0:	b510      	push	{r4, lr}
 80021b2:	b2c9      	uxtb	r1, r1
 80021b4:	4402      	add	r2, r0
 80021b6:	4290      	cmp	r0, r2
 80021b8:	4603      	mov	r3, r0
 80021ba:	d101      	bne.n	80021c0 <memchr+0x10>
 80021bc:	2300      	movs	r3, #0
 80021be:	e003      	b.n	80021c8 <memchr+0x18>
 80021c0:	781c      	ldrb	r4, [r3, #0]
 80021c2:	3001      	adds	r0, #1
 80021c4:	428c      	cmp	r4, r1
 80021c6:	d1f6      	bne.n	80021b6 <memchr+0x6>
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd10      	pop	{r4, pc}

080021cc <memcpy>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	1e43      	subs	r3, r0, #1
 80021d0:	440a      	add	r2, r1
 80021d2:	4291      	cmp	r1, r2
 80021d4:	d100      	bne.n	80021d8 <memcpy+0xc>
 80021d6:	bd10      	pop	{r4, pc}
 80021d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021e0:	e7f7      	b.n	80021d2 <memcpy+0x6>

080021e2 <memmove>:
 80021e2:	4288      	cmp	r0, r1
 80021e4:	b510      	push	{r4, lr}
 80021e6:	eb01 0302 	add.w	r3, r1, r2
 80021ea:	d807      	bhi.n	80021fc <memmove+0x1a>
 80021ec:	1e42      	subs	r2, r0, #1
 80021ee:	4299      	cmp	r1, r3
 80021f0:	d00a      	beq.n	8002208 <memmove+0x26>
 80021f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80021fa:	e7f8      	b.n	80021ee <memmove+0xc>
 80021fc:	4283      	cmp	r3, r0
 80021fe:	d9f5      	bls.n	80021ec <memmove+0xa>
 8002200:	1881      	adds	r1, r0, r2
 8002202:	1ad2      	subs	r2, r2, r3
 8002204:	42d3      	cmn	r3, r2
 8002206:	d100      	bne.n	800220a <memmove+0x28>
 8002208:	bd10      	pop	{r4, pc}
 800220a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800220e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002212:	e7f7      	b.n	8002204 <memmove+0x22>

08002214 <_free_r>:
 8002214:	b538      	push	{r3, r4, r5, lr}
 8002216:	4605      	mov	r5, r0
 8002218:	2900      	cmp	r1, #0
 800221a:	d043      	beq.n	80022a4 <_free_r+0x90>
 800221c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002220:	1f0c      	subs	r4, r1, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	bfb8      	it	lt
 8002226:	18e4      	addlt	r4, r4, r3
 8002228:	f000 f8d0 	bl	80023cc <__malloc_lock>
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <_free_r+0x94>)
 800222e:	6813      	ldr	r3, [r2, #0]
 8002230:	4610      	mov	r0, r2
 8002232:	b933      	cbnz	r3, 8002242 <_free_r+0x2e>
 8002234:	6063      	str	r3, [r4, #4]
 8002236:	6014      	str	r4, [r2, #0]
 8002238:	4628      	mov	r0, r5
 800223a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800223e:	f000 b8c6 	b.w	80023ce <__malloc_unlock>
 8002242:	42a3      	cmp	r3, r4
 8002244:	d90b      	bls.n	800225e <_free_r+0x4a>
 8002246:	6821      	ldr	r1, [r4, #0]
 8002248:	1862      	adds	r2, r4, r1
 800224a:	4293      	cmp	r3, r2
 800224c:	bf01      	itttt	eq
 800224e:	681a      	ldreq	r2, [r3, #0]
 8002250:	685b      	ldreq	r3, [r3, #4]
 8002252:	1852      	addeq	r2, r2, r1
 8002254:	6022      	streq	r2, [r4, #0]
 8002256:	6063      	str	r3, [r4, #4]
 8002258:	6004      	str	r4, [r0, #0]
 800225a:	e7ed      	b.n	8002238 <_free_r+0x24>
 800225c:	4613      	mov	r3, r2
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	b10a      	cbz	r2, 8002266 <_free_r+0x52>
 8002262:	42a2      	cmp	r2, r4
 8002264:	d9fa      	bls.n	800225c <_free_r+0x48>
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	1858      	adds	r0, r3, r1
 800226a:	42a0      	cmp	r0, r4
 800226c:	d10b      	bne.n	8002286 <_free_r+0x72>
 800226e:	6820      	ldr	r0, [r4, #0]
 8002270:	4401      	add	r1, r0
 8002272:	1858      	adds	r0, r3, r1
 8002274:	4282      	cmp	r2, r0
 8002276:	6019      	str	r1, [r3, #0]
 8002278:	d1de      	bne.n	8002238 <_free_r+0x24>
 800227a:	6810      	ldr	r0, [r2, #0]
 800227c:	6852      	ldr	r2, [r2, #4]
 800227e:	4401      	add	r1, r0
 8002280:	6019      	str	r1, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	e7d8      	b.n	8002238 <_free_r+0x24>
 8002286:	d902      	bls.n	800228e <_free_r+0x7a>
 8002288:	230c      	movs	r3, #12
 800228a:	602b      	str	r3, [r5, #0]
 800228c:	e7d4      	b.n	8002238 <_free_r+0x24>
 800228e:	6820      	ldr	r0, [r4, #0]
 8002290:	1821      	adds	r1, r4, r0
 8002292:	428a      	cmp	r2, r1
 8002294:	bf01      	itttt	eq
 8002296:	6811      	ldreq	r1, [r2, #0]
 8002298:	6852      	ldreq	r2, [r2, #4]
 800229a:	1809      	addeq	r1, r1, r0
 800229c:	6021      	streq	r1, [r4, #0]
 800229e:	6062      	str	r2, [r4, #4]
 80022a0:	605c      	str	r4, [r3, #4]
 80022a2:	e7c9      	b.n	8002238 <_free_r+0x24>
 80022a4:	bd38      	pop	{r3, r4, r5, pc}
 80022a6:	bf00      	nop
 80022a8:	200000b0 	.word	0x200000b0

080022ac <_malloc_r>:
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	1ccd      	adds	r5, r1, #3
 80022b0:	f025 0503 	bic.w	r5, r5, #3
 80022b4:	3508      	adds	r5, #8
 80022b6:	2d0c      	cmp	r5, #12
 80022b8:	bf38      	it	cc
 80022ba:	250c      	movcc	r5, #12
 80022bc:	2d00      	cmp	r5, #0
 80022be:	4606      	mov	r6, r0
 80022c0:	db01      	blt.n	80022c6 <_malloc_r+0x1a>
 80022c2:	42a9      	cmp	r1, r5
 80022c4:	d903      	bls.n	80022ce <_malloc_r+0x22>
 80022c6:	230c      	movs	r3, #12
 80022c8:	6033      	str	r3, [r6, #0]
 80022ca:	2000      	movs	r0, #0
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	f000 f87d 	bl	80023cc <__malloc_lock>
 80022d2:	4a21      	ldr	r2, [pc, #132]	; (8002358 <_malloc_r+0xac>)
 80022d4:	6814      	ldr	r4, [r2, #0]
 80022d6:	4621      	mov	r1, r4
 80022d8:	b991      	cbnz	r1, 8002300 <_malloc_r+0x54>
 80022da:	4c20      	ldr	r4, [pc, #128]	; (800235c <_malloc_r+0xb0>)
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	b91b      	cbnz	r3, 80022e8 <_malloc_r+0x3c>
 80022e0:	4630      	mov	r0, r6
 80022e2:	f000 f863 	bl	80023ac <_sbrk_r>
 80022e6:	6020      	str	r0, [r4, #0]
 80022e8:	4629      	mov	r1, r5
 80022ea:	4630      	mov	r0, r6
 80022ec:	f000 f85e 	bl	80023ac <_sbrk_r>
 80022f0:	1c43      	adds	r3, r0, #1
 80022f2:	d124      	bne.n	800233e <_malloc_r+0x92>
 80022f4:	230c      	movs	r3, #12
 80022f6:	4630      	mov	r0, r6
 80022f8:	6033      	str	r3, [r6, #0]
 80022fa:	f000 f868 	bl	80023ce <__malloc_unlock>
 80022fe:	e7e4      	b.n	80022ca <_malloc_r+0x1e>
 8002300:	680b      	ldr	r3, [r1, #0]
 8002302:	1b5b      	subs	r3, r3, r5
 8002304:	d418      	bmi.n	8002338 <_malloc_r+0x8c>
 8002306:	2b0b      	cmp	r3, #11
 8002308:	d90f      	bls.n	800232a <_malloc_r+0x7e>
 800230a:	600b      	str	r3, [r1, #0]
 800230c:	18cc      	adds	r4, r1, r3
 800230e:	50cd      	str	r5, [r1, r3]
 8002310:	4630      	mov	r0, r6
 8002312:	f000 f85c 	bl	80023ce <__malloc_unlock>
 8002316:	f104 000b 	add.w	r0, r4, #11
 800231a:	1d23      	adds	r3, r4, #4
 800231c:	f020 0007 	bic.w	r0, r0, #7
 8002320:	1ac3      	subs	r3, r0, r3
 8002322:	d0d3      	beq.n	80022cc <_malloc_r+0x20>
 8002324:	425a      	negs	r2, r3
 8002326:	50e2      	str	r2, [r4, r3]
 8002328:	e7d0      	b.n	80022cc <_malloc_r+0x20>
 800232a:	684b      	ldr	r3, [r1, #4]
 800232c:	428c      	cmp	r4, r1
 800232e:	bf16      	itet	ne
 8002330:	6063      	strne	r3, [r4, #4]
 8002332:	6013      	streq	r3, [r2, #0]
 8002334:	460c      	movne	r4, r1
 8002336:	e7eb      	b.n	8002310 <_malloc_r+0x64>
 8002338:	460c      	mov	r4, r1
 800233a:	6849      	ldr	r1, [r1, #4]
 800233c:	e7cc      	b.n	80022d8 <_malloc_r+0x2c>
 800233e:	1cc4      	adds	r4, r0, #3
 8002340:	f024 0403 	bic.w	r4, r4, #3
 8002344:	42a0      	cmp	r0, r4
 8002346:	d005      	beq.n	8002354 <_malloc_r+0xa8>
 8002348:	1a21      	subs	r1, r4, r0
 800234a:	4630      	mov	r0, r6
 800234c:	f000 f82e 	bl	80023ac <_sbrk_r>
 8002350:	3001      	adds	r0, #1
 8002352:	d0cf      	beq.n	80022f4 <_malloc_r+0x48>
 8002354:	6025      	str	r5, [r4, #0]
 8002356:	e7db      	b.n	8002310 <_malloc_r+0x64>
 8002358:	200000b0 	.word	0x200000b0
 800235c:	200000b4 	.word	0x200000b4

08002360 <_realloc_r>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	4607      	mov	r7, r0
 8002364:	4614      	mov	r4, r2
 8002366:	460e      	mov	r6, r1
 8002368:	b921      	cbnz	r1, 8002374 <_realloc_r+0x14>
 800236a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800236e:	4611      	mov	r1, r2
 8002370:	f7ff bf9c 	b.w	80022ac <_malloc_r>
 8002374:	b922      	cbnz	r2, 8002380 <_realloc_r+0x20>
 8002376:	f7ff ff4d 	bl	8002214 <_free_r>
 800237a:	4625      	mov	r5, r4
 800237c:	4628      	mov	r0, r5
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002380:	f000 f826 	bl	80023d0 <_malloc_usable_size_r>
 8002384:	42a0      	cmp	r0, r4
 8002386:	d20f      	bcs.n	80023a8 <_realloc_r+0x48>
 8002388:	4621      	mov	r1, r4
 800238a:	4638      	mov	r0, r7
 800238c:	f7ff ff8e 	bl	80022ac <_malloc_r>
 8002390:	4605      	mov	r5, r0
 8002392:	2800      	cmp	r0, #0
 8002394:	d0f2      	beq.n	800237c <_realloc_r+0x1c>
 8002396:	4631      	mov	r1, r6
 8002398:	4622      	mov	r2, r4
 800239a:	f7ff ff17 	bl	80021cc <memcpy>
 800239e:	4631      	mov	r1, r6
 80023a0:	4638      	mov	r0, r7
 80023a2:	f7ff ff37 	bl	8002214 <_free_r>
 80023a6:	e7e9      	b.n	800237c <_realloc_r+0x1c>
 80023a8:	4635      	mov	r5, r6
 80023aa:	e7e7      	b.n	800237c <_realloc_r+0x1c>

080023ac <_sbrk_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	2300      	movs	r3, #0
 80023b0:	4c05      	ldr	r4, [pc, #20]	; (80023c8 <_sbrk_r+0x1c>)
 80023b2:	4605      	mov	r5, r0
 80023b4:	4608      	mov	r0, r1
 80023b6:	6023      	str	r3, [r4, #0]
 80023b8:	f7ff fab6 	bl	8001928 <_sbrk>
 80023bc:	1c43      	adds	r3, r0, #1
 80023be:	d102      	bne.n	80023c6 <_sbrk_r+0x1a>
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	b103      	cbz	r3, 80023c6 <_sbrk_r+0x1a>
 80023c4:	602b      	str	r3, [r5, #0]
 80023c6:	bd38      	pop	{r3, r4, r5, pc}
 80023c8:	200000c0 	.word	0x200000c0

080023cc <__malloc_lock>:
 80023cc:	4770      	bx	lr

080023ce <__malloc_unlock>:
 80023ce:	4770      	bx	lr

080023d0 <_malloc_usable_size_r>:
 80023d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023d4:	1f18      	subs	r0, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bfbc      	itt	lt
 80023da:	580b      	ldrlt	r3, [r1, r0]
 80023dc:	18c0      	addlt	r0, r0, r3
 80023de:	4770      	bx	lr

080023e0 <_init>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	bf00      	nop
 80023e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e6:	bc08      	pop	{r3}
 80023e8:	469e      	mov	lr, r3
 80023ea:	4770      	bx	lr

080023ec <_fini>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	bf00      	nop
 80023f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f2:	bc08      	pop	{r3}
 80023f4:	469e      	mov	lr, r3
 80023f6:	4770      	bx	lr
