
I2c_Lab_Atmega_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000f26  00000fba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  00000fc0  2**0
                  ALLOC
  3 .stab         00000ffc  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a22  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 32 07 	call	0xe64	; 0xe64 <main>
  8a:	0c 94 91 07 	jmp	0xf22	; 0xf22 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:

                                 /*****            APIS            *****/

  /* PIN APIS */
void DIO_SetPinDirection (U8 PortId , U8 PinId , U8 PinDirection)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_SetPinDirection+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <DIO_SetPinDirection+0x8>
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	6a 83       	std	Y+2, r22	; 0x02
  a4:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) && ((PinDirection == DIO_PIN_OUTPUT) || (PinDirection == DIO_PIN_INPUT)))
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	08 f0       	brcs	.+2      	; 0xae <DIO_SetPinDirection+0x1c>
  ac:	dc c0       	rjmp	.+440    	; 0x266 <DIO_SetPinDirection+0x1d4>
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_SetPinDirection+0x24>
  b4:	d8 c0       	rjmp	.+432    	; 0x266 <DIO_SetPinDirection+0x1d4>
  b6:	8b 81       	ldd	r24, Y+3	; 0x03
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	21 f0       	breq	.+8      	; 0xc4 <DIO_SetPinDirection+0x32>
  bc:	8b 81       	ldd	r24, Y+3	; 0x03
  be:	88 23       	and	r24, r24
  c0:	09 f0       	breq	.+2      	; 0xc4 <DIO_SetPinDirection+0x32>
  c2:	d1 c0       	rjmp	.+418    	; 0x266 <DIO_SetPinDirection+0x1d4>
	{
		 switch(PortId)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	28 2f       	mov	r18, r24
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	3d 83       	std	Y+5, r19	; 0x05
  cc:	2c 83       	std	Y+4, r18	; 0x04
  ce:	8c 81       	ldd	r24, Y+4	; 0x04
  d0:	9d 81       	ldd	r25, Y+5	; 0x05
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	09 f4       	brne	.+2      	; 0xda <DIO_SetPinDirection+0x48>
  d8:	43 c0       	rjmp	.+134    	; 0x160 <DIO_SetPinDirection+0xce>
  da:	2c 81       	ldd	r18, Y+4	; 0x04
  dc:	3d 81       	ldd	r19, Y+5	; 0x05
  de:	22 30       	cpi	r18, 0x02	; 2
  e0:	31 05       	cpc	r19, r1
  e2:	2c f4       	brge	.+10     	; 0xee <DIO_SetPinDirection+0x5c>
  e4:	8c 81       	ldd	r24, Y+4	; 0x04
  e6:	9d 81       	ldd	r25, Y+5	; 0x05
  e8:	00 97       	sbiw	r24, 0x00	; 0
  ea:	71 f0       	breq	.+28     	; 0x108 <DIO_SetPinDirection+0x76>
  ec:	bc c0       	rjmp	.+376    	; 0x266 <DIO_SetPinDirection+0x1d4>
  ee:	2c 81       	ldd	r18, Y+4	; 0x04
  f0:	3d 81       	ldd	r19, Y+5	; 0x05
  f2:	22 30       	cpi	r18, 0x02	; 2
  f4:	31 05       	cpc	r19, r1
  f6:	09 f4       	brne	.+2      	; 0xfa <DIO_SetPinDirection+0x68>
  f8:	5f c0       	rjmp	.+190    	; 0x1b8 <DIO_SetPinDirection+0x126>
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	9d 81       	ldd	r25, Y+5	; 0x05
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	91 05       	cpc	r25, r1
 102:	09 f4       	brne	.+2      	; 0x106 <DIO_SetPinDirection+0x74>
 104:	85 c0       	rjmp	.+266    	; 0x210 <DIO_SetPinDirection+0x17e>
 106:	af c0       	rjmp	.+350    	; 0x266 <DIO_SetPinDirection+0x1d4>
		 {

		 case 0 :
			 if(PinDirection == DIO_PIN_OUTPUT)
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	a1 f4       	brne	.+40     	; 0x136 <DIO_SetPinDirection+0xa4>
			 {
			     SET_BIT(DDRA, PinId);
 10e:	aa e3       	ldi	r26, 0x3A	; 58
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ea e3       	ldi	r30, 0x3A	; 58
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	48 2f       	mov	r20, r24
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SetPinDirection+0x9a>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SetPinDirection+0x96>
 130:	84 2b       	or	r24, r20
 132:	8c 93       	st	X, r24
 134:	98 c0       	rjmp	.+304    	; 0x266 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRA , PinId);
 136:	aa e3       	ldi	r26, 0x3A	; 58
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	ea e3       	ldi	r30, 0x3A	; 58
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	48 2f       	mov	r20, r24
 142:	8a 81       	ldd	r24, Y+2	; 0x02
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDirection+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDirection+0xbe>
 158:	80 95       	com	r24
 15a:	84 23       	and	r24, r20
 15c:	8c 93       	st	X, r24
 15e:	83 c0       	rjmp	.+262    	; 0x266 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 1 :
			 if(PinDirection == DIO_PIN_OUTPUT)
 160:	8b 81       	ldd	r24, Y+3	; 0x03
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	a1 f4       	brne	.+40     	; 0x18e <DIO_SetPinDirection+0xfc>
			 {
			     SET_BIT(DDRB, PinId);
 166:	a7 e3       	ldi	r26, 0x37	; 55
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e7 e3       	ldi	r30, 0x37	; 55
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPinDirection+0xf2>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPinDirection+0xee>
 188:	84 2b       	or	r24, r20
 18a:	8c 93       	st	X, r24
 18c:	6c c0       	rjmp	.+216    	; 0x266 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRB , PinId);
 18e:	a7 e3       	ldi	r26, 0x37	; 55
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	e7 e3       	ldi	r30, 0x37	; 55
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	48 2f       	mov	r20, r24
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 2e       	mov	r0, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_SetPinDirection+0x11a>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_SetPinDirection+0x116>
 1b0:	80 95       	com	r24
 1b2:	84 23       	and	r24, r20
 1b4:	8c 93       	st	X, r24
 1b6:	57 c0       	rjmp	.+174    	; 0x266 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 2 :
			 if(PinDirection == DIO_PIN_OUTPUT)
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	a1 f4       	brne	.+40     	; 0x1e6 <DIO_SetPinDirection+0x154>
			 {
			     SET_BIT(DDRC, PinId);
 1be:	a4 e3       	ldi	r26, 0x34	; 52
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e4 e3       	ldi	r30, 0x34	; 52
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	48 2f       	mov	r20, r24
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 2e       	mov	r0, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinDirection+0x14a>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinDirection+0x146>
 1e0:	84 2b       	or	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	40 c0       	rjmp	.+128    	; 0x266 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRC , PinId);
 1e6:	a4 e3       	ldi	r26, 0x34	; 52
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e4 e3       	ldi	r30, 0x34	; 52
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8a 81       	ldd	r24, Y+2	; 0x02
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 2e       	mov	r0, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_SetPinDirection+0x172>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_SetPinDirection+0x16e>
 208:	80 95       	com	r24
 20a:	84 23       	and	r24, r20
 20c:	8c 93       	st	X, r24
 20e:	2b c0       	rjmp	.+86     	; 0x266 <DIO_SetPinDirection+0x1d4>
			 }
			 break;
		 case 3 :
			 if(PinDirection == DIO_PIN_OUTPUT)
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	a1 f4       	brne	.+40     	; 0x23e <DIO_SetPinDirection+0x1ac>
			 {
			     SET_BIT(DDRD, PinId);
 216:	a1 e3       	ldi	r26, 0x31	; 49
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e1 e3       	ldi	r30, 0x31	; 49
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	48 2f       	mov	r20, r24
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 2e       	mov	r0, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinDirection+0x1a2>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinDirection+0x19e>
 238:	84 2b       	or	r24, r20
 23a:	8c 93       	st	X, r24
 23c:	14 c0       	rjmp	.+40     	; 0x266 <DIO_SetPinDirection+0x1d4>
			 }
			 else
			 {
				 CLEAR_BIT(DDRD , PinId);
 23e:	a1 e3       	ldi	r26, 0x31	; 49
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e1 e3       	ldi	r30, 0x31	; 49
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	48 2f       	mov	r20, r24
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	28 2f       	mov	r18, r24
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 2e       	mov	r0, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinDirection+0x1ca>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPinDirection+0x1c6>
 260:	80 95       	com	r24
 262:	84 23       	and	r24, r20
 264:	8c 93       	st	X, r24
			 }
			 break;
		 }
	}

}
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	cf 91       	pop	r28
 272:	df 91       	pop	r29
 274:	08 95       	ret

00000276 <DIO_SetPinValue>:
void DIO_SetPinValue     (U8 PortId , U8 PinId , U8 PinValue)
{
 276:	df 93       	push	r29
 278:	cf 93       	push	r28
 27a:	00 d0       	rcall	.+0      	; 0x27c <DIO_SetPinValue+0x6>
 27c:	00 d0       	rcall	.+0      	; 0x27e <DIO_SetPinValue+0x8>
 27e:	0f 92       	push	r0
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	6a 83       	std	Y+2, r22	; 0x02
 288:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) && ((PinValue == 1) || (PinValue == 0)))
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	08 f0       	brcs	.+2      	; 0x292 <DIO_SetPinValue+0x1c>
 290:	dc c0       	rjmp	.+440    	; 0x44a <DIO_SetPinValue+0x1d4>
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	88 30       	cpi	r24, 0x08	; 8
 296:	08 f0       	brcs	.+2      	; 0x29a <DIO_SetPinValue+0x24>
 298:	d8 c0       	rjmp	.+432    	; 0x44a <DIO_SetPinValue+0x1d4>
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	21 f0       	breq	.+8      	; 0x2a8 <DIO_SetPinValue+0x32>
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	88 23       	and	r24, r24
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <DIO_SetPinValue+0x32>
 2a6:	d1 c0       	rjmp	.+418    	; 0x44a <DIO_SetPinValue+0x1d4>
		{
			 switch(PortId)
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	3d 83       	std	Y+5, r19	; 0x05
 2b0:	2c 83       	std	Y+4, r18	; 0x04
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	9d 81       	ldd	r25, Y+5	; 0x05
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	91 05       	cpc	r25, r1
 2ba:	09 f4       	brne	.+2      	; 0x2be <DIO_SetPinValue+0x48>
 2bc:	43 c0       	rjmp	.+134    	; 0x344 <DIO_SetPinValue+0xce>
 2be:	2c 81       	ldd	r18, Y+4	; 0x04
 2c0:	3d 81       	ldd	r19, Y+5	; 0x05
 2c2:	22 30       	cpi	r18, 0x02	; 2
 2c4:	31 05       	cpc	r19, r1
 2c6:	2c f4       	brge	.+10     	; 0x2d2 <DIO_SetPinValue+0x5c>
 2c8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ca:	9d 81       	ldd	r25, Y+5	; 0x05
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	71 f0       	breq	.+28     	; 0x2ec <DIO_SetPinValue+0x76>
 2d0:	bc c0       	rjmp	.+376    	; 0x44a <DIO_SetPinValue+0x1d4>
 2d2:	2c 81       	ldd	r18, Y+4	; 0x04
 2d4:	3d 81       	ldd	r19, Y+5	; 0x05
 2d6:	22 30       	cpi	r18, 0x02	; 2
 2d8:	31 05       	cpc	r19, r1
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_SetPinValue+0x68>
 2dc:	5f c0       	rjmp	.+190    	; 0x39c <DIO_SetPinValue+0x126>
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	9d 81       	ldd	r25, Y+5	; 0x05
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	91 05       	cpc	r25, r1
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_SetPinValue+0x74>
 2e8:	85 c0       	rjmp	.+266    	; 0x3f4 <DIO_SetPinValue+0x17e>
 2ea:	af c0       	rjmp	.+350    	; 0x44a <DIO_SetPinValue+0x1d4>
			 {

			 case 0 :
				 if(PinValue == DIO_PIN_HIGH)
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	a1 f4       	brne	.+40     	; 0x31a <DIO_SetPinValue+0xa4>
				 {
				     SET_BIT(PORTA, PinId);
 2f2:	ab e3       	ldi	r26, 0x3B	; 59
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	eb e3       	ldi	r30, 0x3B	; 59
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	48 2f       	mov	r20, r24
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	28 2f       	mov	r18, r24
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 2e       	mov	r0, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinValue+0x9a>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinValue+0x96>
 314:	84 2b       	or	r24, r20
 316:	8c 93       	st	X, r24
 318:	98 c0       	rjmp	.+304    	; 0x44a <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(DDRA , PinId);
 31a:	aa e3       	ldi	r26, 0x3A	; 58
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	ea e3       	ldi	r30, 0x3A	; 58
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	48 2f       	mov	r20, r24
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	28 2f       	mov	r18, r24
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 2e       	mov	r0, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_SetPinValue+0xc2>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_SetPinValue+0xbe>
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	8c 93       	st	X, r24
 342:	83 c0       	rjmp	.+262    	; 0x44a <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 1 :
				 if(PinValue == DIO_PIN_HIGH)
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	a1 f4       	brne	.+40     	; 0x372 <DIO_SetPinValue+0xfc>
				 {
				     SET_BIT(PORTB, PinId);
 34a:	a8 e3       	ldi	r26, 0x38	; 56
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	e8 e3       	ldi	r30, 0x38	; 56
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	48 2f       	mov	r20, r24
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 2e       	mov	r0, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_SetPinValue+0xf2>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_SetPinValue+0xee>
 36c:	84 2b       	or	r24, r20
 36e:	8c 93       	st	X, r24
 370:	6c c0       	rjmp	.+216    	; 0x44a <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTB , PinId);
 372:	a8 e3       	ldi	r26, 0x38	; 56
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	e8 e3       	ldi	r30, 0x38	; 56
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	48 2f       	mov	r20, r24
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_SetPinValue+0x11a>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_SetPinValue+0x116>
 394:	80 95       	com	r24
 396:	84 23       	and	r24, r20
 398:	8c 93       	st	X, r24
 39a:	57 c0       	rjmp	.+174    	; 0x44a <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 2 :
				 if(PinValue == DIO_PIN_HIGH)
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	a1 f4       	brne	.+40     	; 0x3ca <DIO_SetPinValue+0x154>
				 {
				     SET_BIT(PORTC, PinId);
 3a2:	a5 e3       	ldi	r26, 0x35	; 53
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	e5 e3       	ldi	r30, 0x35	; 53
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	48 2f       	mov	r20, r24
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 2e       	mov	r0, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_SetPinValue+0x14a>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_SetPinValue+0x146>
 3c4:	84 2b       	or	r24, r20
 3c6:	8c 93       	st	X, r24
 3c8:	40 c0       	rjmp	.+128    	; 0x44a <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTC , PinId);
 3ca:	a5 e3       	ldi	r26, 0x35	; 53
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	e5 e3       	ldi	r30, 0x35	; 53
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	48 2f       	mov	r20, r24
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 2e       	mov	r0, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_SetPinValue+0x172>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_SetPinValue+0x16e>
 3ec:	80 95       	com	r24
 3ee:	84 23       	and	r24, r20
 3f0:	8c 93       	st	X, r24
 3f2:	2b c0       	rjmp	.+86     	; 0x44a <DIO_SetPinValue+0x1d4>
				 }
				 break;
			 case 3 :
				 if(PinValue == DIO_PIN_HIGH)
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	a1 f4       	brne	.+40     	; 0x422 <DIO_SetPinValue+0x1ac>
				 {
				     SET_BIT(PORTD, PinId);
 3fa:	a2 e3       	ldi	r26, 0x32	; 50
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	e2 e3       	ldi	r30, 0x32	; 50
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	48 2f       	mov	r20, r24
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 2e       	mov	r0, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_SetPinValue+0x1a2>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_SetPinValue+0x19e>
 41c:	84 2b       	or	r24, r20
 41e:	8c 93       	st	X, r24
 420:	14 c0       	rjmp	.+40     	; 0x44a <DIO_SetPinValue+0x1d4>
				 }
				 else
				 {
					 CLEAR_BIT(PORTD , PinId);
 422:	a2 e3       	ldi	r26, 0x32	; 50
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	e2 e3       	ldi	r30, 0x32	; 50
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	48 2f       	mov	r20, r24
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 2e       	mov	r0, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_SetPinValue+0x1ca>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	0a 94       	dec	r0
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_SetPinValue+0x1c6>
 444:	80 95       	com	r24
 446:	84 23       	and	r24, r20
 448:	8c 93       	st	X, r24
				 }
				 break;
			 }
		}

}
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	cf 91       	pop	r28
 456:	df 91       	pop	r29
 458:	08 95       	ret

0000045a <DIO_GetPinValue>:
void DIO_GetPinValue     (U8 PortId , U8 PinId , U8* PinValue)
{
 45a:	df 93       	push	r29
 45c:	cf 93       	push	r28
 45e:	00 d0       	rcall	.+0      	; 0x460 <__stack+0x1>
 460:	00 d0       	rcall	.+0      	; 0x462 <__stack+0x3>
 462:	00 d0       	rcall	.+0      	; 0x464 <__stack+0x5>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	6a 83       	std	Y+2, r22	; 0x02
 46c:	5c 83       	std	Y+4, r21	; 0x04
 46e:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= 3) && (PinId <= 7) )
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	84 30       	cpi	r24, 0x04	; 4
 474:	08 f0       	brcs	.+2      	; 0x478 <__stack+0x19>
 476:	95 c0       	rjmp	.+298    	; 0x5a2 <__stack+0x143>
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	88 30       	cpi	r24, 0x08	; 8
 47c:	08 f0       	brcs	.+2      	; 0x480 <__stack+0x21>
 47e:	91 c0       	rjmp	.+290    	; 0x5a2 <__stack+0x143>
		{
			 switch(PortId)
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	3e 83       	std	Y+6, r19	; 0x06
 488:	2d 83       	std	Y+5, r18	; 0x05
 48a:	4d 81       	ldd	r20, Y+5	; 0x05
 48c:	5e 81       	ldd	r21, Y+6	; 0x06
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	51 05       	cpc	r21, r1
 492:	a1 f1       	breq	.+104    	; 0x4fc <__stack+0x9d>
 494:	8d 81       	ldd	r24, Y+5	; 0x05
 496:	9e 81       	ldd	r25, Y+6	; 0x06
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	91 05       	cpc	r25, r1
 49c:	34 f4       	brge	.+12     	; 0x4aa <__stack+0x4b>
 49e:	2d 81       	ldd	r18, Y+5	; 0x05
 4a0:	3e 81       	ldd	r19, Y+6	; 0x06
 4a2:	21 15       	cp	r18, r1
 4a4:	31 05       	cpc	r19, r1
 4a6:	71 f0       	breq	.+28     	; 0x4c4 <__stack+0x65>
 4a8:	7c c0       	rjmp	.+248    	; 0x5a2 <__stack+0x143>
 4aa:	4d 81       	ldd	r20, Y+5	; 0x05
 4ac:	5e 81       	ldd	r21, Y+6	; 0x06
 4ae:	42 30       	cpi	r20, 0x02	; 2
 4b0:	51 05       	cpc	r21, r1
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <__stack+0x57>
 4b4:	3f c0       	rjmp	.+126    	; 0x534 <__stack+0xd5>
 4b6:	8d 81       	ldd	r24, Y+5	; 0x05
 4b8:	9e 81       	ldd	r25, Y+6	; 0x06
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	91 05       	cpc	r25, r1
 4be:	09 f4       	brne	.+2      	; 0x4c2 <__stack+0x63>
 4c0:	55 c0       	rjmp	.+170    	; 0x56c <__stack+0x10d>
 4c2:	6f c0       	rjmp	.+222    	; 0x5a2 <__stack+0x143>
			 {

			 case 0 :
				 if(GET_BIT(PINA , PinId) == DIO_PIN_HIGH)
 4c4:	e9 e3       	ldi	r30, 0x39	; 57
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	a9 01       	movw	r20, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__stack+0x7d>
 4d8:	55 95       	asr	r21
 4da:	47 95       	ror	r20
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <__stack+0x79>
 4e0:	ca 01       	movw	r24, r20
 4e2:	81 70       	andi	r24, 0x01	; 1
 4e4:	90 70       	andi	r25, 0x00	; 0
 4e6:	88 23       	and	r24, r24
 4e8:	29 f0       	breq	.+10     	; 0x4f4 <__stack+0x95>
				 {
				     *PinValue = DIO_PIN_HIGH;
 4ea:	eb 81       	ldd	r30, Y+3	; 0x03
 4ec:	fc 81       	ldd	r31, Y+4	; 0x04
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 83       	st	Z, r24
 4f2:	57 c0       	rjmp	.+174    	; 0x5a2 <__stack+0x143>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
 4f4:	eb 81       	ldd	r30, Y+3	; 0x03
 4f6:	fc 81       	ldd	r31, Y+4	; 0x04
 4f8:	10 82       	st	Z, r1
 4fa:	53 c0       	rjmp	.+166    	; 0x5a2 <__stack+0x143>
				 }
				 break;
			 case 1 :
				 if(GET_BIT(PINB , PinId) == DIO_PIN_HIGH)
 4fc:	e6 e3       	ldi	r30, 0x36	; 54
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	88 2f       	mov	r24, r24
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	a9 01       	movw	r20, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <__stack+0xb5>
 510:	55 95       	asr	r21
 512:	47 95       	ror	r20
 514:	8a 95       	dec	r24
 516:	e2 f7       	brpl	.-8      	; 0x510 <__stack+0xb1>
 518:	ca 01       	movw	r24, r20
 51a:	81 70       	andi	r24, 0x01	; 1
 51c:	90 70       	andi	r25, 0x00	; 0
 51e:	88 23       	and	r24, r24
 520:	29 f0       	breq	.+10     	; 0x52c <__stack+0xcd>
				 {
				     *PinValue = DIO_PIN_HIGH;
 522:	eb 81       	ldd	r30, Y+3	; 0x03
 524:	fc 81       	ldd	r31, Y+4	; 0x04
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 83       	st	Z, r24
 52a:	3b c0       	rjmp	.+118    	; 0x5a2 <__stack+0x143>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
 52c:	eb 81       	ldd	r30, Y+3	; 0x03
 52e:	fc 81       	ldd	r31, Y+4	; 0x04
 530:	10 82       	st	Z, r1
 532:	37 c0       	rjmp	.+110    	; 0x5a2 <__stack+0x143>
				 }
				 break;
			 case 2 :
				 if(GET_BIT(PINC , PinId) == DIO_PIN_HIGH)
 534:	e3 e3       	ldi	r30, 0x33	; 51
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	28 2f       	mov	r18, r24
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	88 2f       	mov	r24, r24
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	a9 01       	movw	r20, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <__stack+0xed>
 548:	55 95       	asr	r21
 54a:	47 95       	ror	r20
 54c:	8a 95       	dec	r24
 54e:	e2 f7       	brpl	.-8      	; 0x548 <__stack+0xe9>
 550:	ca 01       	movw	r24, r20
 552:	81 70       	andi	r24, 0x01	; 1
 554:	90 70       	andi	r25, 0x00	; 0
 556:	88 23       	and	r24, r24
 558:	29 f0       	breq	.+10     	; 0x564 <__stack+0x105>
				 {
				     *PinValue = DIO_PIN_HIGH;
 55a:	eb 81       	ldd	r30, Y+3	; 0x03
 55c:	fc 81       	ldd	r31, Y+4	; 0x04
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 83       	st	Z, r24
 562:	1f c0       	rjmp	.+62     	; 0x5a2 <__stack+0x143>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
 564:	eb 81       	ldd	r30, Y+3	; 0x03
 566:	fc 81       	ldd	r31, Y+4	; 0x04
 568:	10 82       	st	Z, r1
 56a:	1b c0       	rjmp	.+54     	; 0x5a2 <__stack+0x143>
				 }
				 break;
			 case 3 :
				 if(GET_BIT(PIND , PinId) == DIO_PIN_HIGH)
 56c:	e0 e3       	ldi	r30, 0x30	; 48
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	88 2f       	mov	r24, r24
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	a9 01       	movw	r20, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__stack+0x125>
 580:	55 95       	asr	r21
 582:	47 95       	ror	r20
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <__stack+0x121>
 588:	ca 01       	movw	r24, r20
 58a:	81 70       	andi	r24, 0x01	; 1
 58c:	90 70       	andi	r25, 0x00	; 0
 58e:	88 23       	and	r24, r24
 590:	29 f0       	breq	.+10     	; 0x59c <__stack+0x13d>
				 {
				     *PinValue = DIO_PIN_HIGH;
 592:	eb 81       	ldd	r30, Y+3	; 0x03
 594:	fc 81       	ldd	r31, Y+4	; 0x04
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 83       	st	Z, r24
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <__stack+0x143>
				 }
				 else
				 {
					 *PinValue = DIO_PIN_LOW;
 59c:	eb 81       	ldd	r30, Y+3	; 0x03
 59e:	fc 81       	ldd	r31, Y+4	; 0x04
 5a0:	10 82       	st	Z, r1
				 }
				 break;
			 }
		}

}
 5a2:	26 96       	adiw	r28, 0x06	; 6
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <DIO_TogglePinValue>:
void DIO_TogglePinValue  (U8 PortId , U8 PinId)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <DIO_TogglePinValue+0x6>
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <DIO_TogglePinValue+0x8>
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && (PinId <= 7) )
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	84 30       	cpi	r24, 0x04	; 4
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <DIO_TogglePinValue+0x18>
 5ca:	72 c0       	rjmp	.+228    	; 0x6b0 <DIO_TogglePinValue+0xfc>
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	88 30       	cpi	r24, 0x08	; 8
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <DIO_TogglePinValue+0x20>
 5d2:	6e c0       	rjmp	.+220    	; 0x6b0 <DIO_TogglePinValue+0xfc>
		{
			 switch(PortId)
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	3c 83       	std	Y+4, r19	; 0x04
 5dc:	2b 83       	std	Y+3, r18	; 0x03
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	9c 81       	ldd	r25, Y+4	; 0x04
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	91 05       	cpc	r25, r1
 5e6:	49 f1       	breq	.+82     	; 0x63a <DIO_TogglePinValue+0x86>
 5e8:	2b 81       	ldd	r18, Y+3	; 0x03
 5ea:	3c 81       	ldd	r19, Y+4	; 0x04
 5ec:	22 30       	cpi	r18, 0x02	; 2
 5ee:	31 05       	cpc	r19, r1
 5f0:	2c f4       	brge	.+10     	; 0x5fc <DIO_TogglePinValue+0x48>
 5f2:	8b 81       	ldd	r24, Y+3	; 0x03
 5f4:	9c 81       	ldd	r25, Y+4	; 0x04
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	61 f0       	breq	.+24     	; 0x612 <DIO_TogglePinValue+0x5e>
 5fa:	5a c0       	rjmp	.+180    	; 0x6b0 <DIO_TogglePinValue+0xfc>
 5fc:	2b 81       	ldd	r18, Y+3	; 0x03
 5fe:	3c 81       	ldd	r19, Y+4	; 0x04
 600:	22 30       	cpi	r18, 0x02	; 2
 602:	31 05       	cpc	r19, r1
 604:	71 f1       	breq	.+92     	; 0x662 <DIO_TogglePinValue+0xae>
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	9c 81       	ldd	r25, Y+4	; 0x04
 60a:	83 30       	cpi	r24, 0x03	; 3
 60c:	91 05       	cpc	r25, r1
 60e:	e9 f1       	breq	.+122    	; 0x68a <DIO_TogglePinValue+0xd6>
 610:	4f c0       	rjmp	.+158    	; 0x6b0 <DIO_TogglePinValue+0xfc>
			 {

			 case 0 :
				 TOG_BIT(PORTA , PinId);
 612:	ab e3       	ldi	r26, 0x3B	; 59
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	eb e3       	ldi	r30, 0x3B	; 59
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	48 2f       	mov	r20, r24
 61e:	8a 81       	ldd	r24, Y+2	; 0x02
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 2e       	mov	r0, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_TogglePinValue+0x7c>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_TogglePinValue+0x78>
 634:	84 27       	eor	r24, r20
 636:	8c 93       	st	X, r24
 638:	3b c0       	rjmp	.+118    	; 0x6b0 <DIO_TogglePinValue+0xfc>
				 break;
			 case 1 :
				 TOG_BIT(PORTB , PinId);
 63a:	a8 e3       	ldi	r26, 0x38	; 56
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	e8 e3       	ldi	r30, 0x38	; 56
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	48 2f       	mov	r20, r24
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 2e       	mov	r0, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_TogglePinValue+0xa4>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_TogglePinValue+0xa0>
 65c:	84 27       	eor	r24, r20
 65e:	8c 93       	st	X, r24
 660:	27 c0       	rjmp	.+78     	; 0x6b0 <DIO_TogglePinValue+0xfc>
				 break;
			 case 2 :
				 TOG_BIT(PORTC , PinId);
 662:	a5 e3       	ldi	r26, 0x35	; 53
 664:	b0 e0       	ldi	r27, 0x00	; 0
 666:	e5 e3       	ldi	r30, 0x35	; 53
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	48 2f       	mov	r20, r24
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 2e       	mov	r0, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_TogglePinValue+0xcc>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	0a 94       	dec	r0
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_TogglePinValue+0xc8>
 684:	84 27       	eor	r24, r20
 686:	8c 93       	st	X, r24
 688:	13 c0       	rjmp	.+38     	; 0x6b0 <DIO_TogglePinValue+0xfc>
				 break;
			 case 3 :
				 TOG_BIT(PORTD , PinId);
 68a:	a2 e3       	ldi	r26, 0x32	; 50
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	e2 e3       	ldi	r30, 0x32	; 50
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	48 2f       	mov	r20, r24
 696:	8a 81       	ldd	r24, Y+2	; 0x02
 698:	28 2f       	mov	r18, r24
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 2e       	mov	r0, r18
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_TogglePinValue+0xf4>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	0a 94       	dec	r0
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_TogglePinValue+0xf0>
 6ac:	84 27       	eor	r24, r20
 6ae:	8c 93       	st	X, r24
			 }
		}



}
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	cf 91       	pop	r28
 6ba:	df 91       	pop	r29
 6bc:	08 95       	ret

000006be <DIO_SetInputPinResistance>:
void DIO_SetInputPinResistance(U8 PortId , U8 PinId)
{
 6be:	df 93       	push	r29
 6c0:	cf 93       	push	r28
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <DIO_SetInputPinResistance+0x6>
 6c4:	00 d0       	rcall	.+0      	; 0x6c6 <DIO_SetInputPinResistance+0x8>
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	89 83       	std	Y+1, r24	; 0x01
 6cc:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && (PinId <= 7) )
 6ce:	89 81       	ldd	r24, Y+1	; 0x01
 6d0:	84 30       	cpi	r24, 0x04	; 4
 6d2:	08 f0       	brcs	.+2      	; 0x6d6 <DIO_SetInputPinResistance+0x18>
 6d4:	72 c0       	rjmp	.+228    	; 0x7ba <DIO_SetInputPinResistance+0xfc>
 6d6:	8a 81       	ldd	r24, Y+2	; 0x02
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	08 f0       	brcs	.+2      	; 0x6de <DIO_SetInputPinResistance+0x20>
 6dc:	6e c0       	rjmp	.+220    	; 0x7ba <DIO_SetInputPinResistance+0xfc>
			{
				 switch(PortId)
 6de:	89 81       	ldd	r24, Y+1	; 0x01
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	3c 83       	std	Y+4, r19	; 0x04
 6e6:	2b 83       	std	Y+3, r18	; 0x03
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	9c 81       	ldd	r25, Y+4	; 0x04
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	91 05       	cpc	r25, r1
 6f0:	49 f1       	breq	.+82     	; 0x744 <DIO_SetInputPinResistance+0x86>
 6f2:	2b 81       	ldd	r18, Y+3	; 0x03
 6f4:	3c 81       	ldd	r19, Y+4	; 0x04
 6f6:	22 30       	cpi	r18, 0x02	; 2
 6f8:	31 05       	cpc	r19, r1
 6fa:	2c f4       	brge	.+10     	; 0x706 <DIO_SetInputPinResistance+0x48>
 6fc:	8b 81       	ldd	r24, Y+3	; 0x03
 6fe:	9c 81       	ldd	r25, Y+4	; 0x04
 700:	00 97       	sbiw	r24, 0x00	; 0
 702:	61 f0       	breq	.+24     	; 0x71c <DIO_SetInputPinResistance+0x5e>
 704:	5a c0       	rjmp	.+180    	; 0x7ba <DIO_SetInputPinResistance+0xfc>
 706:	2b 81       	ldd	r18, Y+3	; 0x03
 708:	3c 81       	ldd	r19, Y+4	; 0x04
 70a:	22 30       	cpi	r18, 0x02	; 2
 70c:	31 05       	cpc	r19, r1
 70e:	71 f1       	breq	.+92     	; 0x76c <DIO_SetInputPinResistance+0xae>
 710:	8b 81       	ldd	r24, Y+3	; 0x03
 712:	9c 81       	ldd	r25, Y+4	; 0x04
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	91 05       	cpc	r25, r1
 718:	e9 f1       	breq	.+122    	; 0x794 <DIO_SetInputPinResistance+0xd6>
 71a:	4f c0       	rjmp	.+158    	; 0x7ba <DIO_SetInputPinResistance+0xfc>
				 {

				 case 0 :
					 SET_BIT(PORTA , PinId);
 71c:	ab e3       	ldi	r26, 0x3B	; 59
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	eb e3       	ldi	r30, 0x3B	; 59
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	48 2f       	mov	r20, r24
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	28 2f       	mov	r18, r24
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	02 2e       	mov	r0, r18
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_SetInputPinResistance+0x7c>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	0a 94       	dec	r0
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_SetInputPinResistance+0x78>
 73e:	84 2b       	or	r24, r20
 740:	8c 93       	st	X, r24
 742:	3b c0       	rjmp	.+118    	; 0x7ba <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 1 :
					 SET_BIT(PORTB , PinId);
 744:	a8 e3       	ldi	r26, 0x38	; 56
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e8 e3       	ldi	r30, 0x38	; 56
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	48 2f       	mov	r20, r24
 750:	8a 81       	ldd	r24, Y+2	; 0x02
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 2e       	mov	r0, r18
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_SetInputPinResistance+0xa4>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	0a 94       	dec	r0
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_SetInputPinResistance+0xa0>
 766:	84 2b       	or	r24, r20
 768:	8c 93       	st	X, r24
 76a:	27 c0       	rjmp	.+78     	; 0x7ba <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 2 :
					 SET_BIT(PORTC , PinId);
 76c:	a5 e3       	ldi	r26, 0x35	; 53
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	e5 e3       	ldi	r30, 0x35	; 53
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	48 2f       	mov	r20, r24
 778:	8a 81       	ldd	r24, Y+2	; 0x02
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	02 2e       	mov	r0, r18
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_SetInputPinResistance+0xcc>
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	0a 94       	dec	r0
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_SetInputPinResistance+0xc8>
 78e:	84 2b       	or	r24, r20
 790:	8c 93       	st	X, r24
 792:	13 c0       	rjmp	.+38     	; 0x7ba <DIO_SetInputPinResistance+0xfc>
					 break;
				 case 3 :
					 SET_BIT(PORTD , PinId);
 794:	a2 e3       	ldi	r26, 0x32	; 50
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	e2 e3       	ldi	r30, 0x32	; 50
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	48 2f       	mov	r20, r24
 7a0:	8a 81       	ldd	r24, Y+2	; 0x02
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 2e       	mov	r0, r18
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DIO_SetInputPinResistance+0xf4>
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	0a 94       	dec	r0
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <DIO_SetInputPinResistance+0xf0>
 7b6:	84 2b       	or	r24, r20
 7b8:	8c 93       	st	X, r24
					 break;
				 }
			}
}
 7ba:	0f 90       	pop	r0
 7bc:	0f 90       	pop	r0
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	cf 91       	pop	r28
 7c4:	df 91       	pop	r29
 7c6:	08 95       	ret

000007c8 <DIO_SetPortDirection>:
  /* PORT APIS */

void DIO_SetPortDirection (U8 PortId ,  U8 PortDirection)
{
 7c8:	df 93       	push	r29
 7ca:	cf 93       	push	r28
 7cc:	00 d0       	rcall	.+0      	; 0x7ce <DIO_SetPortDirection+0x6>
 7ce:	00 d0       	rcall	.+0      	; 0x7d0 <DIO_SetPortDirection+0x8>
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
 7d4:	89 83       	std	Y+1, r24	; 0x01
 7d6:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) && ((PortDirection == DIO_Port_OUTPUT)|| (PortDirection == DIO_Port_INPUT)))
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	84 30       	cpi	r24, 0x04	; 4
 7dc:	08 f0       	brcs	.+2      	; 0x7e0 <DIO_SetPortDirection+0x18>
 7de:	55 c0       	rjmp	.+170    	; 0x88a <DIO_SetPortDirection+0xc2>
 7e0:	8a 81       	ldd	r24, Y+2	; 0x02
 7e2:	8f 3f       	cpi	r24, 0xFF	; 255
 7e4:	21 f0       	breq	.+8      	; 0x7ee <DIO_SetPortDirection+0x26>
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	88 23       	and	r24, r24
 7ea:	09 f0       	breq	.+2      	; 0x7ee <DIO_SetPortDirection+0x26>
 7ec:	4e c0       	rjmp	.+156    	; 0x88a <DIO_SetPortDirection+0xc2>
	{
		switch(PortId)
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	28 2f       	mov	r18, r24
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	3c 83       	std	Y+4, r19	; 0x04
 7f6:	2b 83       	std	Y+3, r18	; 0x03
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	9c 81       	ldd	r25, Y+4	; 0x04
 7fc:	81 30       	cpi	r24, 0x01	; 1
 7fe:	91 05       	cpc	r25, r1
 800:	09 f1       	breq	.+66     	; 0x844 <DIO_SetPortDirection+0x7c>
 802:	2b 81       	ldd	r18, Y+3	; 0x03
 804:	3c 81       	ldd	r19, Y+4	; 0x04
 806:	22 30       	cpi	r18, 0x02	; 2
 808:	31 05       	cpc	r19, r1
 80a:	2c f4       	brge	.+10     	; 0x816 <DIO_SetPortDirection+0x4e>
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	9c 81       	ldd	r25, Y+4	; 0x04
 810:	00 97       	sbiw	r24, 0x00	; 0
 812:	61 f0       	breq	.+24     	; 0x82c <DIO_SetPortDirection+0x64>
 814:	3a c0       	rjmp	.+116    	; 0x88a <DIO_SetPortDirection+0xc2>
 816:	2b 81       	ldd	r18, Y+3	; 0x03
 818:	3c 81       	ldd	r19, Y+4	; 0x04
 81a:	22 30       	cpi	r18, 0x02	; 2
 81c:	31 05       	cpc	r19, r1
 81e:	f1 f0       	breq	.+60     	; 0x85c <DIO_SetPortDirection+0x94>
 820:	8b 81       	ldd	r24, Y+3	; 0x03
 822:	9c 81       	ldd	r25, Y+4	; 0x04
 824:	83 30       	cpi	r24, 0x03	; 3
 826:	91 05       	cpc	r25, r1
 828:	29 f1       	breq	.+74     	; 0x874 <DIO_SetPortDirection+0xac>
 82a:	2f c0       	rjmp	.+94     	; 0x88a <DIO_SetPortDirection+0xc2>
	 {
		case 0 :
			if (PortDirection == DIO_Port_OUTPUT)
 82c:	8a 81       	ldd	r24, Y+2	; 0x02
 82e:	8f 3f       	cpi	r24, 0xFF	; 255
 830:	29 f4       	brne	.+10     	; 0x83c <DIO_SetPortDirection+0x74>
			{
				DDRA = 0xff ;
 832:	ea e3       	ldi	r30, 0x3A	; 58
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	80 83       	st	Z, r24
 83a:	27 c0       	rjmp	.+78     	; 0x88a <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRA = 0x00 ;
 83c:	ea e3       	ldi	r30, 0x3A	; 58
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	10 82       	st	Z, r1
 842:	23 c0       	rjmp	.+70     	; 0x88a <DIO_SetPortDirection+0xc2>
			}

			break;
		case 1 :
			if (PortDirection == DIO_Port_OUTPUT)
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	8f 3f       	cpi	r24, 0xFF	; 255
 848:	29 f4       	brne	.+10     	; 0x854 <DIO_SetPortDirection+0x8c>
			{
				DDRB = 0xff ;
 84a:	e7 e3       	ldi	r30, 0x37	; 55
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	80 83       	st	Z, r24
 852:	1b c0       	rjmp	.+54     	; 0x88a <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRB = 0x00 ;
 854:	e7 e3       	ldi	r30, 0x37	; 55
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	10 82       	st	Z, r1
 85a:	17 c0       	rjmp	.+46     	; 0x88a <DIO_SetPortDirection+0xc2>
			}

			break;
		case 2 :
			if (PortDirection == DIO_Port_OUTPUT)
 85c:	8a 81       	ldd	r24, Y+2	; 0x02
 85e:	8f 3f       	cpi	r24, 0xFF	; 255
 860:	29 f4       	brne	.+10     	; 0x86c <DIO_SetPortDirection+0xa4>
			{
				DDRC = 0xff ;
 862:	e4 e3       	ldi	r30, 0x34	; 52
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	80 83       	st	Z, r24
 86a:	0f c0       	rjmp	.+30     	; 0x88a <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRC = 0x00 ;
 86c:	e4 e3       	ldi	r30, 0x34	; 52
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	10 82       	st	Z, r1
 872:	0b c0       	rjmp	.+22     	; 0x88a <DIO_SetPortDirection+0xc2>
			}

			break;
		case 3 :
			if (PortDirection == DIO_Port_OUTPUT)
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	8f 3f       	cpi	r24, 0xFF	; 255
 878:	29 f4       	brne	.+10     	; 0x884 <DIO_SetPortDirection+0xbc>
			{
				DDRD = 0xff ;
 87a:	e1 e3       	ldi	r30, 0x31	; 49
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	80 83       	st	Z, r24
 882:	03 c0       	rjmp	.+6      	; 0x88a <DIO_SetPortDirection+0xc2>
			}
			else
			{
				DDRD = 0x00 ;
 884:	e1 e3       	ldi	r30, 0x31	; 49
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	10 82       	st	Z, r1
			}

			break;
	 }
	}
}
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	cf 91       	pop	r28
 894:	df 91       	pop	r29
 896:	08 95       	ret

00000898 <DIO_SetPortValue>:
void DIO_SetPortValue     (U8 PortId ,  U8 PortValue)
{
 898:	df 93       	push	r29
 89a:	cf 93       	push	r28
 89c:	00 d0       	rcall	.+0      	; 0x89e <DIO_SetPortValue+0x6>
 89e:	00 d0       	rcall	.+0      	; 0x8a0 <DIO_SetPortValue+0x8>
 8a0:	cd b7       	in	r28, 0x3d	; 61
 8a2:	de b7       	in	r29, 0x3e	; 62
 8a4:	89 83       	std	Y+1, r24	; 0x01
 8a6:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3))
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
 8aa:	84 30       	cpi	r24, 0x04	; 4
 8ac:	90 f5       	brcc	.+100    	; 0x912 <DIO_SetPortValue+0x7a>
		{
			switch(PortId)
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	28 2f       	mov	r18, r24
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	3c 83       	std	Y+4, r19	; 0x04
 8b6:	2b 83       	std	Y+3, r18	; 0x03
 8b8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ba:	9c 81       	ldd	r25, Y+4	; 0x04
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	91 05       	cpc	r25, r1
 8c0:	d1 f0       	breq	.+52     	; 0x8f6 <DIO_SetPortValue+0x5e>
 8c2:	2b 81       	ldd	r18, Y+3	; 0x03
 8c4:	3c 81       	ldd	r19, Y+4	; 0x04
 8c6:	22 30       	cpi	r18, 0x02	; 2
 8c8:	31 05       	cpc	r19, r1
 8ca:	2c f4       	brge	.+10     	; 0x8d6 <DIO_SetPortValue+0x3e>
 8cc:	8b 81       	ldd	r24, Y+3	; 0x03
 8ce:	9c 81       	ldd	r25, Y+4	; 0x04
 8d0:	00 97       	sbiw	r24, 0x00	; 0
 8d2:	61 f0       	breq	.+24     	; 0x8ec <DIO_SetPortValue+0x54>
 8d4:	1e c0       	rjmp	.+60     	; 0x912 <DIO_SetPortValue+0x7a>
 8d6:	2b 81       	ldd	r18, Y+3	; 0x03
 8d8:	3c 81       	ldd	r19, Y+4	; 0x04
 8da:	22 30       	cpi	r18, 0x02	; 2
 8dc:	31 05       	cpc	r19, r1
 8de:	81 f0       	breq	.+32     	; 0x900 <DIO_SetPortValue+0x68>
 8e0:	8b 81       	ldd	r24, Y+3	; 0x03
 8e2:	9c 81       	ldd	r25, Y+4	; 0x04
 8e4:	83 30       	cpi	r24, 0x03	; 3
 8e6:	91 05       	cpc	r25, r1
 8e8:	81 f0       	breq	.+32     	; 0x90a <DIO_SetPortValue+0x72>
 8ea:	13 c0       	rjmp	.+38     	; 0x912 <DIO_SetPortValue+0x7a>
		 {
			case 0 :
				PORTA = PortValue ;
 8ec:	eb e3       	ldi	r30, 0x3B	; 59
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	80 83       	st	Z, r24
 8f4:	0e c0       	rjmp	.+28     	; 0x912 <DIO_SetPortValue+0x7a>
				break;
			case 1 :
				PORTB = PortValue ;
 8f6:	e8 e3       	ldi	r30, 0x38	; 56
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	8a 81       	ldd	r24, Y+2	; 0x02
 8fc:	80 83       	st	Z, r24
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <DIO_SetPortValue+0x7a>
				break;
			case 2 :
				PORTC = PortValue ;
 900:	e5 e3       	ldi	r30, 0x35	; 53
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	8a 81       	ldd	r24, Y+2	; 0x02
 906:	80 83       	st	Z, r24
 908:	04 c0       	rjmp	.+8      	; 0x912 <DIO_SetPortValue+0x7a>
				break;
			case 3 :
				PORTB = PortValue ;
 90a:	e8 e3       	ldi	r30, 0x38	; 56
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	8a 81       	ldd	r24, Y+2	; 0x02
 910:	80 83       	st	Z, r24
				break;
		 }
		}
}
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	0f 90       	pop	r0
 918:	0f 90       	pop	r0
 91a:	cf 91       	pop	r28
 91c:	df 91       	pop	r29
 91e:	08 95       	ret

00000920 <DIO_GetPortValue>:
void DIO_GetPortValue     (U8 PortId , U8* PortValue)
{
 920:	df 93       	push	r29
 922:	cf 93       	push	r28
 924:	00 d0       	rcall	.+0      	; 0x926 <DIO_GetPortValue+0x6>
 926:	00 d0       	rcall	.+0      	; 0x928 <DIO_GetPortValue+0x8>
 928:	0f 92       	push	r0
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	89 83       	std	Y+1, r24	; 0x01
 930:	7b 83       	std	Y+3, r23	; 0x03
 932:	6a 83       	std	Y+2, r22	; 0x02
	if ((PortId <= 3) )
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	84 30       	cpi	r24, 0x04	; 4
 938:	d0 f5       	brcc	.+116    	; 0x9ae <DIO_GetPortValue+0x8e>
			{
				switch(PortId)
 93a:	89 81       	ldd	r24, Y+1	; 0x01
 93c:	28 2f       	mov	r18, r24
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	3d 83       	std	Y+5, r19	; 0x05
 942:	2c 83       	std	Y+4, r18	; 0x04
 944:	8c 81       	ldd	r24, Y+4	; 0x04
 946:	9d 81       	ldd	r25, Y+5	; 0x05
 948:	81 30       	cpi	r24, 0x01	; 1
 94a:	91 05       	cpc	r25, r1
 94c:	e1 f0       	breq	.+56     	; 0x986 <DIO_GetPortValue+0x66>
 94e:	2c 81       	ldd	r18, Y+4	; 0x04
 950:	3d 81       	ldd	r19, Y+5	; 0x05
 952:	22 30       	cpi	r18, 0x02	; 2
 954:	31 05       	cpc	r19, r1
 956:	2c f4       	brge	.+10     	; 0x962 <DIO_GetPortValue+0x42>
 958:	8c 81       	ldd	r24, Y+4	; 0x04
 95a:	9d 81       	ldd	r25, Y+5	; 0x05
 95c:	00 97       	sbiw	r24, 0x00	; 0
 95e:	61 f0       	breq	.+24     	; 0x978 <DIO_GetPortValue+0x58>
 960:	26 c0       	rjmp	.+76     	; 0x9ae <DIO_GetPortValue+0x8e>
 962:	2c 81       	ldd	r18, Y+4	; 0x04
 964:	3d 81       	ldd	r19, Y+5	; 0x05
 966:	22 30       	cpi	r18, 0x02	; 2
 968:	31 05       	cpc	r19, r1
 96a:	a1 f0       	breq	.+40     	; 0x994 <DIO_GetPortValue+0x74>
 96c:	8c 81       	ldd	r24, Y+4	; 0x04
 96e:	9d 81       	ldd	r25, Y+5	; 0x05
 970:	83 30       	cpi	r24, 0x03	; 3
 972:	91 05       	cpc	r25, r1
 974:	b1 f0       	breq	.+44     	; 0x9a2 <DIO_GetPortValue+0x82>
 976:	1b c0       	rjmp	.+54     	; 0x9ae <DIO_GetPortValue+0x8e>
			 {
				case 0 :
					*PortValue = PINA ;
 978:	e9 e3       	ldi	r30, 0x39	; 57
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	ea 81       	ldd	r30, Y+2	; 0x02
 980:	fb 81       	ldd	r31, Y+3	; 0x03
 982:	80 83       	st	Z, r24
 984:	14 c0       	rjmp	.+40     	; 0x9ae <DIO_GetPortValue+0x8e>
					break;
				case 1 :
					*PortValue = PINB ;
 986:	e6 e3       	ldi	r30, 0x36	; 54
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	ea 81       	ldd	r30, Y+2	; 0x02
 98e:	fb 81       	ldd	r31, Y+3	; 0x03
 990:	80 83       	st	Z, r24
 992:	0d c0       	rjmp	.+26     	; 0x9ae <DIO_GetPortValue+0x8e>
					break;
				case 2 :
					*PortValue = PINC ;
 994:	e3 e3       	ldi	r30, 0x33	; 51
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	ea 81       	ldd	r30, Y+2	; 0x02
 99c:	fb 81       	ldd	r31, Y+3	; 0x03
 99e:	80 83       	st	Z, r24
 9a0:	06 c0       	rjmp	.+12     	; 0x9ae <DIO_GetPortValue+0x8e>
					break;
				case 3 :
					*PortValue = PIND ;
 9a2:	e0 e3       	ldi	r30, 0x30	; 48
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	ea 81       	ldd	r30, Y+2	; 0x02
 9aa:	fb 81       	ldd	r31, Y+3	; 0x03
 9ac:	80 83       	st	Z, r24
					break;
			 }
			}
}
 9ae:	0f 90       	pop	r0
 9b0:	0f 90       	pop	r0
 9b2:	0f 90       	pop	r0
 9b4:	0f 90       	pop	r0
 9b6:	0f 90       	pop	r0
 9b8:	cf 91       	pop	r28
 9ba:	df 91       	pop	r29
 9bc:	08 95       	ret

000009be <DIO_TogglePortValue>:
void DIO_TogglePortValue  (U8 PortId )
{
 9be:	df 93       	push	r29
 9c0:	cf 93       	push	r28
 9c2:	00 d0       	rcall	.+0      	; 0x9c4 <DIO_TogglePortValue+0x6>
 9c4:	0f 92       	push	r0
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
 9ca:	89 83       	std	Y+1, r24	; 0x01
	if ((PortId <= 3) )
 9cc:	89 81       	ldd	r24, Y+1	; 0x01
 9ce:	84 30       	cpi	r24, 0x04	; 4
 9d0:	08 f0       	brcs	.+2      	; 0x9d4 <DIO_TogglePortValue+0x16>
 9d2:	3e c0       	rjmp	.+124    	; 0xa50 <DIO_TogglePortValue+0x92>
				{
					switch(PortId)
 9d4:	89 81       	ldd	r24, Y+1	; 0x01
 9d6:	28 2f       	mov	r18, r24
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	3b 83       	std	Y+3, r19	; 0x03
 9dc:	2a 83       	std	Y+2, r18	; 0x02
 9de:	8a 81       	ldd	r24, Y+2	; 0x02
 9e0:	9b 81       	ldd	r25, Y+3	; 0x03
 9e2:	81 30       	cpi	r24, 0x01	; 1
 9e4:	91 05       	cpc	r25, r1
 9e6:	e9 f0       	breq	.+58     	; 0xa22 <DIO_TogglePortValue+0x64>
 9e8:	2a 81       	ldd	r18, Y+2	; 0x02
 9ea:	3b 81       	ldd	r19, Y+3	; 0x03
 9ec:	22 30       	cpi	r18, 0x02	; 2
 9ee:	31 05       	cpc	r19, r1
 9f0:	2c f4       	brge	.+10     	; 0x9fc <DIO_TogglePortValue+0x3e>
 9f2:	8a 81       	ldd	r24, Y+2	; 0x02
 9f4:	9b 81       	ldd	r25, Y+3	; 0x03
 9f6:	00 97       	sbiw	r24, 0x00	; 0
 9f8:	61 f0       	breq	.+24     	; 0xa12 <DIO_TogglePortValue+0x54>
 9fa:	2a c0       	rjmp	.+84     	; 0xa50 <DIO_TogglePortValue+0x92>
 9fc:	2a 81       	ldd	r18, Y+2	; 0x02
 9fe:	3b 81       	ldd	r19, Y+3	; 0x03
 a00:	22 30       	cpi	r18, 0x02	; 2
 a02:	31 05       	cpc	r19, r1
 a04:	b1 f0       	breq	.+44     	; 0xa32 <DIO_TogglePortValue+0x74>
 a06:	8a 81       	ldd	r24, Y+2	; 0x02
 a08:	9b 81       	ldd	r25, Y+3	; 0x03
 a0a:	83 30       	cpi	r24, 0x03	; 3
 a0c:	91 05       	cpc	r25, r1
 a0e:	c9 f0       	breq	.+50     	; 0xa42 <DIO_TogglePortValue+0x84>
 a10:	1f c0       	rjmp	.+62     	; 0xa50 <DIO_TogglePortValue+0x92>
				 {
					case 0 :
						PORTA = ~PORTA ;
 a12:	ab e3       	ldi	r26, 0x3B	; 59
 a14:	b0 e0       	ldi	r27, 0x00	; 0
 a16:	eb e3       	ldi	r30, 0x3B	; 59
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	80 81       	ld	r24, Z
 a1c:	80 95       	com	r24
 a1e:	8c 93       	st	X, r24
 a20:	17 c0       	rjmp	.+46     	; 0xa50 <DIO_TogglePortValue+0x92>
						break;
					case 1 :
						PORTB = ~PORTB ;
 a22:	a8 e3       	ldi	r26, 0x38	; 56
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	e8 e3       	ldi	r30, 0x38	; 56
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	80 95       	com	r24
 a2e:	8c 93       	st	X, r24
 a30:	0f c0       	rjmp	.+30     	; 0xa50 <DIO_TogglePortValue+0x92>
						break;
					case 2 :
						PORTC = ~PORTC ;
 a32:	a5 e3       	ldi	r26, 0x35	; 53
 a34:	b0 e0       	ldi	r27, 0x00	; 0
 a36:	e5 e3       	ldi	r30, 0x35	; 53
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	80 81       	ld	r24, Z
 a3c:	80 95       	com	r24
 a3e:	8c 93       	st	X, r24
 a40:	07 c0       	rjmp	.+14     	; 0xa50 <DIO_TogglePortValue+0x92>
						break;
					case 3 :
						PORTD = ~PORTD ;
 a42:	a2 e3       	ldi	r26, 0x32	; 50
 a44:	b0 e0       	ldi	r27, 0x00	; 0
 a46:	e2 e3       	ldi	r30, 0x32	; 50
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	80 81       	ld	r24, Z
 a4c:	80 95       	com	r24
 a4e:	8c 93       	st	X, r24
						break;
				 }
				}
}
 a50:	0f 90       	pop	r0
 a52:	0f 90       	pop	r0
 a54:	0f 90       	pop	r0
 a56:	cf 91       	pop	r28
 a58:	df 91       	pop	r29
 a5a:	08 95       	ret

00000a5c <DIO_SetInputPortResistance>:
void DIO_SetInputPortResistance(U8 PortId )
{
 a5c:	df 93       	push	r29
 a5e:	cf 93       	push	r28
 a60:	00 d0       	rcall	.+0      	; 0xa62 <DIO_SetInputPortResistance+0x6>
 a62:	0f 92       	push	r0
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	de b7       	in	r29, 0x3e	; 62
 a68:	89 83       	std	Y+1, r24	; 0x01
	if ((PortId <= 3) )
 a6a:	89 81       	ldd	r24, Y+1	; 0x01
 a6c:	84 30       	cpi	r24, 0x04	; 4
 a6e:	90 f5       	brcc	.+100    	; 0xad4 <DIO_SetInputPortResistance+0x78>
				{
					switch(PortId)
 a70:	89 81       	ldd	r24, Y+1	; 0x01
 a72:	28 2f       	mov	r18, r24
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	3b 83       	std	Y+3, r19	; 0x03
 a78:	2a 83       	std	Y+2, r18	; 0x02
 a7a:	8a 81       	ldd	r24, Y+2	; 0x02
 a7c:	9b 81       	ldd	r25, Y+3	; 0x03
 a7e:	81 30       	cpi	r24, 0x01	; 1
 a80:	91 05       	cpc	r25, r1
 a82:	d1 f0       	breq	.+52     	; 0xab8 <DIO_SetInputPortResistance+0x5c>
 a84:	2a 81       	ldd	r18, Y+2	; 0x02
 a86:	3b 81       	ldd	r19, Y+3	; 0x03
 a88:	22 30       	cpi	r18, 0x02	; 2
 a8a:	31 05       	cpc	r19, r1
 a8c:	2c f4       	brge	.+10     	; 0xa98 <DIO_SetInputPortResistance+0x3c>
 a8e:	8a 81       	ldd	r24, Y+2	; 0x02
 a90:	9b 81       	ldd	r25, Y+3	; 0x03
 a92:	00 97       	sbiw	r24, 0x00	; 0
 a94:	61 f0       	breq	.+24     	; 0xaae <DIO_SetInputPortResistance+0x52>
 a96:	1e c0       	rjmp	.+60     	; 0xad4 <DIO_SetInputPortResistance+0x78>
 a98:	2a 81       	ldd	r18, Y+2	; 0x02
 a9a:	3b 81       	ldd	r19, Y+3	; 0x03
 a9c:	22 30       	cpi	r18, 0x02	; 2
 a9e:	31 05       	cpc	r19, r1
 aa0:	81 f0       	breq	.+32     	; 0xac2 <DIO_SetInputPortResistance+0x66>
 aa2:	8a 81       	ldd	r24, Y+2	; 0x02
 aa4:	9b 81       	ldd	r25, Y+3	; 0x03
 aa6:	83 30       	cpi	r24, 0x03	; 3
 aa8:	91 05       	cpc	r25, r1
 aaa:	81 f0       	breq	.+32     	; 0xacc <DIO_SetInputPortResistance+0x70>
 aac:	13 c0       	rjmp	.+38     	; 0xad4 <DIO_SetInputPortResistance+0x78>
				 {
					case 0 :
						PORTA = 0xff ;
 aae:	eb e3       	ldi	r30, 0x3B	; 59
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	8f ef       	ldi	r24, 0xFF	; 255
 ab4:	80 83       	st	Z, r24
 ab6:	0e c0       	rjmp	.+28     	; 0xad4 <DIO_SetInputPortResistance+0x78>
						break;
					case 1 :
						PORTB = 0xff ;
 ab8:	e8 e3       	ldi	r30, 0x38	; 56
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	8f ef       	ldi	r24, 0xFF	; 255
 abe:	80 83       	st	Z, r24
 ac0:	09 c0       	rjmp	.+18     	; 0xad4 <DIO_SetInputPortResistance+0x78>
						break;
					case 2 :
						PORTC = 0xff ;
 ac2:	e5 e3       	ldi	r30, 0x35	; 53
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	8f ef       	ldi	r24, 0xFF	; 255
 ac8:	80 83       	st	Z, r24
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <DIO_SetInputPortResistance+0x78>
						break;
					case 3 :
						PORTD = 0xff ;
 acc:	e2 e3       	ldi	r30, 0x32	; 50
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	8f ef       	ldi	r24, 0xFF	; 255
 ad2:	80 83       	st	Z, r24
						break;
				 }
				}
}
 ad4:	0f 90       	pop	r0
 ad6:	0f 90       	pop	r0
 ad8:	0f 90       	pop	r0
 ada:	cf 91       	pop	r28
 adc:	df 91       	pop	r29
 ade:	08 95       	ret

00000ae0 <I2C_init>:
 * @param [in] 	-IRQ_CallBack: Pointer to CallBack Function it must Set in Slave mode Because it works in interrupt mode .
 * @retval 		-none
 * Note			-none
 */
void I2C_init(uint32_t SCL_Freq , uint8_t Prescaler , void (*IRQ_CallBack)(Slave_IRQ_State_t state))
{
 ae0:	cf 92       	push	r12
 ae2:	df 92       	push	r13
 ae4:	ef 92       	push	r14
 ae6:	ff 92       	push	r15
 ae8:	0f 93       	push	r16
 aea:	1f 93       	push	r17
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
 af4:	27 97       	sbiw	r28, 0x07	; 7
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	f8 94       	cli
 afa:	de bf       	out	0x3e, r29	; 62
 afc:	0f be       	out	0x3f, r0	; 63
 afe:	cd bf       	out	0x3d, r28	; 61
 b00:	69 83       	std	Y+1, r22	; 0x01
 b02:	7a 83       	std	Y+2, r23	; 0x02
 b04:	8b 83       	std	Y+3, r24	; 0x03
 b06:	9c 83       	std	Y+4, r25	; 0x04
 b08:	4d 83       	std	Y+5, r20	; 0x05
 b0a:	3f 83       	std	Y+7, r19	; 0x07
 b0c:	2e 83       	std	Y+6, r18	; 0x06
	// Set  TWI Bit Rate Register TWBR
	TWBR = (uint8_t)(((F_CPU/SCL_Freq) -16)/(1<<((2*Prescaler)+1)));
 b0e:	cc 24       	eor	r12, r12
 b10:	dd 24       	eor	r13, r13
 b12:	68 94       	set
 b14:	c5 f8       	bld	r12, 5
 b16:	80 e4       	ldi	r24, 0x40	; 64
 b18:	92 e4       	ldi	r25, 0x42	; 66
 b1a:	af e0       	ldi	r26, 0x0F	; 15
 b1c:	b0 e0       	ldi	r27, 0x00	; 0
 b1e:	29 81       	ldd	r18, Y+1	; 0x01
 b20:	3a 81       	ldd	r19, Y+2	; 0x02
 b22:	4b 81       	ldd	r20, Y+3	; 0x03
 b24:	5c 81       	ldd	r21, Y+4	; 0x04
 b26:	bc 01       	movw	r22, r24
 b28:	cd 01       	movw	r24, r26
 b2a:	0e 94 6f 07 	call	0xede	; 0xede <__udivmodsi4>
 b2e:	da 01       	movw	r26, r20
 b30:	c9 01       	movw	r24, r18
 b32:	0f 2e       	mov	r0, r31
 b34:	f0 ef       	ldi	r31, 0xF0	; 240
 b36:	ef 2e       	mov	r14, r31
 b38:	ff ef       	ldi	r31, 0xFF	; 255
 b3a:	ff 2e       	mov	r15, r31
 b3c:	ff ef       	ldi	r31, 0xFF	; 255
 b3e:	0f 2f       	mov	r16, r31
 b40:	ff ef       	ldi	r31, 0xFF	; 255
 b42:	1f 2f       	mov	r17, r31
 b44:	f0 2d       	mov	r31, r0
 b46:	e8 0e       	add	r14, r24
 b48:	f9 1e       	adc	r15, r25
 b4a:	0a 1f       	adc	r16, r26
 b4c:	1b 1f       	adc	r17, r27
 b4e:	8d 81       	ldd	r24, Y+5	; 0x05
 b50:	88 2f       	mov	r24, r24
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	88 0f       	add	r24, r24
 b56:	99 1f       	adc	r25, r25
 b58:	9c 01       	movw	r18, r24
 b5a:	2f 5f       	subi	r18, 0xFF	; 255
 b5c:	3f 4f       	sbci	r19, 0xFF	; 255
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <I2C_init+0x88>
 b64:	88 0f       	add	r24, r24
 b66:	99 1f       	adc	r25, r25
 b68:	2a 95       	dec	r18
 b6a:	e2 f7       	brpl	.-8      	; 0xb64 <I2C_init+0x84>
 b6c:	9c 01       	movw	r18, r24
 b6e:	44 27       	eor	r20, r20
 b70:	37 fd       	sbrc	r19, 7
 b72:	40 95       	com	r20
 b74:	54 2f       	mov	r21, r20
 b76:	c8 01       	movw	r24, r16
 b78:	b7 01       	movw	r22, r14
 b7a:	0e 94 6f 07 	call	0xede	; 0xede <__udivmodsi4>
 b7e:	da 01       	movw	r26, r20
 b80:	c9 01       	movw	r24, r18
 b82:	f6 01       	movw	r30, r12
 b84:	80 83       	st	Z, r24

	// Set d control the bit rate prescaler.
	TWSR |= Prescaler ;
 b86:	a1 e2       	ldi	r26, 0x21	; 33
 b88:	b0 e0       	ldi	r27, 0x00	; 0
 b8a:	e1 e2       	ldi	r30, 0x21	; 33
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	90 81       	ld	r25, Z
 b90:	8d 81       	ldd	r24, Y+5	; 0x05
 b92:	89 2b       	or	r24, r25
 b94:	8c 93       	st	X, r24
	TWCR |= (1<<2) |(1<<6);


#endif

}
 b96:	27 96       	adiw	r28, 0x07	; 7
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	f8 94       	cli
 b9c:	de bf       	out	0x3e, r29	; 62
 b9e:	0f be       	out	0x3f, r0	; 63
 ba0:	cd bf       	out	0x3d, r28	; 61
 ba2:	cf 91       	pop	r28
 ba4:	df 91       	pop	r29
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	ff 90       	pop	r15
 bac:	ef 90       	pop	r14
 bae:	df 90       	pop	r13
 bb0:	cf 90       	pop	r12
 bb2:	08 95       	ret

00000bb4 <I2C_Master_TX>:

void I2C_Master_TX(uint8_t* Data ,uint8_t SLA , uint32_t Data_Length  )
{
 bb4:	df 93       	push	r29
 bb6:	cf 93       	push	r28
 bb8:	cd b7       	in	r28, 0x3d	; 61
 bba:	de b7       	in	r29, 0x3e	; 62
 bbc:	28 97       	sbiw	r28, 0x08	; 8
 bbe:	0f b6       	in	r0, 0x3f	; 63
 bc0:	f8 94       	cli
 bc2:	de bf       	out	0x3e, r29	; 62
 bc4:	0f be       	out	0x3f, r0	; 63
 bc6:	cd bf       	out	0x3d, r28	; 61
 bc8:	9b 83       	std	Y+3, r25	; 0x03
 bca:	8a 83       	std	Y+2, r24	; 0x02
 bcc:	6c 83       	std	Y+4, r22	; 0x04
 bce:	2d 83       	std	Y+5, r18	; 0x05
 bd0:	3e 83       	std	Y+6, r19	; 0x06
 bd2:	4f 83       	std	Y+7, r20	; 0x07
 bd4:	58 87       	std	Y+8, r21	; 0x08
	uint8_t i ;
	for(i=0 ; i<Data_Length ; i++ )
 bd6:	19 82       	std	Y+1, r1	; 0x01
 bd8:	3d c0       	rjmp	.+122    	; 0xc54 <I2C_Master_TX+0xa0>
	{
		//Send START or repeated START condition
		TWCR = (1<<7)|(1<<5)|(1<<2);
 bda:	e6 e5       	ldi	r30, 0x56	; 86
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	84 ea       	ldi	r24, 0xA4	; 164
 be0:	80 83       	st	Z, r24

		if(i==0)
 be2:	89 81       	ldd	r24, Y+1	; 0x01
 be4:	88 23       	and	r24, r24
 be6:	59 f4       	brne	.+22     	; 0xbfe <I2C_Master_TX+0x4a>
		{
			// wait  START condition has been transmitted ,
			// the TWINT Flag is set by hardware,
			// and the status code in TWSR will be $08
			while((!(TWCR &(1<<7))) && (TWSR != 0x08));
 be8:	e6 e5       	ldi	r30, 0x56	; 86
 bea:	f0 e0       	ldi	r31, 0x00	; 0
 bec:	80 81       	ld	r24, Z
 bee:	88 23       	and	r24, r24
 bf0:	5c f0       	brlt	.+22     	; 0xc08 <I2C_Master_TX+0x54>
 bf2:	e1 e2       	ldi	r30, 0x21	; 33
 bf4:	f0 e0       	ldi	r31, 0x00	; 0
 bf6:	80 81       	ld	r24, Z
 bf8:	88 30       	cpi	r24, 0x08	; 8
 bfa:	b1 f7       	brne	.-20     	; 0xbe8 <I2C_Master_TX+0x34>
 bfc:	05 c0       	rjmp	.+10     	; 0xc08 <I2C_Master_TX+0x54>
		}
		else
		{
			// A repeated START condition has been transmitted
			while((TWSR != 0x10));
 bfe:	e1 e2       	ldi	r30, 0x21	; 33
 c00:	f0 e0       	ldi	r31, 0x00	; 0
 c02:	80 81       	ld	r24, Z
 c04:	80 31       	cpi	r24, 0x10	; 16
 c06:	d9 f7       	brne	.-10     	; 0xbfe <I2C_Master_TX+0x4a>
		}

		//writing SLA+W to TWDR
		TWDR = ((SLA<<1)|(0));
 c08:	e3 e2       	ldi	r30, 0x23	; 35
 c0a:	f0 e0       	ldi	r31, 0x00	; 0
 c0c:	8c 81       	ldd	r24, Y+4	; 0x04
 c0e:	88 0f       	add	r24, r24
 c10:	80 83       	st	Z, r24

		// TWINT bit should be cleared (by writing it to one)
		TWCR = (1<<7)|(1<<2) ;
 c12:	e6 e5       	ldi	r30, 0x56	; 86
 c14:	f0 e0       	ldi	r31, 0x00	; 0
 c16:	84 e8       	ldi	r24, 0x84	; 132
 c18:	80 83       	st	Z, r24

		// SLA+W has been transmitted , ACK has been received
		while((TWSR != 0x18));
 c1a:	e1 e2       	ldi	r30, 0x21	; 33
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	80 81       	ld	r24, Z
 c20:	88 31       	cpi	r24, 0x18	; 24
 c22:	d9 f7       	brne	.-10     	; 0xc1a <I2C_Master_TX+0x66>


		//writing Data byte TWDR
		TWDR = Data[i];
 c24:	a3 e2       	ldi	r26, 0x23	; 35
 c26:	b0 e0       	ldi	r27, 0x00	; 0
 c28:	89 81       	ldd	r24, Y+1	; 0x01
 c2a:	28 2f       	mov	r18, r24
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	8a 81       	ldd	r24, Y+2	; 0x02
 c30:	9b 81       	ldd	r25, Y+3	; 0x03
 c32:	fc 01       	movw	r30, r24
 c34:	e2 0f       	add	r30, r18
 c36:	f3 1f       	adc	r31, r19
 c38:	80 81       	ld	r24, Z
 c3a:	8c 93       	st	X, r24

		// TWINT bit should be cleared (by writing it to one)
		TWCR = (1<<7)|(1<<2);
 c3c:	e6 e5       	ldi	r30, 0x56	; 86
 c3e:	f0 e0       	ldi	r31, 0x00	; 0
 c40:	84 e8       	ldi	r24, 0x84	; 132
 c42:	80 83       	st	Z, r24

		// Data byte has been transmitted , ACK has been received
		while((TWSR != 0x28));
 c44:	e1 e2       	ldi	r30, 0x21	; 33
 c46:	f0 e0       	ldi	r31, 0x00	; 0
 c48:	80 81       	ld	r24, Z
 c4a:	88 32       	cpi	r24, 0x28	; 40
 c4c:	d9 f7       	brne	.-10     	; 0xc44 <I2C_Master_TX+0x90>
}

void I2C_Master_TX(uint8_t* Data ,uint8_t SLA , uint32_t Data_Length  )
{
	uint8_t i ;
	for(i=0 ; i<Data_Length ; i++ )
 c4e:	89 81       	ldd	r24, Y+1	; 0x01
 c50:	8f 5f       	subi	r24, 0xFF	; 255
 c52:	89 83       	std	Y+1, r24	; 0x01
 c54:	89 81       	ldd	r24, Y+1	; 0x01
 c56:	28 2f       	mov	r18, r24
 c58:	30 e0       	ldi	r19, 0x00	; 0
 c5a:	40 e0       	ldi	r20, 0x00	; 0
 c5c:	50 e0       	ldi	r21, 0x00	; 0
 c5e:	8d 81       	ldd	r24, Y+5	; 0x05
 c60:	9e 81       	ldd	r25, Y+6	; 0x06
 c62:	af 81       	ldd	r26, Y+7	; 0x07
 c64:	b8 85       	ldd	r27, Y+8	; 0x08
 c66:	28 17       	cp	r18, r24
 c68:	39 07       	cpc	r19, r25
 c6a:	4a 07       	cpc	r20, r26
 c6c:	5b 07       	cpc	r21, r27
 c6e:	08 f4       	brcc	.+2      	; 0xc72 <I2C_Master_TX+0xbe>
 c70:	b4 cf       	rjmp	.-152    	; 0xbda <I2C_Master_TX+0x26>
		// Data byte has been transmitted , ACK has been received
		while((TWSR != 0x28));
	}

	// Set STOP Condition
	TWCR = (1<<7)|(1<<4)|(1<<2);
 c72:	e6 e5       	ldi	r30, 0x56	; 86
 c74:	f0 e0       	ldi	r31, 0x00	; 0
 c76:	84 e9       	ldi	r24, 0x94	; 148
 c78:	80 83       	st	Z, r24

}
 c7a:	28 96       	adiw	r28, 0x08	; 8
 c7c:	0f b6       	in	r0, 0x3f	; 63
 c7e:	f8 94       	cli
 c80:	de bf       	out	0x3e, r29	; 62
 c82:	0f be       	out	0x3f, r0	; 63
 c84:	cd bf       	out	0x3d, r28	; 61
 c86:	cf 91       	pop	r28
 c88:	df 91       	pop	r29
 c8a:	08 95       	ret

00000c8c <I2C_Master_RX>:

void I2C_Master_RX(uint8_t* Data ,uint8_t SLA , uint32_t Data_Length , Start_Condition_t S , Stop_Condition_t P)
{
 c8c:	ef 92       	push	r14
 c8e:	0f 93       	push	r16
 c90:	df 93       	push	r29
 c92:	cf 93       	push	r28
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
 c98:	2a 97       	sbiw	r28, 0x0a	; 10
 c9a:	0f b6       	in	r0, 0x3f	; 63
 c9c:	f8 94       	cli
 c9e:	de bf       	out	0x3e, r29	; 62
 ca0:	0f be       	out	0x3f, r0	; 63
 ca2:	cd bf       	out	0x3d, r28	; 61
 ca4:	9b 83       	std	Y+3, r25	; 0x03
 ca6:	8a 83       	std	Y+2, r24	; 0x02
 ca8:	6c 83       	std	Y+4, r22	; 0x04
 caa:	2d 83       	std	Y+5, r18	; 0x05
 cac:	3e 83       	std	Y+6, r19	; 0x06
 cae:	4f 83       	std	Y+7, r20	; 0x07
 cb0:	58 87       	std	Y+8, r21	; 0x08
 cb2:	09 87       	std	Y+9, r16	; 0x09
 cb4:	ea 86       	std	Y+10, r14	; 0x0a
	//Send START or repeated START condition
	TWCR = (1<<7)|(1<<5)|(1<<2)|(1<<6) ;
 cb6:	e6 e5       	ldi	r30, 0x56	; 86
 cb8:	f0 e0       	ldi	r31, 0x00	; 0
 cba:	84 ee       	ldi	r24, 0xE4	; 228
 cbc:	80 83       	st	Z, r24

	if(S == start)
 cbe:	89 85       	ldd	r24, Y+9	; 0x09
 cc0:	88 23       	and	r24, r24
 cc2:	59 f4       	brne	.+22     	; 0xcda <I2C_Master_RX+0x4e>
	{
		// wait  START condition has been transmitted ,
		// the TWINT Flag is set by hardware,
		// and the status code in TWSR will be $08
		while((!(TWCR &(1<<7))) && (TWSR != 0x08));
 cc4:	e6 e5       	ldi	r30, 0x56	; 86
 cc6:	f0 e0       	ldi	r31, 0x00	; 0
 cc8:	80 81       	ld	r24, Z
 cca:	88 23       	and	r24, r24
 ccc:	74 f0       	brlt	.+28     	; 0xcea <I2C_Master_RX+0x5e>
 cce:	e1 e2       	ldi	r30, 0x21	; 33
 cd0:	f0 e0       	ldi	r31, 0x00	; 0
 cd2:	80 81       	ld	r24, Z
 cd4:	88 30       	cpi	r24, 0x08	; 8
 cd6:	b1 f7       	brne	.-20     	; 0xcc4 <I2C_Master_RX+0x38>
 cd8:	08 c0       	rjmp	.+16     	; 0xcea <I2C_Master_RX+0x5e>
	}
	else if(S == reapted_start)
 cda:	89 85       	ldd	r24, Y+9	; 0x09
 cdc:	81 30       	cpi	r24, 0x01	; 1
 cde:	29 f4       	brne	.+10     	; 0xcea <I2C_Master_RX+0x5e>
	{
		// A repeated START condition has been transmitted
		while((TWSR != 0x10));
 ce0:	e1 e2       	ldi	r30, 0x21	; 33
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	80 81       	ld	r24, Z
 ce6:	80 31       	cpi	r24, 0x10	; 16
 ce8:	d9 f7       	brne	.-10     	; 0xce0 <I2C_Master_RX+0x54>
	}

	//writing SLA+W to TWDR
	TWDR = ((SLA<<1)|(1));
 cea:	e3 e2       	ldi	r30, 0x23	; 35
 cec:	f0 e0       	ldi	r31, 0x00	; 0
 cee:	8c 81       	ldd	r24, Y+4	; 0x04
 cf0:	88 2f       	mov	r24, r24
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	88 0f       	add	r24, r24
 cf6:	99 1f       	adc	r25, r25
 cf8:	81 60       	ori	r24, 0x01	; 1
 cfa:	80 83       	st	Z, r24

	// TWINT bit should be cleared (by writing it to one)
	TWCR = (1<<7)|(1<<2);
 cfc:	e6 e5       	ldi	r30, 0x56	; 86
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	84 e8       	ldi	r24, 0x84	; 132
 d02:	80 83       	st	Z, r24

	// SLA+R has been transmitted , ACK has been received
	while((TWSR != 0x40));
 d04:	e1 e2       	ldi	r30, 0x21	; 33
 d06:	f0 e0       	ldi	r31, 0x00	; 0
 d08:	80 81       	ld	r24, Z
 d0a:	80 34       	cpi	r24, 0x40	; 64
 d0c:	d9 f7       	brne	.-10     	; 0xd04 <I2C_Master_RX+0x78>

	uint8_t i ;
	for(i=0 ; i<Data_Length ; i++ )
 d0e:	19 82       	std	Y+1, r1	; 0x01
 d10:	18 c0       	rjmp	.+48     	; 0xd42 <I2C_Master_RX+0xb6>
	{
		//writing Data byte TWDR
		TWDR = Data[i];
 d12:	a3 e2       	ldi	r26, 0x23	; 35
 d14:	b0 e0       	ldi	r27, 0x00	; 0
 d16:	89 81       	ldd	r24, Y+1	; 0x01
 d18:	28 2f       	mov	r18, r24
 d1a:	30 e0       	ldi	r19, 0x00	; 0
 d1c:	8a 81       	ldd	r24, Y+2	; 0x02
 d1e:	9b 81       	ldd	r25, Y+3	; 0x03
 d20:	fc 01       	movw	r30, r24
 d22:	e2 0f       	add	r30, r18
 d24:	f3 1f       	adc	r31, r19
 d26:	80 81       	ld	r24, Z
 d28:	8c 93       	st	X, r24

		// TWINT bit should be cleared (by writing it to one)
		TWCR = (1<<7)|(1<<2)|(1<<6);
 d2a:	e6 e5       	ldi	r30, 0x56	; 86
 d2c:	f0 e0       	ldi	r31, 0x00	; 0
 d2e:	84 ec       	ldi	r24, 0xC4	; 196
 d30:	80 83       	st	Z, r24

		// Data byte has been received , ACK has been returned
		while((TWSR != 0x50));
 d32:	e1 e2       	ldi	r30, 0x21	; 33
 d34:	f0 e0       	ldi	r31, 0x00	; 0
 d36:	80 81       	ld	r24, Z
 d38:	80 35       	cpi	r24, 0x50	; 80
 d3a:	d9 f7       	brne	.-10     	; 0xd32 <I2C_Master_RX+0xa6>

	// SLA+R has been transmitted , ACK has been received
	while((TWSR != 0x40));

	uint8_t i ;
	for(i=0 ; i<Data_Length ; i++ )
 d3c:	89 81       	ldd	r24, Y+1	; 0x01
 d3e:	8f 5f       	subi	r24, 0xFF	; 255
 d40:	89 83       	std	Y+1, r24	; 0x01
 d42:	89 81       	ldd	r24, Y+1	; 0x01
 d44:	28 2f       	mov	r18, r24
 d46:	30 e0       	ldi	r19, 0x00	; 0
 d48:	40 e0       	ldi	r20, 0x00	; 0
 d4a:	50 e0       	ldi	r21, 0x00	; 0
 d4c:	8d 81       	ldd	r24, Y+5	; 0x05
 d4e:	9e 81       	ldd	r25, Y+6	; 0x06
 d50:	af 81       	ldd	r26, Y+7	; 0x07
 d52:	b8 85       	ldd	r27, Y+8	; 0x08
 d54:	28 17       	cp	r18, r24
 d56:	39 07       	cpc	r19, r25
 d58:	4a 07       	cpc	r20, r26
 d5a:	5b 07       	cpc	r21, r27
 d5c:	d0 f2       	brcs	.-76     	; 0xd12 <I2C_Master_RX+0x86>
		// Data byte has been received , ACK has been returned
		while((TWSR != 0x50));
	}

	// Set STOP Condition
	if(P == stop)
 d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
 d60:	88 23       	and	r24, r24
 d62:	21 f4       	brne	.+8      	; 0xd6c <I2C_Master_RX+0xe0>
	TWCR = (1<<7)|(1<<4)|(1<<2)|(1<<6) ;
 d64:	e6 e5       	ldi	r30, 0x56	; 86
 d66:	f0 e0       	ldi	r31, 0x00	; 0
 d68:	84 ed       	ldi	r24, 0xD4	; 212
 d6a:	80 83       	st	Z, r24
}
 d6c:	2a 96       	adiw	r28, 0x0a	; 10
 d6e:	0f b6       	in	r0, 0x3f	; 63
 d70:	f8 94       	cli
 d72:	de bf       	out	0x3e, r29	; 62
 d74:	0f be       	out	0x3f, r0	; 63
 d76:	cd bf       	out	0x3d, r28	; 61
 d78:	cf 91       	pop	r28
 d7a:	df 91       	pop	r29
 d7c:	0f 91       	pop	r16
 d7e:	ef 90       	pop	r14
 d80:	08 95       	ret

00000d82 <I2C_Slave_TX>:


void I2C_Slave_TX(uint8_t* Data)
{
 d82:	df 93       	push	r29
 d84:	cf 93       	push	r28
 d86:	00 d0       	rcall	.+0      	; 0xd88 <I2C_Slave_TX+0x6>
 d88:	cd b7       	in	r28, 0x3d	; 61
 d8a:	de b7       	in	r29, 0x3e	; 62
 d8c:	9a 83       	std	Y+2, r25	; 0x02
 d8e:	89 83       	std	Y+1, r24	; 0x01
	TWDR = *Data ;
 d90:	e3 e2       	ldi	r30, 0x23	; 35
 d92:	f0 e0       	ldi	r31, 0x00	; 0
 d94:	a9 81       	ldd	r26, Y+1	; 0x01
 d96:	ba 81       	ldd	r27, Y+2	; 0x02
 d98:	8c 91       	ld	r24, X
 d9a:	80 83       	st	Z, r24
}
 d9c:	0f 90       	pop	r0
 d9e:	0f 90       	pop	r0
 da0:	cf 91       	pop	r28
 da2:	df 91       	pop	r29
 da4:	08 95       	ret

00000da6 <I2C_Slave_RX>:
void I2C_Slave_RX(uint8_t* Data )
{
 da6:	df 93       	push	r29
 da8:	cf 93       	push	r28
 daa:	00 d0       	rcall	.+0      	; 0xdac <I2C_Slave_RX+0x6>
 dac:	cd b7       	in	r28, 0x3d	; 61
 dae:	de b7       	in	r29, 0x3e	; 62
 db0:	9a 83       	std	Y+2, r25	; 0x02
 db2:	89 83       	std	Y+1, r24	; 0x01
	*Data = TWDR ;
 db4:	e3 e2       	ldi	r30, 0x23	; 35
 db6:	f0 e0       	ldi	r31, 0x00	; 0
 db8:	80 81       	ld	r24, Z
 dba:	e9 81       	ldd	r30, Y+1	; 0x01
 dbc:	fa 81       	ldd	r31, Y+2	; 0x02
 dbe:	80 83       	st	Z, r24
}
 dc0:	0f 90       	pop	r0
 dc2:	0f 90       	pop	r0
 dc4:	cf 91       	pop	r28
 dc6:	df 91       	pop	r29
 dc8:	08 95       	ret

00000dca <__vector_19>:
// ISR FUNCTION PROTOTYPE  Two-wire Serial Interface

void __vector_19 (void) __attribute__ (( signal ));

void __vector_19(void)
{
 dca:	1f 92       	push	r1
 dcc:	0f 92       	push	r0
 dce:	0f b6       	in	r0, 0x3f	; 63
 dd0:	0f 92       	push	r0
 dd2:	11 24       	eor	r1, r1
 dd4:	2f 93       	push	r18
 dd6:	3f 93       	push	r19
 dd8:	4f 93       	push	r20
 dda:	5f 93       	push	r21
 ddc:	6f 93       	push	r22
 dde:	7f 93       	push	r23
 de0:	8f 93       	push	r24
 de2:	9f 93       	push	r25
 de4:	af 93       	push	r26
 de6:	bf 93       	push	r27
 de8:	ef 93       	push	r30
 dea:	ff 93       	push	r31
 dec:	df 93       	push	r29
 dee:	cf 93       	push	r28
 df0:	cd b7       	in	r28, 0x3d	; 61
 df2:	de b7       	in	r29, 0x3e	; 62
	// TWINT bit should be cleared (by writing it to one)
	TWCR = ((1<<7)|(1<<2)|(1<<6)|(1<<0));
 df4:	e6 e5       	ldi	r30, 0x56	; 86
 df6:	f0 e0       	ldi	r31, 0x00	; 0
 df8:	85 ec       	ldi	r24, 0xC5	; 197
 dfa:	80 83       	st	Z, r24
	if ((TWSR == 0X80))
 dfc:	e1 e2       	ldi	r30, 0x21	; 33
 dfe:	f0 e0       	ldi	r31, 0x00	; 0
 e00:	80 81       	ld	r24, Z
 e02:	80 38       	cpi	r24, 0x80	; 128
 e04:	39 f4       	brne	.+14     	; 0xe14 <__vector_19+0x4a>
		P_IRQ_CallBack(slave_RX);
 e06:	e0 91 66 00 	lds	r30, 0x0066
 e0a:	f0 91 67 00 	lds	r31, 0x0067
 e0e:	80 e0       	ldi	r24, 0x00	; 0
 e10:	09 95       	icall
 e12:	0b c0       	rjmp	.+22     	; 0xe2a <__vector_19+0x60>
	else if ((TWSR == 0XB8))
 e14:	e1 e2       	ldi	r30, 0x21	; 33
 e16:	f0 e0       	ldi	r31, 0x00	; 0
 e18:	80 81       	ld	r24, Z
 e1a:	88 3b       	cpi	r24, 0xB8	; 184
 e1c:	31 f4       	brne	.+12     	; 0xe2a <__vector_19+0x60>
		P_IRQ_CallBack(slave_TX);
 e1e:	e0 91 66 00 	lds	r30, 0x0066
 e22:	f0 91 67 00 	lds	r31, 0x0067
 e26:	81 e0       	ldi	r24, 0x01	; 1
 e28:	09 95       	icall
}
 e2a:	cf 91       	pop	r28
 e2c:	df 91       	pop	r29
 e2e:	ff 91       	pop	r31
 e30:	ef 91       	pop	r30
 e32:	bf 91       	pop	r27
 e34:	af 91       	pop	r26
 e36:	9f 91       	pop	r25
 e38:	8f 91       	pop	r24
 e3a:	7f 91       	pop	r23
 e3c:	6f 91       	pop	r22
 e3e:	5f 91       	pop	r21
 e40:	4f 91       	pop	r20
 e42:	3f 91       	pop	r19
 e44:	2f 91       	pop	r18
 e46:	0f 90       	pop	r0
 e48:	0f be       	out	0x3f, r0	; 63
 e4a:	0f 90       	pop	r0
 e4c:	1f 90       	pop	r1
 e4e:	18 95       	reti

00000e50 <I2C_IRQ_CallBack>:

// F_CPU of Device
#define F_CPU		8000000

void I2C_IRQ_CallBack(Slave_IRQ_State_t state)
{
 e50:	df 93       	push	r29
 e52:	cf 93       	push	r28
 e54:	0f 92       	push	r0
 e56:	cd b7       	in	r28, 0x3d	; 61
 e58:	de b7       	in	r29, 0x3e	; 62
 e5a:	89 83       	std	Y+1, r24	; 0x01
}
 e5c:	0f 90       	pop	r0
 e5e:	cf 91       	pop	r28
 e60:	df 91       	pop	r29
 e62:	08 95       	ret

00000e64 <main>:
int main()
{
 e64:	df 93       	push	r29
 e66:	cf 93       	push	r28
 e68:	cd b7       	in	r28, 0x3d	; 61
 e6a:	de b7       	in	r29, 0x3e	; 62
 e6c:	2a 97       	sbiw	r28, 0x0a	; 10
 e6e:	0f b6       	in	r0, 0x3f	; 63
 e70:	f8 94       	cli
 e72:	de bf       	out	0x3e, r29	; 62
 e74:	0f be       	out	0x3f, r0	; 63
 e76:	cd bf       	out	0x3d, r28	; 61
	I2C_init(0x48, I2C_Prescaler_1, I2C_IRQ_CallBack);
 e78:	28 e2       	ldi	r18, 0x28	; 40
 e7a:	37 e0       	ldi	r19, 0x07	; 7
 e7c:	68 e4       	ldi	r22, 0x48	; 72
 e7e:	70 e0       	ldi	r23, 0x00	; 0
 e80:	80 e0       	ldi	r24, 0x00	; 0
 e82:	90 e0       	ldi	r25, 0x00	; 0
 e84:	40 e0       	ldi	r20, 0x00	; 0
 e86:	0e 94 70 05 	call	0xae0	; 0xae0 <I2C_init>

	uint8_t data[5] = {1,2,3,4,5};
 e8a:	ce 01       	movw	r24, r28
 e8c:	01 96       	adiw	r24, 0x01	; 1
 e8e:	9f 83       	std	Y+7, r25	; 0x07
 e90:	8e 83       	std	Y+6, r24	; 0x06
 e92:	e0 e6       	ldi	r30, 0x60	; 96
 e94:	f0 e0       	ldi	r31, 0x00	; 0
 e96:	f9 87       	std	Y+9, r31	; 0x09
 e98:	e8 87       	std	Y+8, r30	; 0x08
 e9a:	f5 e0       	ldi	r31, 0x05	; 5
 e9c:	fa 87       	std	Y+10, r31	; 0x0a
 e9e:	e8 85       	ldd	r30, Y+8	; 0x08
 ea0:	f9 85       	ldd	r31, Y+9	; 0x09
 ea2:	00 80       	ld	r0, Z
 ea4:	88 85       	ldd	r24, Y+8	; 0x08
 ea6:	99 85       	ldd	r25, Y+9	; 0x09
 ea8:	01 96       	adiw	r24, 0x01	; 1
 eaa:	99 87       	std	Y+9, r25	; 0x09
 eac:	88 87       	std	Y+8, r24	; 0x08
 eae:	ee 81       	ldd	r30, Y+6	; 0x06
 eb0:	ff 81       	ldd	r31, Y+7	; 0x07
 eb2:	00 82       	st	Z, r0
 eb4:	8e 81       	ldd	r24, Y+6	; 0x06
 eb6:	9f 81       	ldd	r25, Y+7	; 0x07
 eb8:	01 96       	adiw	r24, 0x01	; 1
 eba:	9f 83       	std	Y+7, r25	; 0x07
 ebc:	8e 83       	std	Y+6, r24	; 0x06
 ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
 ec0:	91 50       	subi	r25, 0x01	; 1
 ec2:	9a 87       	std	Y+10, r25	; 0x0a
 ec4:	ea 85       	ldd	r30, Y+10	; 0x0a
 ec6:	ee 23       	and	r30, r30
 ec8:	51 f7       	brne	.-44     	; 0xe9e <main+0x3a>
	while(1)
	{
		I2C_Master_TX(data, Slave_Address, 5 );
 eca:	ce 01       	movw	r24, r28
 ecc:	01 96       	adiw	r24, 0x01	; 1
 ece:	60 ed       	ldi	r22, 0xD0	; 208
 ed0:	25 e0       	ldi	r18, 0x05	; 5
 ed2:	30 e0       	ldi	r19, 0x00	; 0
 ed4:	40 e0       	ldi	r20, 0x00	; 0
 ed6:	50 e0       	ldi	r21, 0x00	; 0
 ed8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <I2C_Master_TX>
 edc:	f6 cf       	rjmp	.-20     	; 0xeca <main+0x66>

00000ede <__udivmodsi4>:
 ede:	a1 e2       	ldi	r26, 0x21	; 33
 ee0:	1a 2e       	mov	r1, r26
 ee2:	aa 1b       	sub	r26, r26
 ee4:	bb 1b       	sub	r27, r27
 ee6:	fd 01       	movw	r30, r26
 ee8:	0d c0       	rjmp	.+26     	; 0xf04 <__udivmodsi4_ep>

00000eea <__udivmodsi4_loop>:
 eea:	aa 1f       	adc	r26, r26
 eec:	bb 1f       	adc	r27, r27
 eee:	ee 1f       	adc	r30, r30
 ef0:	ff 1f       	adc	r31, r31
 ef2:	a2 17       	cp	r26, r18
 ef4:	b3 07       	cpc	r27, r19
 ef6:	e4 07       	cpc	r30, r20
 ef8:	f5 07       	cpc	r31, r21
 efa:	20 f0       	brcs	.+8      	; 0xf04 <__udivmodsi4_ep>
 efc:	a2 1b       	sub	r26, r18
 efe:	b3 0b       	sbc	r27, r19
 f00:	e4 0b       	sbc	r30, r20
 f02:	f5 0b       	sbc	r31, r21

00000f04 <__udivmodsi4_ep>:
 f04:	66 1f       	adc	r22, r22
 f06:	77 1f       	adc	r23, r23
 f08:	88 1f       	adc	r24, r24
 f0a:	99 1f       	adc	r25, r25
 f0c:	1a 94       	dec	r1
 f0e:	69 f7       	brne	.-38     	; 0xeea <__udivmodsi4_loop>
 f10:	60 95       	com	r22
 f12:	70 95       	com	r23
 f14:	80 95       	com	r24
 f16:	90 95       	com	r25
 f18:	9b 01       	movw	r18, r22
 f1a:	ac 01       	movw	r20, r24
 f1c:	bd 01       	movw	r22, r26
 f1e:	cf 01       	movw	r24, r30
 f20:	08 95       	ret

00000f22 <_exit>:
 f22:	f8 94       	cli

00000f24 <__stop_program>:
 f24:	ff cf       	rjmp	.-2      	; 0xf24 <__stop_program>
