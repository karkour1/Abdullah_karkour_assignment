
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cbc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000dec  08000dec  00010dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000df4  08000df4  00010dfc  2**0
                  CONTENTS
  4 .ARM          00000000  08000df4  08000df4  00010dfc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000df4  08000dfc  00010dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000df8  08000df8  00010df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08000dfc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000dfc  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dfc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002016  00000000  00000000  00010e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006ee  00000000  00000000  00012e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009ac  00000000  00000000  00013529  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a0  00000000  00000000  00013ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000148  00000000  00000000  00014078  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000027fd  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000019f8  00000000  00000000  000169bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a0e4  00000000  00000000  000183b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022499  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000504  00000000  00000000  00022514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd4 	.word	0x08000dd4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000dd4 	.word	0x08000dd4

08000170 <MCAL_SPI_Init>:
 * @retval 		-none
 * Note			-Support for SPI Full duplex
 	 	 	 	-NSS  Controled by HW/SW .
 */
void MCAL_SPI_Init         (SPI_TypeDef* SPIx , SPI_Config_t* SPI_Cfg )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	// CLock Enable to SPI and Keep SPI configuration
	if (SPIx == SPI1)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4a46      	ldr	r2, [pc, #280]	; (8000298 <MCAL_SPI_Init+0x128>)
 800017e:	4293      	cmp	r3, r2
 8000180:	d109      	bne.n	8000196 <MCAL_SPI_Init+0x26>
	{
		G_SPI_Cfg[0] = SPI_Cfg ;
 8000182:	4a46      	ldr	r2, [pc, #280]	; (800029c <MCAL_SPI_Init+0x12c>)
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 8000188:	4b45      	ldr	r3, [pc, #276]	; (80002a0 <MCAL_SPI_Init+0x130>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a44      	ldr	r2, [pc, #272]	; (80002a0 <MCAL_SPI_Init+0x130>)
 800018e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	e00c      	b.n	80001b0 <MCAL_SPI_Init+0x40>
	}else if(SPIx == SPI2)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4a42      	ldr	r2, [pc, #264]	; (80002a4 <MCAL_SPI_Init+0x134>)
 800019a:	4293      	cmp	r3, r2
 800019c:	d108      	bne.n	80001b0 <MCAL_SPI_Init+0x40>
	{
		G_SPI_Cfg[1] = SPI_Cfg ;
 800019e:	4a3f      	ldr	r2, [pc, #252]	; (800029c <MCAL_SPI_Init+0x12c>)
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80001a4:	4b3e      	ldr	r3, [pc, #248]	; (80002a0 <MCAL_SPI_Init+0x130>)
 80001a6:	69db      	ldr	r3, [r3, #28]
 80001a8:	4a3d      	ldr	r2, [pc, #244]	; (80002a0 <MCAL_SPI_Init+0x130>)
 80001aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001ae:	61d3      	str	r3, [r2, #28]
	}

	// define the serial clock baud rate SPI_CR1 Bits 5:3 BR[2:0]: Baud rate control
	SPIx->SPI_CR1 |= SPI_Cfg->baud_rate_prescalers ;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	683a      	ldr	r2, [r7, #0]
 80001b6:	8912      	ldrh	r2, [r2, #8]
 80001b8:	431a      	orrs	r2, r3
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	601a      	str	r2, [r3, #0]

	// Data Size SPI_CR1 Bit 11 DFF: Data frame format
	SPIx->SPI_CR1 |= SPI_Cfg->Data_Size ;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	683a      	ldr	r2, [r7, #0]
 80001c4:	8892      	ldrh	r2, [r2, #4]
 80001c6:	431a      	orrs	r2, r3
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	601a      	str	r2, [r3, #0]

	// Frame Fromat SPI_CR1 Bit 7 LSBFIRST: Frame format
	SPIx->SPI_CR1 |= SPI_Cfg->Frame_Format ;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	683a      	ldr	r2, [r7, #0]
 80001d2:	88d2      	ldrh	r2, [r2, #6]
 80001d4:	431a      	orrs	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	601a      	str	r2, [r3, #0]

	// Clock polarity SPI_CR1 Bit1 CPOL: Clock polarity
	SPIx->SPI_CR1 |= SPI_Cfg->clock_polarity ;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	8992      	ldrh	r2, [r2, #12]
 80001e2:	431a      	orrs	r2, r3
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	601a      	str	r2, [r3, #0]

	// Clock phase SPI_CR1 Bit 0 CPHA: Clock phase
	SPIx->SPI_CR1 |= SPI_Cfg->clock_phase;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	89d2      	ldrh	r2, [r2, #14]
 80001f0:	431a      	orrs	r2, r3
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]

	// NSS Specifies Hardware or software slave select management
	// HW : SPI_CR2 Bit 2 SSOE: SS output enable
	if((SPI_Cfg->NSS == SPI_NSS_HW_Master_SS_output_disabled) ||(SPI_Cfg->NSS == SPI_NSS_HW_Master_SS_output_enabled))
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	895b      	ldrh	r3, [r3, #10]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d003      	beq.n	8000206 <MCAL_SPI_Init+0x96>
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	895b      	ldrh	r3, [r3, #10]
 8000202:	2b04      	cmp	r3, #4
 8000204:	d107      	bne.n	8000216 <MCAL_SPI_Init+0xa6>
	{
		SPIx->SPI_CR2 |= SPI_Cfg->NSS ;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	8952      	ldrh	r2, [r2, #10]
 800020e:	431a      	orrs	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	e006      	b.n	8000224 <MCAL_SPI_Init+0xb4>
	}else // SW : SPI_CR1 Bit 9 SSM: Software slave management Bit 8 SSI: Internal slave select
	{
		SPIx->SPI_CR1 |= SPI_Cfg->NSS ;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	8952      	ldrh	r2, [r2, #10]
 800021e:	431a      	orrs	r2, r3
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	601a      	str	r2, [r3, #0]
	}

	// IRQ Enable SPI_CR2 (Bit 5 ERRIE: Error interrupt enable , Bit 6 RXNEIE: RX buffer not empty interrupt enable , Bit 7 TXEIE: Tx buffer empty interrupt enable )
	if (SPI_Cfg->IRQ_Enable != SPI_IRQ_Enable_NONE)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	8a1b      	ldrh	r3, [r3, #16]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d01b      	beq.n	8000264 <MCAL_SPI_Init+0xf4>
	{
		SPIx->SPI_CR2 |= SPI_Cfg->IRQ_Enable;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	8a12      	ldrh	r2, [r2, #16]
 8000234:	431a      	orrs	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	605a      	str	r2, [r3, #4]

		// Enable NVIC
		if (SPIx == SPI1)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <MCAL_SPI_Init+0x128>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d106      	bne.n	8000250 <MCAL_SPI_Init+0xe0>
		{
			NVIC_IRQ35_SPI1_ENABLE;
 8000242:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <MCAL_SPI_Init+0x138>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <MCAL_SPI_Init+0x138>)
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	6013      	str	r3, [r2, #0]
 800024e:	e009      	b.n	8000264 <MCAL_SPI_Init+0xf4>

		}else if(SPIx == SPI2)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4a14      	ldr	r2, [pc, #80]	; (80002a4 <MCAL_SPI_Init+0x134>)
 8000254:	4293      	cmp	r3, r2
 8000256:	d105      	bne.n	8000264 <MCAL_SPI_Init+0xf4>
		{
			NVIC_IRQ36_SPI2_ENABLE;
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <MCAL_SPI_Init+0x138>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <MCAL_SPI_Init+0x138>)
 800025e:	f043 0310 	orr.w	r3, r3, #16
 8000262:	6013      	str	r3, [r2, #0]
		}
	}

	// Communication Mode SPI_CR1 (Bit 10 RXONLY: Receive only , Bit 14 BIDIOE: Output enable in bidirectional mode , Bit 15 BIDIMODE: Bidirectional data mode enable)
	SPIx->SPI_CR1 |= SPI_Cfg->Communication_Mode ;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	683a      	ldr	r2, [r7, #0]
 800026a:	8852      	ldrh	r2, [r2, #2]
 800026c:	431a      	orrs	r2, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]

	// Master or Slave SPI_CR1 Bit 2 MSTR: Master selection
	SPIx->SPI_CR1 |= SPI_Cfg->Dvice_Mode ;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	8812      	ldrh	r2, [r2, #0]
 800027a:	431a      	orrs	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	601a      	str	r2, [r3, #0]

	// Enable SPI Bit 6 SPE: SPI enable
	SPIx->SPI_CR1 |=(1<<6);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	601a      	str	r2, [r3, #0]

}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40013000 	.word	0x40013000
 800029c:	2000001c 	.word	0x2000001c
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40003800 	.word	0x40003800
 80002a8:	e000e104 	.word	0xe000e104

080002ac <MCAL_SPI_GPIO_Set_Pins>:
 * @param [in] 		-SPIx: where x can be (1...3 depending on SPI used) to select the SPI peripheral
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_SPI_Init()
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef* SPIx )
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;
	if (SPIx == SPI1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a8f      	ldr	r2, [pc, #572]	; (80004f4 <MCAL_SPI_GPIO_Set_Pins+0x248>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	f040 808a 	bne.w	80003d2 <MCAL_SPI_GPIO_Set_Pins+0x126>
		// SCK >>> PA5
		// MISO >> PA6
		// MOSI >> PA7

		// Master
		if (G_SPI_Cfg[0]->Dvice_Mode == SPI_Dvice_Mode_Master )
 80002be:	4b8e      	ldr	r3, [pc, #568]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	d148      	bne.n	800035a <MCAL_SPI_GPIO_Set_Pins+0xae>
		{
			// NSS
			if(G_SPI_Cfg[0]->NSS == SPI_NSS_HW_Master_SS_output_disabled)
 80002c8:	4b8b      	ldr	r3, [pc, #556]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	895b      	ldrh	r3, [r3, #10]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d10a      	bne.n	80002e8 <MCAL_SPI_GPIO_Set_Pins+0x3c>
			{
				// NSS >> Input floating/ Input pull-up / Input pull-down
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80002d6:	2301      	movs	r3, #1
 80002d8:	737b      	strb	r3, [r7, #13]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	4619      	mov	r1, r3
 80002e0:	4886      	ldr	r0, [pc, #536]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 80002e2:	f000 fbf3 	bl	8000acc <MCAL_GPIO_Init>
 80002e6:	e010      	b.n	800030a <MCAL_SPI_GPIO_Set_Pins+0x5e>

			}else if(G_SPI_Cfg[0]->NSS == SPI_NSS_HW_Master_SS_output_enabled)
 80002e8:	4b83      	ldr	r3, [pc, #524]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	895b      	ldrh	r3, [r3, #10]
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	d10b      	bne.n	800030a <MCAL_SPI_GPIO_Set_Pins+0x5e>
			{
				// NSS >> Alternate function push-pull
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80002f2:	2304      	movs	r3, #4
 80002f4:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80002f6:	2306      	movs	r3, #6
 80002f8:	737b      	strb	r3, [r7, #13]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002fa:	2301      	movs	r3, #1
 80002fc:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80002fe:	f107 030c 	add.w	r3, r7, #12
 8000302:	4619      	mov	r1, r3
 8000304:	487d      	ldr	r0, [pc, #500]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 8000306:	f000 fbe1 	bl	8000acc <MCAL_GPIO_Init>
			}

			// SCK >> Alternate function push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800030a:	2305      	movs	r3, #5
 800030c:	733b      	strb	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800030e:	2306      	movs	r3, #6
 8000310:	737b      	strb	r3, [r7, #13]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000312:	2301      	movs	r3, #1
 8000314:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	4619      	mov	r1, r3
 800031c:	4877      	ldr	r0, [pc, #476]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 800031e:	f000 fbd5 	bl	8000acc <MCAL_GPIO_Init>

			// MISO , Full duplex / master Input floating / Input pull-up
			//		  Simplex bidirectional data wire / master Not used. Can be used as a GPIO
			if(G_SPI_Cfg[0]->Communication_Mode == SPI_Communication_Mode_2line_Full_duplex)
 8000322:	4b75      	ldr	r3, [pc, #468]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	885b      	ldrh	r3, [r3, #2]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d109      	bne.n	8000340 <MCAL_SPI_GPIO_Set_Pins+0x94>
			{
				PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800032c:	2306      	movs	r3, #6
 800032e:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000330:	2301      	movs	r3, #1
 8000332:	737b      	strb	r3, [r7, #13]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000334:	f107 030c 	add.w	r3, r7, #12
 8000338:	4619      	mov	r1, r3
 800033a:	4870      	ldr	r0, [pc, #448]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 800033c:	f000 fbc6 	bl	8000acc <MCAL_GPIO_Init>
			}

			// MOSI , Full duplex / master Alternate function push-pull
			//		  Simplex bidirectional data wire / master Alternate function push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000340:	2307      	movs	r3, #7
 8000342:	733b      	strb	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000344:	2306      	movs	r3, #6
 8000346:	737b      	strb	r3, [r7, #13]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000348:	2301      	movs	r3, #1
 800034a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800034c:	f107 030c 	add.w	r3, r7, #12
 8000350:	4619      	mov	r1, r3
 8000352:	486a      	ldr	r0, [pc, #424]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 8000354:	f000 fbba 	bl	8000acc <MCAL_GPIO_Init>
			}

		}

	}
}
 8000358:	e0c7      	b.n	80004ea <MCAL_SPI_GPIO_Set_Pins+0x23e>
		else if (G_SPI_Cfg[0]->Dvice_Mode == SPI_Dvice_Mode_Slave )
 800035a:	4b67      	ldr	r3, [pc, #412]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	f040 80c2 	bne.w	80004ea <MCAL_SPI_GPIO_Set_Pins+0x23e>
			if(G_SPI_Cfg[0]->NSS == SPI_NSS_HW_Slave)
 8000366:	4b64      	ldr	r3, [pc, #400]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	895b      	ldrh	r3, [r3, #10]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d109      	bne.n	8000384 <MCAL_SPI_GPIO_Set_Pins+0xd8>
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000370:	2304      	movs	r3, #4
 8000372:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000374:	2301      	movs	r3, #1
 8000376:	737b      	strb	r3, [r7, #13]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	4619      	mov	r1, r3
 800037e:	485f      	ldr	r0, [pc, #380]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 8000380:	f000 fba4 	bl	8000acc <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000384:	2305      	movs	r3, #5
 8000386:	733b      	strb	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000388:	2301      	movs	r3, #1
 800038a:	737b      	strb	r3, [r7, #13]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	4619      	mov	r1, r3
 8000392:	485a      	ldr	r0, [pc, #360]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 8000394:	f000 fb9a 	bl	8000acc <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000398:	2306      	movs	r3, #6
 800039a:	733b      	strb	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800039c:	2306      	movs	r3, #6
 800039e:	737b      	strb	r3, [r7, #13]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003a0:	2301      	movs	r3, #1
 80003a2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	4619      	mov	r1, r3
 80003aa:	4854      	ldr	r0, [pc, #336]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 80003ac:	f000 fb8e 	bl	8000acc <MCAL_GPIO_Init>
			if(G_SPI_Cfg[0]->Communication_Mode == SPI_Communication_Mode_2line_Full_duplex)
 80003b0:	4b51      	ldr	r3, [pc, #324]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	885b      	ldrh	r3, [r3, #2]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	f040 8097 	bne.w	80004ea <MCAL_SPI_GPIO_Set_Pins+0x23e>
				PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80003bc:	2307      	movs	r3, #7
 80003be:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80003c0:	2301      	movs	r3, #1
 80003c2:	737b      	strb	r3, [r7, #13]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80003c4:	f107 030c 	add.w	r3, r7, #12
 80003c8:	4619      	mov	r1, r3
 80003ca:	484c      	ldr	r0, [pc, #304]	; (80004fc <MCAL_SPI_GPIO_Set_Pins+0x250>)
 80003cc:	f000 fb7e 	bl	8000acc <MCAL_GPIO_Init>
}
 80003d0:	e08b      	b.n	80004ea <MCAL_SPI_GPIO_Set_Pins+0x23e>
	}else if (SPIx == SPI2)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a4a      	ldr	r2, [pc, #296]	; (8000500 <MCAL_SPI_GPIO_Set_Pins+0x254>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	f040 8087 	bne.w	80004ea <MCAL_SPI_GPIO_Set_Pins+0x23e>
		if (G_SPI_Cfg[1]->Dvice_Mode == SPI_Dvice_Mode_Master )
 80003dc:	4b46      	ldr	r3, [pc, #280]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	d148      	bne.n	8000478 <MCAL_SPI_GPIO_Set_Pins+0x1cc>
			if(G_SPI_Cfg[1]->NSS == SPI_NSS_HW_Master_SS_output_disabled)
 80003e6:	4b44      	ldr	r3, [pc, #272]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	895b      	ldrh	r3, [r3, #10]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d10a      	bne.n	8000406 <MCAL_SPI_GPIO_Set_Pins+0x15a>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80003f0:	230c      	movs	r3, #12
 80003f2:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80003f4:	2301      	movs	r3, #1
 80003f6:	737b      	strb	r3, [r7, #13]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	4841      	ldr	r0, [pc, #260]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 8000400:	f000 fb64 	bl	8000acc <MCAL_GPIO_Init>
 8000404:	e010      	b.n	8000428 <MCAL_SPI_GPIO_Set_Pins+0x17c>
			}else if(G_SPI_Cfg[1]->NSS == SPI_NSS_HW_Master_SS_output_enabled)
 8000406:	4b3c      	ldr	r3, [pc, #240]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	895b      	ldrh	r3, [r3, #10]
 800040c:	2b04      	cmp	r3, #4
 800040e:	d10b      	bne.n	8000428 <MCAL_SPI_GPIO_Set_Pins+0x17c>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000410:	230c      	movs	r3, #12
 8000412:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000414:	2306      	movs	r3, #6
 8000416:	737b      	strb	r3, [r7, #13]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000418:	2301      	movs	r3, #1
 800041a:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	4619      	mov	r1, r3
 8000422:	4838      	ldr	r0, [pc, #224]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 8000424:	f000 fb52 	bl	8000acc <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000428:	230d      	movs	r3, #13
 800042a:	733b      	strb	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800042c:	2306      	movs	r3, #6
 800042e:	737b      	strb	r3, [r7, #13]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000430:	2301      	movs	r3, #1
 8000432:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	4619      	mov	r1, r3
 800043a:	4832      	ldr	r0, [pc, #200]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 800043c:	f000 fb46 	bl	8000acc <MCAL_GPIO_Init>
			if(G_SPI_Cfg[1]->Communication_Mode == SPI_Communication_Mode_2line_Full_duplex)
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	885b      	ldrh	r3, [r3, #2]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d109      	bne.n	800045e <MCAL_SPI_GPIO_Set_Pins+0x1b2>
				PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 800044a:	230e      	movs	r3, #14
 800044c:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800044e:	2301      	movs	r3, #1
 8000450:	737b      	strb	r3, [r7, #13]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	4619      	mov	r1, r3
 8000458:	482a      	ldr	r0, [pc, #168]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 800045a:	f000 fb37 	bl	8000acc <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800045e:	230f      	movs	r3, #15
 8000460:	733b      	strb	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000462:	2306      	movs	r3, #6
 8000464:	737b      	strb	r3, [r7, #13]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000466:	2301      	movs	r3, #1
 8000468:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	4619      	mov	r1, r3
 8000470:	4824      	ldr	r0, [pc, #144]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 8000472:	f000 fb2b 	bl	8000acc <MCAL_GPIO_Init>
}
 8000476:	e038      	b.n	80004ea <MCAL_SPI_GPIO_Set_Pins+0x23e>
		else if (G_SPI_Cfg[1]->Dvice_Mode == SPI_Dvice_Mode_Slave )
 8000478:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d133      	bne.n	80004ea <MCAL_SPI_GPIO_Set_Pins+0x23e>
			if(G_SPI_Cfg[0]->NSS == SPI_NSS_HW_Slave)
 8000482:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	895b      	ldrh	r3, [r3, #10]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d109      	bne.n	80004a0 <MCAL_SPI_GPIO_Set_Pins+0x1f4>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 800048c:	230c      	movs	r3, #12
 800048e:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000490:	2301      	movs	r3, #1
 8000492:	737b      	strb	r3, [r7, #13]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	4619      	mov	r1, r3
 800049a:	481a      	ldr	r0, [pc, #104]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 800049c:	f000 fb16 	bl	8000acc <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80004a0:	230d      	movs	r3, #13
 80004a2:	733b      	strb	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80004a4:	2301      	movs	r3, #1
 80004a6:	737b      	strb	r3, [r7, #13]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80004a8:	f107 030c 	add.w	r3, r7, #12
 80004ac:	4619      	mov	r1, r3
 80004ae:	4815      	ldr	r0, [pc, #84]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 80004b0:	f000 fb0c 	bl	8000acc <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80004b4:	230e      	movs	r3, #14
 80004b6:	733b      	strb	r3, [r7, #12]
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80004b8:	2306      	movs	r3, #6
 80004ba:	737b      	strb	r3, [r7, #13]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004bc:	2301      	movs	r3, #1
 80004be:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	4619      	mov	r1, r3
 80004c6:	480f      	ldr	r0, [pc, #60]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 80004c8:	f000 fb00 	bl	8000acc <MCAL_GPIO_Init>
			if(G_SPI_Cfg[1]->Communication_Mode == SPI_Communication_Mode_2line_Full_duplex)
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <MCAL_SPI_GPIO_Set_Pins+0x24c>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	885b      	ldrh	r3, [r3, #2]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d109      	bne.n	80004ea <MCAL_SPI_GPIO_Set_Pins+0x23e>
				PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80004d6:	230f      	movs	r3, #15
 80004d8:	733b      	strb	r3, [r7, #12]
				PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80004da:	2301      	movs	r3, #1
 80004dc:	737b      	strb	r3, [r7, #13]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4619      	mov	r1, r3
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <MCAL_SPI_GPIO_Set_Pins+0x258>)
 80004e6:	f000 faf1 	bl	8000acc <MCAL_GPIO_Init>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40013000 	.word	0x40013000
 80004f8:	2000001c 	.word	0x2000001c
 80004fc:	40010800 	.word	0x40010800
 8000500:	40003800 	.word	0x40003800
 8000504:	40010c00 	.word	0x40010c00

08000508 <MCAL_SPI_Send_Data>:
 * @param [in]  -PollingEn   Enable pooling or disable it
 * @retval 		-none
 * Note			-none
 */
void MCAL_SPI_Send_Data   (SPI_TypeDef* SPIx  , uint16_t* PTxBuffer ,polling_mechnisem_t pollingEn )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	4613      	mov	r3, r2
 8000514:	71fb      	strb	r3, [r7, #7]
	if (pollingEn == SPI_enable)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d106      	bne.n	800052a <MCAL_SPI_Send_Data+0x22>
		while(!((SPIx->SPI_SR) &(1<<1))); // Tx buffer not empty
 800051c:	bf00      	nop
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <MCAL_SPI_Send_Data+0x16>

	SPIx->SPI_DR = *PTxBuffer ;
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	60da      	str	r2, [r3, #12]
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <MCAL_SPI_Receive_Data>:
 * @param [in]  -PollingEn   Enable pooling or disable it
 * @retval 		-none
 * Note			-none
 */
void MCAL_SPI_Receive_Data(SPI_TypeDef* SPIx  , uint16_t* PRxBuffer ,polling_mechnisem_t pollingEn )
{
 800053e:	b480      	push	{r7}
 8000540:	b085      	sub	sp, #20
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	4613      	mov	r3, r2
 800054a:	71fb      	strb	r3, [r7, #7]
	if (pollingEn == SPI_enable)
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d106      	bne.n	8000560 <MCAL_SPI_Receive_Data+0x22>
		while(!((SPIx->SPI_SR) &(1))); //  Rx buffer empty
 8000552:	bf00      	nop
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f9      	beq.n	8000554 <MCAL_SPI_Receive_Data+0x16>

	*PRxBuffer = SPIx->SPI_DR ;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	b29a      	uxth	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	801a      	strh	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <MCAL_SPI_TX_RX>:
 * @param [in]  -PollingEn   Enable pooling or disable it
 * @retval 		-none
 * Note			-none
 */
void MCAL_SPI_TX_RX       (SPI_TypeDef* SPIx  , uint16_t* PTxBuffer ,polling_mechnisem_t pollingEn )
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	4613      	mov	r3, r2
 8000580:	71fb      	strb	r3, [r7, #7]
	// Send Data
	MCAL_SPI_Send_Data(SPIx, PTxBuffer, pollingEn);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	461a      	mov	r2, r3
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f7ff ffbd 	bl	8000508 <MCAL_SPI_Send_Data>

	// Receive Data
	MCAL_SPI_Receive_Data(SPIx, PTxBuffer, pollingEn);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	461a      	mov	r2, r3
 8000592:	68b9      	ldr	r1, [r7, #8]
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f7ff ffd2 	bl	800053e <MCAL_SPI_Receive_Data>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <SPI1_IRQHandler>:
* 					IRQ
* ===============================================
*/

void SPI1_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	S_IRQ_SRC IRQ_src ;

	IRQ_src.TXE =  (((SPI1->SPI_CR2)>>1)&1);
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <SPI1_IRQHandler+0x54>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	085b      	lsrs	r3, r3, #1
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	793b      	ldrb	r3, [r7, #4]
 80005b8:	f362 0300 	bfi	r3, r2, #0, #1
 80005bc:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE = (((SPI1->SPI_CR2)>>0)&1);
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <SPI1_IRQHandler+0x54>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	793b      	ldrb	r3, [r7, #4]
 80005ca:	f362 0341 	bfi	r3, r2, #1, #1
 80005ce:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI = (((SPI1->SPI_CR2)>>4)&1);;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <SPI1_IRQHandler+0x54>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	091b      	lsrs	r3, r3, #4
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	793b      	ldrb	r3, [r7, #4]
 80005de:	f362 0382 	bfi	r3, r2, #2, #1
 80005e2:	713b      	strb	r3, [r7, #4]

	G_SPI_Cfg[0]->P_IRQ_CallBack(IRQ_src);
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SPI1_IRQHandler+0x58>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	7938      	ldrb	r0, [r7, #4]
 80005ec:	4798      	blx	r3
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40013000 	.word	0x40013000
 80005fc:	2000001c 	.word	0x2000001c

08000600 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	S_IRQ_SRC IRQ_src ;

	IRQ_src.TXE =  (((SPI2->SPI_SR)>>1)&1);
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <SPI2_IRQHandler+0x54>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	085b      	lsrs	r3, r3, #1
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	793b      	ldrb	r3, [r7, #4]
 8000614:	f362 0300 	bfi	r3, r2, #0, #1
 8000618:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE = (((SPI2->SPI_SR)>>0)&1);
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <SPI2_IRQHandler+0x54>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	f362 0341 	bfi	r3, r2, #1, #1
 800062a:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI = (((SPI2->SPI_SR)>>4)&1);
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <SPI2_IRQHandler+0x54>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	b2da      	uxtb	r2, r3
 8000638:	793b      	ldrb	r3, [r7, #4]
 800063a:	f362 0382 	bfi	r3, r2, #2, #1
 800063e:	713b      	strb	r3, [r7, #4]

	G_SPI_Cfg[1]->P_IRQ_CallBack(IRQ_src);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <SPI2_IRQHandler+0x58>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	7938      	ldrb	r0, [r7, #4]
 8000648:	4798      	blx	r3
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40003800 	.word	0x40003800
 8000658:	2000001c 	.word	0x2000001c

0800065c <MCAL_RCC_GET_SYSCLK_Freq>:
 * =======================================================================================
 * 									APIS
 * =======================================================================================
 */
uint32_t MCAL_RCC_GET_SYSCLK_Freq()
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable
*/
	switch(((RCC->CFGR)>>2)& 0b11)
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MCAL_RCC_GET_SYSCLK_Freq+0x30>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	2b01      	cmp	r3, #1
 800066c:	d006      	beq.n	800067c <MCAL_RCC_GET_SYSCLK_Freq+0x20>
 800066e:	2b01      	cmp	r3, #1
 8000670:	d302      	bcc.n	8000678 <MCAL_RCC_GET_SYSCLK_Freq+0x1c>
 8000672:	2b02      	cmp	r3, #2
 8000674:	d004      	beq.n	8000680 <MCAL_RCC_GET_SYSCLK_Freq+0x24>
 8000676:	e005      	b.n	8000684 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <MCAL_RCC_GET_SYSCLK_Freq+0x34>)
 800067a:	e003      	b.n	8000684 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	case 1:

		//to do need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MCAL_RCC_GET_SYSCLK_Freq+0x38>)
 800067e:	e001      	b.n	8000684 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	case 2:

		//to do need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <MCAL_RCC_GET_SYSCLK_Freq+0x38>)
 8000682:	e7ff      	b.n	8000684 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	}
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000
 8000690:	007a1200 	.word	0x007a1200
 8000694:	00f42400 	.word	0x00f42400

08000698 <MCAL_RCC_GET_PCLK1_Freq>:
uint32_t MCAL_RCC_GET_HCLK_Freq()
{
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> AHBPrescTable[(((RCC->CFGR)>>4)& 0xF)]);
}
uint32_t MCAL_RCC_GET_PCLK1_Freq()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> APBPrescTable[(((RCC->CFGR)>>8)& 0b111)]);
 800069c:	f7ff ffde 	bl	800065c <MCAL_RCC_GET_SYSCLK_Freq>
 80006a0:	4601      	mov	r1, r0
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MCAL_RCC_GET_PCLK1_Freq+0x20>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	f003 0307 	and.w	r3, r3, #7
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <MCAL_RCC_GET_PCLK1_Freq+0x24>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	08000dec 	.word	0x08000dec

080006c0 <MCAL_RCC_GET_PCLK2_Freq>:
uint32_t MCAL_RCC_GET_PCLK2_Freq()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> APBPrescTable[(((RCC->CFGR)>>11)& 0b111)]);
 80006c4:	f7ff ffca 	bl	800065c <MCAL_RCC_GET_SYSCLK_Freq>
 80006c8:	4601      	mov	r1, r0
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <MCAL_RCC_GET_PCLK2_Freq+0x20>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	0adb      	lsrs	r3, r3, #11
 80006d0:	f003 0307 	and.w	r3, r3, #7
 80006d4:	4a03      	ldr	r2, [pc, #12]	; (80006e4 <MCAL_RCC_GET_PCLK2_Freq+0x24>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006dc:	4618      	mov	r0, r3
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	08000dec 	.word	0x08000dec

080006e8 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_PinConfig_t* UART_Config)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
	uint32_t pclk ;

	//	enable the Clock for given USART peripheral
	if(USARTx == USART1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a4d      	ldr	r2, [pc, #308]	; (800082c <MCAL_UART_Init+0x144>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d109      	bne.n	800070e <MCAL_UART_Init+0x26>
	{
		G_UART_Config[0]= UART_Config ;
 80006fa:	4a4d      	ldr	r2, [pc, #308]	; (8000830 <MCAL_UART_Init+0x148>)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	6013      	str	r3, [r2, #0]
		RCC_USART1_CLK_EN();
 8000700:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <MCAL_UART_Init+0x14c>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a4b      	ldr	r2, [pc, #300]	; (8000834 <MCAL_UART_Init+0x14c>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	e01a      	b.n	8000744 <MCAL_UART_Init+0x5c>

	}else if(USARTx == USART2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a49      	ldr	r2, [pc, #292]	; (8000838 <MCAL_UART_Init+0x150>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d109      	bne.n	800072a <MCAL_UART_Init+0x42>
	{
		G_UART_Config[1]= UART_Config ;
 8000716:	4a46      	ldr	r2, [pc, #280]	; (8000830 <MCAL_UART_Init+0x148>)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	6053      	str	r3, [r2, #4]
		RCC_USART2_CLK_EN();
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <MCAL_UART_Init+0x14c>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4a44      	ldr	r2, [pc, #272]	; (8000834 <MCAL_UART_Init+0x14c>)
 8000722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000726:	61d3      	str	r3, [r2, #28]
 8000728:	e00c      	b.n	8000744 <MCAL_UART_Init+0x5c>

	}else if(USARTx == USART3)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a43      	ldr	r2, [pc, #268]	; (800083c <MCAL_UART_Init+0x154>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d108      	bne.n	8000744 <MCAL_UART_Init+0x5c>
	{
		G_UART_Config[2]= UART_Config ;
 8000732:	4a3f      	ldr	r2, [pc, #252]	; (8000830 <MCAL_UART_Init+0x148>)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	6093      	str	r3, [r2, #8]
		RCC_USART3_CLK_EN();
 8000738:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <MCAL_UART_Init+0x14c>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	4a3d      	ldr	r2, [pc, #244]	; (8000834 <MCAL_UART_Init+0x14c>)
 800073e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000742:	61d3      	str	r3, [r2, #28]
	}

	//  Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= (1<<13);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	60da      	str	r2, [r3, #12]

	//	Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->Mode ;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60da      	str	r2, [r3, #12]

	// PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	7a12      	ldrb	r2, [r2, #8]
 8000766:	431a      	orrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	7a52      	ldrb	r2, [r2, #9]
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	7a92      	ldrb	r2, [r2, #10]
 8000782:	431a      	orrs	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	7ad2      	ldrb	r2, [r2, #11]
 8000790:	431a      	orrs	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a24      	ldr	r2, [pc, #144]	; (800082c <MCAL_UART_Init+0x144>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d103      	bne.n	80007a6 <MCAL_UART_Init+0xbe>
	{
		pclk = MCAL_RCC_GET_PCLK1_Freq();
 800079e:	f7ff ff7b 	bl	8000698 <MCAL_RCC_GET_PCLK1_Freq>
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	e002      	b.n	80007ac <MCAL_UART_Init+0xc4>
	}
	else
	{
		pclk = MCAL_RCC_GET_PCLK2_Freq();
 80007a6:	f7ff ff8b 	bl	80006c0 <MCAL_RCC_GET_PCLK2_Freq>
 80007aa:	60f8      	str	r0, [r7, #12]
	}

	USARTx->BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	091b      	lsrs	r3, r3, #4
 80007b8:	011a      	lsls	r2, r3, #4
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	68f9      	ldr	r1, [r7, #12]
 80007c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80007c4:	f003 030f 	and.w	r3, r3, #15
 80007c8:	431a      	orrs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	7b1b      	ldrb	r3, [r3, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d026      	beq.n	8000824 <MCAL_UART_Init+0x13c>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	7b12      	ldrb	r2, [r2, #12]
 80007de:	431a      	orrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <MCAL_UART_Init+0x144>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <MCAL_UART_Init+0x112>
			NVIC_IRQ37_USART1_ENABLE ;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MCAL_UART_Init+0x158>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <MCAL_UART_Init+0x158>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_ENABLE ;

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_ENABLE ;
	}
}
 80007f8:	e014      	b.n	8000824 <MCAL_UART_Init+0x13c>
		else if ( USARTx == USART2 )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <MCAL_UART_Init+0x150>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d106      	bne.n	8000810 <MCAL_UART_Init+0x128>
			NVIC_IRQ38_USART2_ENABLE ;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MCAL_UART_Init+0x158>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <MCAL_UART_Init+0x158>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	e009      	b.n	8000824 <MCAL_UART_Init+0x13c>
		else if ( USARTx == USART3 )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <MCAL_UART_Init+0x154>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d105      	bne.n	8000824 <MCAL_UART_Init+0x13c>
			NVIC_IRQ39_USART3_ENABLE ;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MCAL_UART_Init+0x158>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a08      	ldr	r2, [pc, #32]	; (8000840 <MCAL_UART_Init+0x158>)
 800081e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40013800 	.word	0x40013800
 8000830:	20000024 	.word	0x20000024
 8000834:	40021000 	.word	0x40021000
 8000838:	40004400 	.word	0x40004400
 800083c:	40004800 	.word	0x40004800
 8000840:	e000e104 	.word	0xe000e104

08000844 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <MCAL_UART_GPIO_Set_Pins+0xb0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d116      	bne.n	8000882 <MCAL_UART_GPIO_Set_Pins+0x3e>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000854:	2309      	movs	r3, #9
 8000856:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000858:	2306      	movs	r3, #6
 800085a:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800085c:	2301      	movs	r3, #1
 800085e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4824      	ldr	r0, [pc, #144]	; (80008f8 <MCAL_UART_GPIO_Set_Pins+0xb4>)
 8000868:	f000 f930 	bl	8000acc <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800086c:	230a      	movs	r3, #10
 800086e:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000870:	2308      	movs	r3, #8
 8000872:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	481f      	ldr	r0, [pc, #124]	; (80008f8 <MCAL_UART_GPIO_Set_Pins+0xb4>)
 800087c:	f000 f926 	bl	8000acc <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8000880:	e034      	b.n	80008ec <MCAL_UART_GPIO_Set_Pins+0xa8>
	else if ( USARTx == USART2 )
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d116      	bne.n	80008b8 <MCAL_UART_GPIO_Set_Pins+0x74>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800088a:	2302      	movs	r3, #2
 800088c:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800088e:	2306      	movs	r3, #6
 8000890:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000892:	2301      	movs	r3, #1
 8000894:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4619      	mov	r1, r3
 800089c:	4816      	ldr	r0, [pc, #88]	; (80008f8 <MCAL_UART_GPIO_Set_Pins+0xb4>)
 800089e:	f000 f915 	bl	8000acc <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80008a2:	2303      	movs	r3, #3
 80008a4:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80008a6:	2308      	movs	r3, #8
 80008a8:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MCAL_UART_GPIO_Set_Pins+0xb4>)
 80008b2:	f000 f90b 	bl	8000acc <MCAL_GPIO_Init>
}
 80008b6:	e019      	b.n	80008ec <MCAL_UART_GPIO_Set_Pins+0xa8>
	else if ( USARTx == USART3 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d115      	bne.n	80008ec <MCAL_UART_GPIO_Set_Pins+0xa8>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80008c0:	230a      	movs	r3, #10
 80008c2:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80008c4:	2306      	movs	r3, #6
 80008c6:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80008d4:	f000 f8fa 	bl	8000acc <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80008d8:	230b      	movs	r3, #11
 80008da:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80008dc:	2308      	movs	r3, #8
 80008de:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80008e8:	f000 f8f0 	bl	8000acc <MCAL_GPIO_Init>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40013800 	.word	0x40013800
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40004400 	.word	0x40004400
 8000900:	40004800 	.word	0x40004800
 8000904:	40010c00 	.word	0x40010c00

08000908 <MCAL_UART_SendData>:
			//			bit

 */

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	4613      	mov	r3, r2
 8000914:	71fb      	strb	r3, [r7, #7]
	// wait until TXE flag is set in the SR
	if (PollingEn == enable)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d106      	bne.n	800092a <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 800091c:	bf00      	nop
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f9      	beq.n	800091e <MCAL_UART_SendData+0x16>

	//Check the USART_WordLength item for 9BIT or 8BIT in a frame
	if ( USARTx == USART1 )
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4a17      	ldr	r2, [pc, #92]	; (800098c <MCAL_UART_SendData+0x84>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10a      	bne.n	8000948 <MCAL_UART_SendData+0x40>
		if(G_UART_Config[0]->Payload_Length == UART_Payload_Length_9B)
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

		}else if (G_UART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MCAL_UART_SendData+0x88>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	7a1b      	ldrb	r3, [r3, #8]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d122      	bne.n	8000982 <MCAL_UART_SendData+0x7a>
		{
			//if 8BIT, load the DR with 1bytes
			USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	605a      	str	r2, [r3, #4]
			USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
		}

	}

}
 8000946:	e01c      	b.n	8000982 <MCAL_UART_SendData+0x7a>
	else if ( USARTx == USART2 )
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MCAL_UART_SendData+0x8c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d10a      	bne.n	8000966 <MCAL_UART_SendData+0x5e>
		}else if (G_UART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MCAL_UART_SendData+0x88>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	7a1b      	ldrb	r3, [r3, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d113      	bne.n	8000982 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	605a      	str	r2, [r3, #4]
}
 8000964:	e00d      	b.n	8000982 <MCAL_UART_SendData+0x7a>
	else if ( USARTx == USART3 )
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <MCAL_UART_SendData+0x90>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d109      	bne.n	8000982 <MCAL_UART_SendData+0x7a>
		}else if (G_UART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MCAL_UART_SendData+0x88>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	7a1b      	ldrb	r3, [r3, #8]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d104      	bne.n	8000982 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	605a      	str	r2, [r3, #4]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40013800 	.word	0x40013800
 8000990:	20000024 	.word	0x20000024
 8000994:	40004400 	.word	0x40004400
 8000998:	40004800 	.word	0x40004800

0800099c <MCAL_UART_ReceiveData>:
			//			When receiving with the parity enabled, the value read in the MSB bit is the received parity
			//			bit

 */
void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE(Read data register not empty) flag is set in the SR
	if (PollingEn == enable)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d106      	bne.n	80009be <MCAL_UART_ReceiveData+0x22>
		while( ! (USARTx->SR & 1<<5 ));
 80009b0:	bf00      	nop
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0320 	and.w	r3, r3, #32
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f9      	beq.n	80009b2 <MCAL_UART_ReceiveData+0x16>

	//Check the USART_WordLength item for 9BIT or 8BIT in a frame
	if ( USARTx == USART1 )
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4a2f      	ldr	r2, [pc, #188]	; (8000a80 <MCAL_UART_ReceiveData+0xe4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d11a      	bne.n	80009fc <MCAL_UART_ReceiveData+0x60>
			{
				//Parity is used, so, 8bits will be of user data and 1 bit is parity
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0xFF );
			}

		}else if (G_UART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <MCAL_UART_ReceiveData+0xe8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d152      	bne.n	8000a76 <MCAL_UART_ReceiveData+0xda>
		{
			if(G_UART_Config[0]->Parity == UART_Parity__NONE)
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <MCAL_UART_ReceiveData+0xe8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	7a5b      	ldrb	r3, [r3, #9]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d107      	bne.n	80009ea <MCAL_UART_ReceiveData+0x4e>
			{
				//no parity So all 8bit are considered data
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	801a      	strh	r2, [r3, #0]
			}
		}

	}

}
 80009e8:	e045      	b.n	8000a76 <MCAL_UART_ReceiveData+0xda>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	801a      	strh	r2, [r3, #0]
}
 80009fa:	e03c      	b.n	8000a76 <MCAL_UART_ReceiveData+0xda>
	else if ( USARTx == USART2 )
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <MCAL_UART_ReceiveData+0xec>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d11a      	bne.n	8000a3a <MCAL_UART_ReceiveData+0x9e>
		}else if (G_UART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MCAL_UART_ReceiveData+0xe8>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	7a1b      	ldrb	r3, [r3, #8]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d133      	bne.n	8000a76 <MCAL_UART_ReceiveData+0xda>
			if(G_UART_Config[1]->Parity == UART_Parity__NONE)
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MCAL_UART_ReceiveData+0xe8>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	7a5b      	ldrb	r3, [r3, #9]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d107      	bne.n	8000a28 <MCAL_UART_ReceiveData+0x8c>
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	801a      	strh	r2, [r3, #0]
}
 8000a26:	e026      	b.n	8000a76 <MCAL_UART_ReceiveData+0xda>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	801a      	strh	r2, [r3, #0]
}
 8000a38:	e01d      	b.n	8000a76 <MCAL_UART_ReceiveData+0xda>
	else if ( USARTx == USART3 )
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <MCAL_UART_ReceiveData+0xf0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d119      	bne.n	8000a76 <MCAL_UART_ReceiveData+0xda>
		}else if (G_UART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MCAL_UART_ReceiveData+0xe8>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	7a1b      	ldrb	r3, [r3, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d114      	bne.n	8000a76 <MCAL_UART_ReceiveData+0xda>
			if(G_UART_Config[2]->Parity == UART_Parity__NONE)
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MCAL_UART_ReceiveData+0xe8>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	7a5b      	ldrb	r3, [r3, #9]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d107      	bne.n	8000a66 <MCAL_UART_ReceiveData+0xca>
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	801a      	strh	r2, [r3, #0]
}
 8000a64:	e007      	b.n	8000a76 <MCAL_UART_ReceiveData+0xda>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	801a      	strh	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40013800 	.word	0x40013800
 8000a84:	20000024 	.word	0x20000024
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40004800 	.word	0x40004800

08000a90 <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

	G_UART_Config[0]->P_IRQ_CallBack () ;
 8000a94:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <USART1_IRQHandler+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	4798      	blx	r3

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000024 	.word	0x20000024

08000aa4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	G_UART_Config[1]->P_IRQ_CallBack () ;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <USART2_IRQHandler+0x10>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	4798      	blx	r3

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000024 	.word	0x20000024

08000ab8 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	G_UART_Config[2]->P_IRQ_CallBack () ;
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <USART3_IRQHandler+0x10>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	4798      	blx	r3


}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000024 	.word	0x20000024

08000acc <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX ,  GPIO_PinConfig_t *PinConfig)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister ;
	uint8_t PIN_Config = 0 ;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75fb      	strb	r3, [r7, #23]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	d801      	bhi.n	8000ae6 <MCAL_GPIO_Init+0x1a>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	e001      	b.n	8000aea <MCAL_GPIO_Init+0x1e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	613b      	str	r3, [r7, #16]

	//Get the position of configuration pins in CRL or CRH
	// CRL (position = pin number * 4)
	// CRH (position = (pinNumber-8)*4)
	uint8_t CRLH_Position;
	CRLH_Position = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? (PinConfig->GPIO_PinNumber * 4): ((PinConfig->GPIO_PinNumber -8) * 4) ;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b07      	cmp	r3, #7
 8000af2:	d804      	bhi.n	8000afe <MCAL_GPIO_Init+0x32>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	e005      	b.n	8000b0a <MCAL_GPIO_Init+0x3e>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	3338      	adds	r3, #56	; 0x38
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	73fb      	strb	r3, [r7, #15]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << CRLH_Position);
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	7bfa      	ldrb	r2, [r7, #15]
 8000b12:	210f      	movs	r1, #15
 8000b14:	fa01 f202 	lsl.w	r2, r1, r2
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_Mode > GPIO_MODE_INPUT_PD) && (PinConfig->GPIO_Mode != GPIO_MODE_AF_INPUT))
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	785b      	ldrb	r3, [r3, #1]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d912      	bls.n	8000b4e <MCAL_GPIO_Init+0x82>
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d00e      	beq.n	8000b4e <MCAL_GPIO_Init+0x82>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4)<<2)|(PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	785b      	ldrb	r3, [r3, #1]
 8000b34:	3b04      	subs	r3, #4
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	b25a      	sxtb	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	75fb      	strb	r3, [r7, #23]
 8000b4c:	e032      	b.n	8000bb4 <MCAL_GPIO_Init+0xe8>
	}
	//else the pin is input
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_Analog)||(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <MCAL_GPIO_Init+0x92>
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d107      	bne.n	8000b6e <MCAL_GPIO_Init+0xa2>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((PinConfig->GPIO_Mode)<<2)|0x0) & 0x0f);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	75fb      	strb	r3, [r7, #23]
 8000b6c:	e022      	b.n	8000bb4 <MCAL_GPIO_Init+0xe8>
		}
		else if ((PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT))
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d102      	bne.n	8000b7c <MCAL_GPIO_Init+0xb0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_FLO)<<2)|0x0) & 0x0f);
 8000b76:	2304      	movs	r3, #4
 8000b78:	75fb      	strb	r3, [r7, #23]
 8000b7a:	e01b      	b.n	8000bb4 <MCAL_GPIO_Init+0xe8>
		}
		else //PU PD Input
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_PU)<<2)|0x0) & 0x0f);
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	75fb      	strb	r3, [r7, #23]

			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d10a      	bne.n	8000b9e <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOX->ODR |= (1<<PinConfig->GPIO_PinNumber);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	4611      	mov	r1, r2
 8000b92:	2201      	movs	r2, #1
 8000b94:	408a      	lsls	r2, r1
 8000b96:	431a      	orrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	e00a      	b.n	8000bb4 <MCAL_GPIO_Init+0xe8>
			}
			else
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOX->ODR &= ~(1<<PinConfig->GPIO_PinNumber);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	2201      	movs	r2, #1
 8000baa:	408a      	lsls	r2, r1
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	401a      	ands	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << CRLH_Position);
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	7df9      	ldrb	r1, [r7, #23]
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	601a      	str	r2, [r3, #0]

}
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOX,uint8_t PinNumber , uint8_t Value)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	70bb      	strb	r3, [r7, #2]
	if(Value != GPIO_PIN_RESET)
 8000be0:	78bb      	ldrb	r3, [r7, #2]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d009      	beq.n	8000bfa <MCAL_GPIO_WritePin+0x2a>
	{
		GPIOX->ODR |= (1<<PinNumber);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOX->ODR &= ~(1<<PinNumber);
	}

}
 8000bf8:	e009      	b.n	8000c0e <MCAL_GPIO_WritePin+0x3e>
		GPIOX->ODR &= ~(1<<PinNumber);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	78fa      	ldrb	r2, [r7, #3]
 8000c00:	2101      	movs	r1, #1
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	43d2      	mvns	r2, r2
 8000c08:	401a      	ands	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60da      	str	r2, [r3, #12]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <UART_IRQ_Callback>:
	}
#endif
}

void UART_IRQ_Callback (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

#ifdef MCU_Act_As_Master
	MCAL_UART_ReceiveData(USART1, &ch, disable);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <UART_IRQ_Callback+0x3c>)
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <UART_IRQ_Callback+0x40>)
 8000c22:	f7ff febb 	bl	800099c <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 8000c26:	2200      	movs	r2, #0
 8000c28:	490a      	ldr	r1, [pc, #40]	; (8000c54 <UART_IRQ_Callback+0x3c>)
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <UART_IRQ_Callback+0x40>)
 8000c2c:	f7ff fe6c 	bl	8000908 <MCAL_UART_SendData>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2104      	movs	r1, #4
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <UART_IRQ_Callback+0x44>)
 8000c36:	f7ff ffcb 	bl	8000bd0 <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &ch, SPI_enable);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4905      	ldr	r1, [pc, #20]	; (8000c54 <UART_IRQ_Callback+0x3c>)
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <UART_IRQ_Callback+0x48>)
 8000c40:	f7ff fc98 	bl	8000574 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2104      	movs	r1, #4
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <UART_IRQ_Callback+0x44>)
 8000c4a:	f7ff ffc1 	bl	8000bd0 <MCAL_GPIO_WritePin>
#endif
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000030 	.word	0x20000030
 8000c58:	40013800 	.word	0x40013800
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40013000 	.word	0x40013000

08000c64 <main>:

int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0

	//Enable CLock
	RCC_GPIOA_CLK_EN();
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <main+0xc0>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a2d      	ldr	r2, [pc, #180]	; (8000d24 <main+0xc0>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <main+0xc0>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <main+0xc0>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <main+0xc0>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a27      	ldr	r2, [pc, #156]	; (8000d24 <main+0xc0>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]

	//=========	UART Initiate ==========
	UART_PinConfig_t uartCFG ;
	uartCFG.BaudRate = UART_BaudRate_115200 ;
 8000c8e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c92:	623b      	str	r3, [r7, #32]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE ;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE ;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback ;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <main+0xc4>)
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartCFG.Parity =UART_Parity__NONE ;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uartCFG.StopBits = UART_StopBits__1 ;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uartCFG.Mode = UART_Mode_TX_RX ;
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	773b      	strb	r3, [r7, #28]

	MCAL_UART_Init(USART1, &uartCFG);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	481a      	ldr	r0, [pc, #104]	; (8000d2c <main+0xc8>)
 8000cc2:	f7ff fd11 	bl	80006e8 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000cc6:	4819      	ldr	r0, [pc, #100]	; (8000d2c <main+0xc8>)
 8000cc8:	f7ff fdbc 	bl	8000844 <MCAL_UART_GPIO_Set_Pins>

	//=======	SPI Initiate ============
	SPI_Config_t SPI_Cfg ;
	SPI_Cfg.Communication_Mode = SPI_Communication_Mode_2line_Full_duplex;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	80fb      	strh	r3, [r7, #6]
	SPI_Cfg.Data_Size 	 = SPI_Data_Size_8bits ;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	813b      	strh	r3, [r7, #8]
	SPI_Cfg.Frame_Format = SPI_Frame_Format_MSB_First;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	817b      	strh	r3, [r7, #10]
	SPI_Cfg.clock_phase  = SPI_clock_phase_Second_Edge;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	827b      	strh	r3, [r7, #18]
	SPI_Cfg.clock_polarity=SPI_clock_polarity_HIGH ;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	823b      	strh	r3, [r7, #16]
	SPI_Cfg.baud_rate_prescalers = SPI_baud_rate_prescalers_8 ;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	81bb      	strh	r3, [r7, #12]

#ifdef MCU_Act_As_Master

	SPI_Cfg.Dvice_Mode = SPI_Dvice_Mode_Master;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	80bb      	strh	r3, [r7, #4]
	SPI_Cfg.NSS = SPI_NSS_SW_Internal_select_Set;
 8000ce8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cec:	81fb      	strh	r3, [r7, #14]
	SPI_Cfg.IRQ_Enable = SPI_IRQ_Enable_NONE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	82bb      	strh	r3, [r7, #20]


	// SS Control Pin4 PORTA  by GPIO
	GPIO_PinConfig_t Pin_Cfg ;
	Pin_Cfg.GPIO_PinNumber = GPIO_PIN_4;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	703b      	strb	r3, [r7, #0]
	Pin_Cfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	707b      	strb	r3, [r7, #1]
	Pin_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	70bb      	strb	r3, [r7, #2]
	MCAL_GPIO_Init(GPIOA, &Pin_Cfg);
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4619      	mov	r1, r3
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <main+0xcc>)
 8000d04:	f7ff fee2 	bl	8000acc <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <main+0xcc>)
 8000d0e:	f7ff ff5f 	bl	8000bd0 <MCAL_GPIO_WritePin>
	SPI_Cfg.Dvice_Mode = SPI_Dvice_Mode_Slave;
	SPI_Cfg.NSS = SPI_NSS_HW_Slave;
	SPI_Cfg.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
	SPI_Cfg.P_IRQ_CallBack = SPI_IRQ_CallBack ;
#endif
	MCAL_SPI_Init(SPI1, &SPI_Cfg);
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <main+0xd0>)
 8000d18:	f7ff fa2a 	bl	8000170 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <main+0xd0>)
 8000d1e:	f7ff fac5 	bl	80002ac <MCAL_SPI_GPIO_Set_Pins>




	/* Loop forever */
	while(1)
 8000d22:	e7fe      	b.n	8000d22 <main+0xbe>
 8000d24:	40021000 	.word	0x40021000
 8000d28:	08000c19 	.word	0x08000c19
 8000d2c:	40013800 	.word	0x40013800
 8000d30:	40010800 	.word	0x40010800
 8000d34:	40013000 	.word	0x40013000

08000d38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d3c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	; (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d66:	f000 f811 	bl	8000d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff ff7b 	bl	8000c64 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   r0, =_estack
 8000d70:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d7c:	08000dfc 	.word	0x08000dfc
  ldr r2, =_sbss
 8000d80:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d84:	20000034 	.word	0x20000034

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>
	...

08000d8c <__libc_init_array>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	2500      	movs	r5, #0
 8000d90:	4e0c      	ldr	r6, [pc, #48]	; (8000dc4 <__libc_init_array+0x38>)
 8000d92:	4c0d      	ldr	r4, [pc, #52]	; (8000dc8 <__libc_init_array+0x3c>)
 8000d94:	1ba4      	subs	r4, r4, r6
 8000d96:	10a4      	asrs	r4, r4, #2
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	d109      	bne.n	8000db0 <__libc_init_array+0x24>
 8000d9c:	f000 f81a 	bl	8000dd4 <_init>
 8000da0:	2500      	movs	r5, #0
 8000da2:	4e0a      	ldr	r6, [pc, #40]	; (8000dcc <__libc_init_array+0x40>)
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <__libc_init_array+0x44>)
 8000da6:	1ba4      	subs	r4, r4, r6
 8000da8:	10a4      	asrs	r4, r4, #2
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d105      	bne.n	8000dba <__libc_init_array+0x2e>
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db4:	4798      	blx	r3
 8000db6:	3501      	adds	r5, #1
 8000db8:	e7ee      	b.n	8000d98 <__libc_init_array+0xc>
 8000dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dbe:	4798      	blx	r3
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	e7f2      	b.n	8000daa <__libc_init_array+0x1e>
 8000dc4:	08000df4 	.word	0x08000df4
 8000dc8:	08000df4 	.word	0x08000df4
 8000dcc:	08000df4 	.word	0x08000df4
 8000dd0:	08000df8 	.word	0x08000df8

08000dd4 <_init>:
 8000dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd6:	bf00      	nop
 8000dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dda:	bc08      	pop	{r3}
 8000ddc:	469e      	mov	lr, r3
 8000dde:	4770      	bx	lr

08000de0 <_fini>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr
