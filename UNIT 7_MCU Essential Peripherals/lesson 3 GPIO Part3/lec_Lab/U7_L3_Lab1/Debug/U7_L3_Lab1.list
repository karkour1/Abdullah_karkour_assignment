
U7_L3_Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a8  080004b0  000104b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004a8  080004a8  000104b0  2**0
                  CONTENTS
  4 .ARM          00000000  080004a8  080004a8  000104b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004a8  080004b0  000104b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a8  080004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004b0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000612  00000000  00000000  000104d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001c7  00000000  00000000  00010aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b0  00000000  00000000  00010cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000088  00000000  00000000  00010d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000cc0  00000000  00000000  00010df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000051c  00000000  00000000  00011ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000036f4  00000000  00000000  00011fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000156c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e8  00000000  00000000  0001573c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000490 	.word	0x08000490

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000490 	.word	0x08000490

08000170 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX ,  GPIO_PinConfig_t *PinConfig)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32* configregister ;
	uint8 PIN_Config = 0 ;
 800017a:	2300      	movs	r3, #0
 800017c:	75fb      	strb	r3, [r7, #23]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b07      	cmp	r3, #7
 8000184:	d801      	bhi.n	800018a <MCAL_GPIO_Init+0x1a>
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	e001      	b.n	800018e <MCAL_GPIO_Init+0x1e>
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3304      	adds	r3, #4
 800018e:	613b      	str	r3, [r7, #16]

	//Get the position of configuration pins in CRL or CRH
	// CRL (position = pin number * 4)
	// CRH (position = (pinNumber-8)*4)
	uint8 CRLH_Position;
	CRLH_Position = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? (PinConfig->GPIO_PinNumber * 4): ((PinConfig->GPIO_PinNumber -8) * 4) ;
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b07      	cmp	r3, #7
 8000196:	d804      	bhi.n	80001a2 <MCAL_GPIO_Init+0x32>
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	e005      	b.n	80001ae <MCAL_GPIO_Init+0x3e>
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	3338      	adds	r3, #56	; 0x38
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	73fb      	strb	r3, [r7, #15]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << CRLH_Position);
 80001b0:	693b      	ldr	r3, [r7, #16]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	7bfa      	ldrb	r2, [r7, #15]
 80001b6:	210f      	movs	r1, #15
 80001b8:	fa01 f202 	lsl.w	r2, r1, r2
 80001bc:	43d2      	mvns	r2, r2
 80001be:	401a      	ands	r2, r3
 80001c0:	693b      	ldr	r3, [r7, #16]
 80001c2:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_Mode > GPIO_MODE_INPUT_PD) && (PinConfig->GPIO_Mode != GPIO_MODE_AF_INPUT))
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	785b      	ldrb	r3, [r3, #1]
 80001c8:	2b03      	cmp	r3, #3
 80001ca:	d912      	bls.n	80001f2 <MCAL_GPIO_Init+0x82>
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	785b      	ldrb	r3, [r3, #1]
 80001d0:	2b08      	cmp	r3, #8
 80001d2:	d00e      	beq.n	80001f2 <MCAL_GPIO_Init+0x82>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4)<<2)|(PinConfig->GPIO_Output_Speed)) & 0x0f);
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	785b      	ldrb	r3, [r3, #1]
 80001d8:	3b04      	subs	r3, #4
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	b25a      	sxtb	r2, r3
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	789b      	ldrb	r3, [r3, #2]
 80001e2:	b25b      	sxtb	r3, r3
 80001e4:	4313      	orrs	r3, r2
 80001e6:	b25b      	sxtb	r3, r3
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	75fb      	strb	r3, [r7, #23]
 80001f0:	e032      	b.n	8000258 <MCAL_GPIO_Init+0xe8>
	}
	//else the pin is input
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_Analog)||(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	785b      	ldrb	r3, [r3, #1]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d003      	beq.n	8000202 <MCAL_GPIO_Init+0x92>
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	785b      	ldrb	r3, [r3, #1]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d107      	bne.n	8000212 <MCAL_GPIO_Init+0xa2>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((PinConfig->GPIO_Mode)<<2)|0x0) & 0x0f);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	785b      	ldrb	r3, [r3, #1]
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	b2db      	uxtb	r3, r3
 800020a:	f003 030f 	and.w	r3, r3, #15
 800020e:	75fb      	strb	r3, [r7, #23]
 8000210:	e022      	b.n	8000258 <MCAL_GPIO_Init+0xe8>
		}
		else if ((PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT))
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	2b08      	cmp	r3, #8
 8000218:	d102      	bne.n	8000220 <MCAL_GPIO_Init+0xb0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_FLO)<<2)|0x0) & 0x0f);
 800021a:	2304      	movs	r3, #4
 800021c:	75fb      	strb	r3, [r7, #23]
 800021e:	e01b      	b.n	8000258 <MCAL_GPIO_Init+0xe8>
		}
		else //PU PD Input
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_PU)<<2)|0x0) & 0x0f);
 8000220:	2308      	movs	r3, #8
 8000222:	75fb      	strb	r3, [r7, #23]

			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	785b      	ldrb	r3, [r3, #1]
 8000228:	2b02      	cmp	r3, #2
 800022a:	d10a      	bne.n	8000242 <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOX->ODR |= (1<<PinConfig->GPIO_PinNumber);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	4611      	mov	r1, r2
 8000236:	2201      	movs	r2, #1
 8000238:	408a      	lsls	r2, r1
 800023a:	431a      	orrs	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	e00a      	b.n	8000258 <MCAL_GPIO_Init+0xe8>
			}
			else
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOX->ODR &= ~(1<<PinConfig->GPIO_PinNumber);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	4611      	mov	r1, r2
 800024c:	2201      	movs	r2, #1
 800024e:	408a      	lsls	r2, r1
 8000250:	43d2      	mvns	r2, r2
 8000252:	401a      	ands	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << CRLH_Position);
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	7df9      	ldrb	r1, [r7, #23]
 800025e:	7bfa      	ldrb	r2, [r7, #15]
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	431a      	orrs	r2, r3
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	601a      	str	r2, [r3, #0]

}
 800026a:	bf00      	nop
 800026c:	371c      	adds	r7, #28
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8 MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOX,uint8 PinNumber )
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
	uint8 bitstatus ;
	if(((GPIOX->IDR)&(1<<PinNumber))!= (uint32)GPIO_PIN_RESET)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	78fa      	ldrb	r2, [r7, #3]
 8000286:	2101      	movs	r1, #1
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4013      	ands	r3, r2
 800028e:	2b00      	cmp	r3, #0
 8000290:	d002      	beq.n	8000298 <MCAL_GPIO_ReadPin+0x24>
	{
		bitstatus = GPIO_PIN_SET ;
 8000292:	2301      	movs	r3, #1
 8000294:	73fb      	strb	r3, [r7, #15]
 8000296:	e001      	b.n	800029c <MCAL_GPIO_ReadPin+0x28>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET ;
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus ;
 800029c:	7bfb      	ldrb	r3, [r7, #15]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <MCAL_GPIO_TogglePin>:
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_TogglePin (GPIO_TypeDef *GPIOX,uint8 PinNumber )
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	GPIOX->ODR ^= (1<<PinNumber);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	78fa      	ldrb	r2, [r7, #3]
 80002ba:	2101      	movs	r1, #1
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	405a      	eors	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	60da      	str	r2, [r3, #12]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <clock_init>:
#include "Stm32_F103X6.h"

GPIO_PinConfig_t pinconfg  ;

void clock_init()
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	// Enable IO port A clock
	RCC_GPIOA_CLK_EN();
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <clock_init+0x24>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <clock_init+0x24>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
	// Enable IO Port B clock
	RCC_GPIOB_CLK_EN() ;
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <clock_init+0x24>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a03      	ldr	r2, [pc, #12]	; (80002f4 <clock_init+0x24>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <GPIO_init>:
void GPIO_init()
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	// set Register initial value 0
	GPIOA->CRL =0;
 80002fc:	4b20      	ldr	r3, [pc, #128]	; (8000380 <GPIO_init+0x88>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
	GPIOA->CRH =0;
 8000302:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <GPIO_init+0x88>)
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
	GPIOA->ODR =0;
 8000308:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <GPIO_init+0x88>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
	GPIOB->CRL =0;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <GPIO_init+0x8c>)
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
	GPIOB->CRH =0;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <GPIO_init+0x8c>)
 8000316:	2200      	movs	r2, #0
 8000318:	605a      	str	r2, [r3, #4]
	GPIOB->ODR =0;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <GPIO_init+0x8c>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]

	// PA1 input in floating mode
	pinconfg.GPIO_PinNumber = GPIO_PIN_1;
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <GPIO_init+0x90>)
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <GPIO_init+0x90>)
 8000328:	2201      	movs	r2, #1
 800032a:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(GPIOA, &pinconfg);
 800032c:	4916      	ldr	r1, [pc, #88]	; (8000388 <GPIO_init+0x90>)
 800032e:	4814      	ldr	r0, [pc, #80]	; (8000380 <GPIO_init+0x88>)
 8000330:	f7ff ff1e 	bl	8000170 <MCAL_GPIO_Init>
	// PB1 output in push-pull mode
	pinconfg.GPIO_PinNumber = GPIO_PIN_1;
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <GPIO_init+0x90>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <GPIO_init+0x90>)
 800033c:	2204      	movs	r2, #4
 800033e:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <GPIO_init+0x90>)
 8000342:	2201      	movs	r2, #1
 8000344:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOB, &pinconfg);
 8000346:	4910      	ldr	r1, [pc, #64]	; (8000388 <GPIO_init+0x90>)
 8000348:	480e      	ldr	r0, [pc, #56]	; (8000384 <GPIO_init+0x8c>)
 800034a:	f7ff ff11 	bl	8000170 <MCAL_GPIO_Init>
	// PA13 input in floating mode
	pinconfg.GPIO_PinNumber = GPIO_PIN_13;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <GPIO_init+0x90>)
 8000350:	220d      	movs	r2, #13
 8000352:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <GPIO_init+0x90>)
 8000356:	2201      	movs	r2, #1
 8000358:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(GPIOA, &pinconfg);
 800035a:	490b      	ldr	r1, [pc, #44]	; (8000388 <GPIO_init+0x90>)
 800035c:	4808      	ldr	r0, [pc, #32]	; (8000380 <GPIO_init+0x88>)
 800035e:	f7ff ff07 	bl	8000170 <MCAL_GPIO_Init>
	// PB13 output in push-pull mode
	pinconfg.GPIO_PinNumber = GPIO_PIN_13;
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <GPIO_init+0x90>)
 8000364:	220d      	movs	r2, #13
 8000366:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <GPIO_init+0x90>)
 800036a:	2204      	movs	r2, #4
 800036c:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <GPIO_init+0x90>)
 8000370:	2201      	movs	r2, #1
 8000372:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOB, &pinconfg);
 8000374:	4904      	ldr	r1, [pc, #16]	; (8000388 <GPIO_init+0x90>)
 8000376:	4803      	ldr	r0, [pc, #12]	; (8000384 <GPIO_init+0x8c>)
 8000378:	f7ff fefa 	bl	8000170 <MCAL_GPIO_Init>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40010800 	.word	0x40010800
 8000384:	40010c00 	.word	0x40010c00
 8000388:	2000001c 	.word	0x2000001c

0800038c <main>:
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	clock_init();
 8000392:	f7ff ff9d 	bl	80002d0 <clock_init>
	GPIO_init();
 8000396:	f7ff ffaf 	bl	80002f8 <GPIO_init>

	/* Loop forever */
	while(1)
	{
		if ( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800039a:	2101      	movs	r1, #1
 800039c:	4813      	ldr	r0, [pc, #76]	; (80003ec <main+0x60>)
 800039e:	f7ff ff69 	bl	8000274 <MCAL_GPIO_ReadPin>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d10b      	bne.n	80003c0 <main+0x34>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80003a8:	2101      	movs	r1, #1
 80003aa:	4811      	ldr	r0, [pc, #68]	; (80003f0 <main+0x64>)
 80003ac:	f7ff ff7c 	bl	80002a8 <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0); // for single press
 80003b0:	bf00      	nop
 80003b2:	2101      	movs	r1, #1
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <main+0x60>)
 80003b6:	f7ff ff5d 	bl	8000274 <MCAL_GPIO_ReadPin>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f8      	beq.n	80003b2 <main+0x26>
		}

		if ( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1)
 80003c0:	210d      	movs	r1, #13
 80003c2:	480a      	ldr	r0, [pc, #40]	; (80003ec <main+0x60>)
 80003c4:	f7ff ff56 	bl	8000274 <MCAL_GPIO_ReadPin>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d103      	bne.n	80003d6 <main+0x4a>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80003ce:	210d      	movs	r1, #13
 80003d0:	4807      	ldr	r0, [pc, #28]	; (80003f0 <main+0x64>)
 80003d2:	f7ff ff69 	bl	80002a8 <MCAL_GPIO_TogglePin>
		}
		int i ;
		for(i=0 ; i<255 ; i++);
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	e002      	b.n	80003e2 <main+0x56>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3301      	adds	r3, #1
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2bfe      	cmp	r3, #254	; 0xfe
 80003e6:	ddf9      	ble.n	80003dc <main+0x50>
	{
 80003e8:	e7d7      	b.n	800039a <main+0xe>
 80003ea:	bf00      	nop
 80003ec:	40010800 	.word	0x40010800
 80003f0:	40010c00 	.word	0x40010c00

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f000 f811 	bl	8000448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f7ff ffb1 	bl	800038c <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000438:	080004b0 	.word	0x080004b0
  ldr r2, =_sbss
 800043c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000440:	20000020 	.word	0x20000020

08000444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_2_IRQHandler>
	...

08000448 <__libc_init_array>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	2500      	movs	r5, #0
 800044c:	4e0c      	ldr	r6, [pc, #48]	; (8000480 <__libc_init_array+0x38>)
 800044e:	4c0d      	ldr	r4, [pc, #52]	; (8000484 <__libc_init_array+0x3c>)
 8000450:	1ba4      	subs	r4, r4, r6
 8000452:	10a4      	asrs	r4, r4, #2
 8000454:	42a5      	cmp	r5, r4
 8000456:	d109      	bne.n	800046c <__libc_init_array+0x24>
 8000458:	f000 f81a 	bl	8000490 <_init>
 800045c:	2500      	movs	r5, #0
 800045e:	4e0a      	ldr	r6, [pc, #40]	; (8000488 <__libc_init_array+0x40>)
 8000460:	4c0a      	ldr	r4, [pc, #40]	; (800048c <__libc_init_array+0x44>)
 8000462:	1ba4      	subs	r4, r4, r6
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	42a5      	cmp	r5, r4
 8000468:	d105      	bne.n	8000476 <__libc_init_array+0x2e>
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000470:	4798      	blx	r3
 8000472:	3501      	adds	r5, #1
 8000474:	e7ee      	b.n	8000454 <__libc_init_array+0xc>
 8000476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800047a:	4798      	blx	r3
 800047c:	3501      	adds	r5, #1
 800047e:	e7f2      	b.n	8000466 <__libc_init_array+0x1e>
 8000480:	080004a8 	.word	0x080004a8
 8000484:	080004a8 	.word	0x080004a8
 8000488:	080004a8 	.word	0x080004a8
 800048c:	080004ac 	.word	0x080004ac

08000490 <_init>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr

0800049c <_fini>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr
